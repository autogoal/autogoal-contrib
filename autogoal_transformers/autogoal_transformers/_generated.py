# AUTOGENERATED ON 2023-10-24 11:40:23.568660
## DO NOT MODIFY THIS FILE MANUALLY

from numpy import inf, nan

from autogoal.grammar import (
    ContinuousValue,
    DiscreteValue,
    CategoricalValue,
    BooleanValue,
)
from autogoal_transformers._builder import (
    PetrainedTextClassifier,
)
from autogoal.kb import *


class DistilbertBaseUncasedFinetunedSstEnglish(PetrainedTextClassifier):
    name = "distilbert-base-uncased-finetuned-sst-2-english"
    id2label = {"0": "NEGATIVE", "1": "POSITIVE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class RobertaBaseOpenaiDetector(PetrainedTextClassifier):
    name = "roberta-base-openai-detector"
    id2label = {"0": "Fake", "1": "Real"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class RobertaLargeMnli(PetrainedTextClassifier):
    name = "roberta-large-mnli"
    id2label = {"0": "CONTRADICTION", "1": "NEUTRAL", "2": "ENTAILMENT"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class RobertaLargeOpenaiDetector(PetrainedTextClassifier):
    name = "roberta-large-openai-detector"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Panesara_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "09panesara/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Abhialflkfo_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "123abhiALFLKFO/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class _Bert_Cn_Finetuning(PetrainedTextClassifier):
    name = "18811449050/bert_cn_finetuning"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class _Bert_Finetuning_Test(PetrainedTextClassifier):
    name = "18811449050/bert_finetuning_test"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Umm3R_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "2umm3r/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class ABhimanyU08_BertBaseCasedQqp(PetrainedTextClassifier):
    name = "A-bhimany-u08/bert-base-cased-qqp"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class AidaUpm_BertweetBaseMultiMami(PetrainedTextClassifier):
    name = "AIDA-UPM/bertweet-base-multi-mami"
    id2label = {
        "0": "misogynous",
        "1": "objectification",
        "2": "shaming",
        "3": "stereotype",
        "4": "violence",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ascccccccc_PengmengjieFinetunedEmotion(PetrainedTextClassifier):
    name = "ASCCCCCCCC/PENGMENGJIE-finetuned-emotion"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ascccccccc_BertBaseChineseFinetunedAmazon_Zh(PetrainedTextClassifier):
    name = "ASCCCCCCCC/bert-base-chinese-finetuned-amazon_zh"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ascccccccc_BertBaseChineseFinetunedAmazon_Zh_20000(PetrainedTextClassifier):
    name = "ASCCCCCCCC/bert-base-chinese-finetuned-amazon_zh_20000"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ascccccccc_DistilbertBaseChineseAmazon_Zh_20000(PetrainedTextClassifier):
    name = "ASCCCCCCCC/distilbert-base-chinese-amazon_zh_20000"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ascccccccc_DistilbertBaseMultilingualCasedAmazon_Zh_20000(
    PetrainedTextClassifier
):
    name = "ASCCCCCCCC/distilbert-base-multilingual-cased-amazon_zh_20000"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ascccccccc_DistilbertBaseUncasedFinetunedAmazon_Zh_20000(PetrainedTextClassifier):
    name = "ASCCCCCCCC/distilbert-base-uncased-finetuned-amazon_zh_20000"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ascccccccc_DistilbertBaseUncasedFinetunedClinc(PetrainedTextClassifier):
    name = "ASCCCCCCCC/distilbert-base-uncased-finetuned-clinc"
    id2label = {
        "0": "restaurant_reviews",
        "1": "nutrition_info",
        "2": "account_blocked",
        "3": "oil_change_how",
        "4": "time",
        "5": "weather",
        "6": "redeem_rewards",
        "7": "interest_rate",
        "8": "gas_type",
        "9": "accept_reservations",
        "10": "smart_home",
        "11": "user_name",
        "12": "report_lost_card",
        "13": "repeat",
        "14": "whisper_mode",
        "15": "what_are_your_hobbies",
        "16": "order",
        "17": "jump_start",
        "18": "schedule_meeting",
        "19": "meeting_schedule",
        "20": "freeze_account",
        "21": "what_song",
        "22": "meaning_of_life",
        "23": "restaurant_reservation",
        "24": "traffic",
        "25": "make_call",
        "26": "text",
        "27": "bill_balance",
        "28": "improve_credit_score",
        "29": "change_language",
        "30": "no",
        "31": "measurement_conversion",
        "32": "timer",
        "33": "flip_coin",
        "34": "do_you_have_pets",
        "35": "balance",
        "36": "tell_joke",
        "37": "last_maintenance",
        "38": "exchange_rate",
        "39": "uber",
        "40": "car_rental",
        "41": "credit_limit",
        "42": "oos",
        "43": "shopping_list",
        "44": "expiration_date",
        "45": "routing",
        "46": "meal_suggestion",
        "47": "tire_change",
        "48": "todo_list",
        "49": "card_declined",
        "50": "rewards_balance",
        "51": "change_accent",
        "52": "vaccines",
        "53": "reminder_update",
        "54": "food_last",
        "55": "change_ai_name",
        "56": "bill_due",
        "57": "who_do_you_work_for",
        "58": "share_location",
        "59": "international_visa",
        "60": "calendar",
        "61": "translate",
        "62": "carry_on",
        "63": "book_flight",
        "64": "insurance_change",
        "65": "todo_list_update",
        "66": "timezone",
        "67": "cancel_reservation",
        "68": "transactions",
        "69": "credit_score",
        "70": "report_fraud",
        "71": "spending_history",
        "72": "directions",
        "73": "spelling",
        "74": "insurance",
        "75": "what_is_your_name",
        "76": "reminder",
        "77": "where_are_you_from",
        "78": "distance",
        "79": "payday",
        "80": "flight_status",
        "81": "find_phone",
        "82": "greeting",
        "83": "alarm",
        "84": "order_status",
        "85": "confirm_reservation",
        "86": "cook_time",
        "87": "damaged_card",
        "88": "reset_settings",
        "89": "pin_change",
        "90": "replacement_card_duration",
        "91": "new_card",
        "92": "roll_dice",
        "93": "income",
        "94": "taxes",
        "95": "date",
        "96": "who_made_you",
        "97": "pto_request",
        "98": "tire_pressure",
        "99": "how_old_are_you",
        "100": "rollover_401k",
        "101": "pto_request_status",
        "102": "how_busy",
        "103": "application_status",
        "104": "recipe",
        "105": "calendar_update",
        "106": "play_music",
        "107": "yes",
        "108": "direct_deposit",
        "109": "credit_limit_change",
        "110": "gas",
        "111": "pay_bill",
        "112": "ingredients_list",
        "113": "lost_luggage",
        "114": "goodbye",
        "115": "what_can_i_ask_you",
        "116": "book_hotel",
        "117": "are_you_a_bot",
        "118": "next_song",
        "119": "change_speed",
        "120": "plug_type",
        "121": "maybe",
        "122": "w2",
        "123": "oil_change_when",
        "124": "thank_you",
        "125": "shopping_list_update",
        "126": "pto_balance",
        "127": "order_checks",
        "128": "travel_alert",
        "129": "fun_fact",
        "130": "sync_device",
        "131": "schedule_maintenance",
        "132": "apr",
        "133": "transfer",
        "134": "ingredient_substitution",
        "135": "calories",
        "136": "current_location",
        "137": "international_fees",
        "138": "calculator",
        "139": "definition",
        "140": "next_holiday",
        "141": "update_playlist",
        "142": "mpg",
        "143": "min_payment",
        "144": "change_user_name",
        "145": "restaurant_suggestion",
        "146": "travel_notification",
        "147": "cancel",
        "148": "pto_used",
        "149": "travel_suggestion",
        "150": "change_volume",
    }
    num_classes = 151

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Awtstress_Stress_Classifier(PetrainedTextClassifier):
    name = "AWTStress/stress_classifier"
    id2label = {
        "0": "Other",
        "1": "Emotional Turmoil",
        "2": "Everyday Decision Making",
        "3": "Work",
        "4": "Social Relationships",
        "5": "Health, Fatigue, or Physical Pain",
        "6": "Family Issues",
        "7": "School",
        "8": "Financial Problem",
    }
    num_classes = 9

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Awtstress_Stress_Score(PetrainedTextClassifier):
    name = "AWTStress/stress_score"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Abirate_Bert_Fine_Tuned_Cola(PetrainedTextClassifier):
    name = "Abirate/bert_fine_tuned_cola"
    id2label = {"0": "unacceptable", "1": "acceptable"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Abirate_Code_Net_Similarity_Model_Sub23_Fbert(PetrainedTextClassifier):
    name = "Abirate/code_net_similarity_model_sub23_fbert"
    id2label = {"0": "not_similar", "1": "similar"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Activationai_DistilbertBaseUncasedFinetunedEmotion(PetrainedTextClassifier):
    name = "ActivationAI/distilbert-base-uncased-finetuned-emotion"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Adi2K_PrivConsent(PetrainedTextClassifier):
    name = "Adi2K/Priv-Consent"
    id2label = {"0": "CON", "1": "NOT"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ahmed59_DemoTeamSiad(PetrainedTextClassifier):
    name = "Ahmed59/Demo-Team-5-SIAD"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ahmedbou_Tunibert(PetrainedTextClassifier):
    name = "AhmedBou/TuniBert"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ahren09_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "Ahren09/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Aimendo_AutonlpTriage(PetrainedTextClassifier):
    name = "Aimendo/autonlp-triage-35248482"
    id2label = {
        "0": "acknowledgement",
        "1": "ads",
        "2": "approval",
        "3": "away",
        "4": "cancellation",
        "5": "doc_request",
        "6": "inquirey",
        "7": "modification",
        "8": "new_booking",
        "9": "refund",
    }
    num_classes = 10

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ajay191191_AutonlpTest(PetrainedTextClassifier):
    name = "Ajay191191/autonlp-Test-530014983"
    id2label = {"0": "0", "1": "1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Akash7897_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "Akash7897/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Akash7897_DistilbertBaseUncasedFinetunedSst2(PetrainedTextClassifier):
    name = "Akash7897/distilbert-base-uncased-finetuned-sst2"
    id2label = {"0": "NEGATIVE", "1": "POSITIVE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Akshatsurolia_IcdCodePrediction(PetrainedTextClassifier):
    name = "AkshatSurolia/ICD-10-Code-Prediction"
    id2label = {
        "0": "A00.0",
        "1": "A00.1",
        "2": "A00.9",
        "3": "A01.01",
        "4": "A01.03",
        "5": "A01.04",
        "6": "A01.05",
        "7": "A01.09",
        "8": "A01.1",
        "9": "A01.2",
        "10": "A01.3",
        "11": "A02.0",
        "12": "A02.1",
        "13": "A02.21",
        "14": "A02.22",
        "15": "A02.23",
        "16": "A02.24",
        "17": "A02.25",
        "18": "A02.29",
        "19": "A02.8",
        "20": "A02.9",
        "21": "A03.0",
        "22": "A03.2",
        "23": "A03.9",
        "24": "A04.0",
        "25": "A04.1",
        "26": "A04.2",
        "27": "A04.3",
        "28": "A04.4",
        "29": "A04.6",
        "30": "A04.8",
        "31": "A05.0",
        "32": "A05.3",
        "33": "A05.4",
        "34": "A05.5",
        "35": "A05.9",
        "36": "A06.0",
        "37": "A06.1",
        "38": "A06.3",
        "39": "A06.4",
        "40": "A06.5",
        "41": "A06.81",
        "42": "A06.9",
        "43": "A07.0",
        "44": "A07.1",
        "45": "A07.2",
        "46": "A07.3",
        "47": "A07.4",
        "48": "A07.8",
        "49": "A07.9",
        "50": "A08.0",
        "51": "A08.11",
        "52": "A08.32",
        "53": "A08.39",
        "54": "A08.4",
        "55": "A08.8",
        "56": "A15.0",
        "57": "A15.4",
        "58": "A15.5",
        "59": "A15.6",
        "60": "A15.8",
        "61": "A15.9",
        "62": "A17.1",
        "63": "A17.81",
        "64": "A17.82",
        "65": "A17.83",
        "66": "A18.01",
        "67": "A18.02",
        "68": "A18.03",
        "69": "A18.09",
        "70": "A18.10",
        "71": "A18.12",
        "72": "A18.13",
        "73": "A18.15",
        "74": "A18.16",
        "75": "A18.18",
        "76": "A18.2",
        "77": "A18.31",
        "78": "A18.32",
        "79": "A18.39",
        "80": "A18.4",
        "81": "A18.50",
        "82": "A18.53",
        "83": "A18.59",
        "84": "A18.7",
        "85": "A18.81",
        "86": "A18.82",
        "87": "A18.83",
        "88": "A18.84",
        "89": "A18.85",
        "90": "A18.89",
        "91": "A19.0",
        "92": "A19.1",
        "93": "A19.8",
        "94": "A19.9",
        "95": "A20.2",
        "96": "A20.3",
        "97": "A20.7",
        "98": "A20.8",
        "99": "A21.0",
        "100": "A21.1",
        "101": "A21.2",
        "102": "A21.7",
        "103": "A21.8",
        "104": "A21.9",
        "105": "A22.0",
        "106": "A22.1",
        "107": "A22.9",
        "108": "A23.0",
        "109": "A23.1",
        "110": "A23.2",
        "111": "A23.3",
        "112": "A23.8",
        "113": "A23.9",
        "114": "A24.0",
        "115": "A24.1",
        "116": "A24.2",
        "117": "A24.3",
        "118": "A24.9",
        "119": "A25.1",
        "120": "A25.9",
        "121": "A26.7",
        "122": "A26.9",
        "123": "A27.0",
        "124": "A27.81",
        "125": "A27.9",
        "126": "A28.0",
        "127": "A28.1",
        "128": "A28.2",
        "129": "A28.8",
        "130": "A28.9",
        "131": "A30.0",
        "132": "A30.1",
        "133": "A30.3",
        "134": "A30.4",
        "135": "A30.5",
        "136": "A30.9",
        "137": "A31.1",
        "138": "A31.8",
        "139": "A31.9",
        "140": "A32.11",
        "141": "A32.12",
        "142": "A32.7",
        "143": "A32.82",
        "144": "A32.89",
        "145": "A36.82",
        "146": "A36.83",
        "147": "A36.85",
        "148": "A36.86",
        "149": "A36.89",
        "150": "A36.9",
        "151": "A37.00",
        "152": "A37.80",
        "153": "A37.90",
        "154": "A37.91",
        "155": "A38.0",
        "156": "A38.1",
        "157": "A38.8",
        "158": "A39.1",
        "159": "A39.4",
        "160": "A39.50",
        "161": "A39.53",
        "162": "A39.81",
        "163": "A39.82",
        "164": "A39.89",
        "165": "A39.9",
        "166": "A40.0",
        "167": "A40.1",
        "168": "A40.3",
        "169": "A40.9",
        "170": "A41.01",
        "171": "A41.02",
        "172": "A41.1",
        "173": "A41.2",
        "174": "A41.3",
        "175": "A41.4",
        "176": "A41.50",
        "177": "A41.51",
        "178": "A41.53",
        "179": "A41.59",
        "180": "A41.81",
        "181": "A41.9",
        "182": "A42.1",
        "183": "A42.2",
        "184": "A42.81",
        "185": "A42.82",
        "186": "A42.89",
        "187": "A43.0",
        "188": "A43.8",
        "189": "A43.9",
        "190": "A44.0",
        "191": "A48.0",
        "192": "A48.1",
        "193": "A48.2",
        "194": "A48.3",
        "195": "A48.52",
        "196": "A48.8",
        "197": "A49.02",
        "198": "A49.1",
        "199": "A49.3",
        "200": "A49.8",
        "201": "A49.9",
        "202": "A50.01",
        "203": "A50.03",
        "204": "A50.04",
        "205": "A50.05",
        "206": "A50.06",
        "207": "A50.07",
        "208": "A50.08",
        "209": "A50.09",
        "210": "A50.1",
        "211": "A50.2",
        "212": "A50.31",
        "213": "A50.32",
        "214": "A50.39",
        "215": "A50.40",
        "216": "A50.41",
        "217": "A50.42",
        "218": "A50.43",
        "219": "A50.44",
        "220": "A50.49",
        "221": "A50.52",
        "222": "A50.54",
        "223": "A50.56",
        "224": "A50.57",
        "225": "A50.7",
        "226": "A50.9",
        "227": "A51.0",
        "228": "A51.1",
        "229": "A51.2",
        "230": "A51.3",
        "231": "A51.31",
        "232": "A51.42",
        "233": "A51.43",
        "234": "A51.45",
        "235": "A51.49",
        "236": "A51.5",
        "237": "A51.9",
        "238": "A52.02",
        "239": "A52.04",
        "240": "A52.06",
        "241": "A52.09",
        "242": "A52.1",
        "243": "A52.13",
        "244": "A52.15",
        "245": "A52.16",
        "246": "A52.17",
        "247": "A52.3",
        "248": "A52.71",
        "249": "A52.72",
        "250": "A52.74",
        "251": "A52.75",
        "252": "A52.8",
        "253": "A53.0",
        "254": "A53.9",
        "255": "A54.00",
        "256": "A54.02",
        "257": "A54.03",
        "258": "A54.09",
        "259": "A54.1",
        "260": "A54.21",
        "261": "A54.30",
        "262": "A54.31",
        "263": "A54.42",
        "264": "A54.49",
        "265": "A54.5",
        "266": "A54.6",
        "267": "A54.82",
        "268": "A54.83",
        "269": "A54.84",
        "270": "A54.85",
        "271": "A54.86",
        "272": "A54.89",
        "273": "A54.9",
        "274": "A56.00",
        "275": "A56.01",
        "276": "A56.02",
        "277": "A56.09",
        "278": "A56.2",
        "279": "A56.3",
        "280": "A56.4",
        "281": "A56.8",
        "282": "A59.0",
        "283": "A59.00",
        "284": "A59.01",
        "285": "A59.03",
        "286": "A59.09",
        "287": "A59.9",
        "288": "A60.00",
        "289": "A60.01",
        "290": "A60.02",
        "291": "A60.09",
        "292": "A60.1",
        "293": "A60.9",
        "294": "A63.0",
        "295": "A63.8",
        "296": "A66.0",
        "297": "A66.1",
        "298": "A66.4",
        "299": "A66.5",
        "300": "A66.7",
        "301": "A67.3",
        "302": "A67.9",
        "303": "A68.1",
        "304": "A69.0",
        "305": "A69.1",
        "306": "A69.20",
        "307": "A69.21",
        "308": "A69.23",
        "309": "A69.8",
        "310": "A69.9",
        "311": "A74.81",
        "312": "A74.9",
        "313": "A75.3",
        "314": "A77.0",
        "315": "A77.1",
        "316": "A77.2",
        "317": "A77.3",
        "318": "A77.40",
        "319": "A77.8",
        "320": "A79.1",
        "321": "A79.81",
        "322": "A80.0",
        "323": "A80.2",
        "324": "A80.30",
        "325": "A80.39",
        "326": "A80.4",
        "327": "A81.00",
        "328": "A81.01",
        "329": "A81.1",
        "330": "A81.2",
        "331": "A81.81",
        "332": "A81.82",
        "333": "A81.83",
        "334": "A81.89",
        "335": "A82.0",
        "336": "A82.1",
        "337": "A82.9",
        "338": "A83.1",
        "339": "A83.2",
        "340": "A83.4",
        "341": "A83.5",
        "342": "A83.8",
        "343": "A83.9",
        "344": "A84.1",
        "345": "A84.8",
        "346": "A85.1",
        "347": "A85.2",
        "348": "A85.8",
        "349": "A87.1",
        "350": "A87.8",
        "351": "A88.1",
        "352": "A92.0",
        "353": "A92.1",
        "354": "A92.32",
        "355": "A92.39",
        "356": "A92.4",
        "357": "A92.9",
        "358": "A93.0",
        "359": "A93.1",
        "360": "A93.2",
        "361": "A93.8",
        "362": "A95.1",
        "363": "A95.9",
        "364": "A96.0",
        "365": "A96.1",
        "366": "A96.2",
        "367": "A96.9",
        "368": "A98.2",
        "369": "A98.3",
        "370": "A98.5",
        "371": "B00.0",
        "372": "B00.1",
        "373": "B00.3",
        "374": "B00.4",
        "375": "B00.5",
        "376": "B00.50",
        "377": "B00.51",
        "378": "B00.52",
        "379": "B00.53",
        "380": "B00.7",
        "381": "B00.89",
        "382": "B00.9",
        "383": "B01.12",
        "384": "B01.4",
        "385": "B01.89",
        "386": "B01.9",
        "387": "B02.0",
        "388": "B02.1",
        "389": "B02.2",
        "390": "B02.21",
        "391": "B02.22",
        "392": "B02.23",
        "393": "B02.24",
        "394": "B02.29",
        "395": "B02.31",
        "396": "B02.32",
        "397": "B02.39",
        "398": "B02.7",
        "399": "B02.9",
        "400": "B05.0",
        "401": "B05.1",
        "402": "B05.2",
        "403": "B05.3",
        "404": "B05.4",
        "405": "B05.81",
        "406": "B05.9",
        "407": "B06.00",
        "408": "B06.01",
        "409": "B06.02",
        "410": "B06.09",
        "411": "B06.81",
        "412": "B06.89",
        "413": "B06.9",
        "414": "B07.0",
        "415": "B07.9",
        "416": "B08.02",
        "417": "B08.03",
        "418": "B08.20",
        "419": "B08.4",
        "420": "B08.5",
        "421": "B08.60",
        "422": "B08.61",
        "423": "B08.62",
        "424": "B08.70",
        "425": "B08.79",
        "426": "B10.82",
        "427": "B15.0",
        "428": "B15.9",
        "429": "B16.0",
        "430": "B16.1",
        "431": "B16.2",
        "432": "B16.9",
        "433": "B17.0",
        "434": "B17.11",
        "435": "B17.2",
        "436": "B17.9",
        "437": "B18.0",
        "438": "B18.2",
        "439": "B18.8",
        "440": "B18.9",
        "441": "B19.0",
        "442": "B19.20",
        "443": "B19.21",
        "444": "B25.0",
        "445": "B25.1",
        "446": "B25.2",
        "447": "B25.8",
        "448": "B25.9",
        "449": "B26.0",
        "450": "B26.1",
        "451": "B26.82",
        "452": "B26.84",
        "453": "B26.89",
        "454": "B26.9",
        "455": "B27.00",
        "456": "B27.09",
        "457": "B27.10",
        "458": "B27.11",
        "459": "B27.12",
        "460": "B27.82",
        "461": "B27.89",
        "462": "B27.90",
        "463": "B27.92",
        "464": "B27.99",
        "465": "B30.0",
        "466": "B30.1",
        "467": "B30.2",
        "468": "B30.3",
        "469": "B30.8",
        "470": "B30.9",
        "471": "B33.0",
        "472": "B33.1",
        "473": "B33.22",
        "474": "B33.23",
        "475": "B33.8",
        "476": "B34.0",
        "477": "B34.1",
        "478": "B34.2",
        "479": "B34.3",
        "480": "B34.8",
        "481": "B34.9",
        "482": "B35.0",
        "483": "B35.2",
        "484": "B35.3",
        "485": "B35.4",
        "486": "B35.6",
        "487": "B35.8",
        "488": "B35.9",
        "489": "B36.0",
        "490": "B36.1",
        "491": "B36.2",
        "492": "B36.9",
        "493": "B37.0",
        "494": "B37.1",
        "495": "B37.2",
        "496": "B37.3",
        "497": "B37.4",
        "498": "B37.41",
        "499": "B37.42",
        "500": "B37.49",
        "501": "B37.5",
        "502": "B37.7",
        "503": "B37.81",
        "504": "B37.82",
        "505": "B37.83",
        "506": "B37.84",
        "507": "B37.89",
        "508": "B37.9",
        "509": "B38.0",
        "510": "B38.1",
        "511": "B38.3",
        "512": "B38.4",
        "513": "B38.81",
        "514": "B38.89",
        "515": "B38.9",
        "516": "B39.0",
        "517": "B39.4",
        "518": "B39.9",
        "519": "B40.0",
        "520": "B40.2",
        "521": "B40.7",
        "522": "B40.89",
        "523": "B41.7",
        "524": "B41.8",
        "525": "B41.9",
        "526": "B42.0",
        "527": "B42.82",
        "528": "B42.89",
        "529": "B42.9",
        "530": "B43.1",
        "531": "B43.9",
        "532": "B44.0",
        "533": "B44.1",
        "534": "B44.7",
        "535": "B45.1",
        "536": "B45.2",
        "537": "B45.3",
        "538": "B45.7",
        "539": "B45.8",
        "540": "B45.9",
        "541": "B46.0",
        "542": "B46.1",
        "543": "B46.2",
        "544": "B46.3",
        "545": "B46.8",
        "546": "B47.1",
        "547": "B47.9",
        "548": "B48.0",
        "549": "B48.2",
        "550": "B48.3",
        "551": "B48.4",
        "552": "B50.0",
        "553": "B50.8",
        "554": "B50.9",
        "555": "B51.0",
        "556": "B51.8",
        "557": "B51.9",
        "558": "B52.0",
        "559": "B53.1",
        "560": "B53.8",
        "561": "B55.0",
        "562": "B55.1",
        "563": "B55.2",
        "564": "B56.1",
        "565": "B57.0",
        "566": "B57.1",
        "567": "B57.2",
        "568": "B57.30",
        "569": "B57.32",
        "570": "B57.39",
        "571": "B57.41",
        "572": "B57.42",
        "573": "B57.5",
        "574": "B58.00",
        "575": "B58.01",
        "576": "B58.09",
        "577": "B58.1",
        "578": "B58.81",
        "579": "B58.83",
        "580": "B58.89",
        "581": "B58.9",
        "582": "B60.0",
        "583": "B60.10",
        "584": "B60.12",
        "585": "B60.13",
        "586": "B60.19",
        "587": "B60.2",
        "588": "B65.0",
        "589": "B65.1",
        "590": "B65.2",
        "591": "B65.8",
        "592": "B66.3",
        "593": "B66.8",
        "594": "B66.9",
        "595": "B67.0",
        "596": "B67.1",
        "597": "B67.2",
        "598": "B67.31",
        "599": "B67.4",
        "600": "B67.61",
        "601": "B67.69",
        "602": "B67.7",
        "603": "B67.8",
        "604": "B67.90",
        "605": "B68.0",
        "606": "B68.1",
        "607": "B69.0",
        "608": "B69.1",
        "609": "B69.89",
        "610": "B70.0",
        "611": "B70.1",
        "612": "B71.0",
        "613": "B71.8",
        "614": "B71.9",
        "615": "B73.00",
        "616": "B73.02",
        "617": "B73.09",
        "618": "B73.1",
        "619": "B74.0",
        "620": "B74.3",
        "621": "B74.8",
        "622": "B74.9",
        "623": "B76.0",
        "624": "B76.1",
        "625": "B76.8",
        "626": "B76.9",
        "627": "B77.0",
        "628": "B78.7",
        "629": "B78.9",
        "630": "B81.0",
        "631": "B81.3",
        "632": "B81.4",
        "633": "B81.8",
        "634": "B82.0",
        "635": "B83.1",
        "636": "B83.4",
        "637": "B83.8",
        "638": "B83.9",
        "639": "B85.0",
        "640": "B85.1",
        "641": "B85.4",
        "642": "B87.1",
        "643": "B87.2",
        "644": "B87.3",
        "645": "B87.89",
        "646": "B87.9",
        "647": "B88.0",
        "648": "B88.1",
        "649": "B88.9",
        "650": "B90.0",
        "651": "B90.9",
        "652": "B94.0",
        "653": "B94.8",
        "654": "B95.0",
        "655": "B95.1",
        "656": "B95.2",
        "657": "B95.4",
        "658": "B95.61",
        "659": "B95.62",
        "660": "B95.7",
        "661": "B95.8",
        "662": "B96.0",
        "663": "B96.20",
        "664": "B96.22",
        "665": "B96.23",
        "666": "B96.29",
        "667": "B96.3",
        "668": "B96.4",
        "669": "B96.5",
        "670": "B96.7",
        "671": "B96.8",
        "672": "B96.81",
        "673": "B96.89",
        "674": "B97.0",
        "675": "B97.12",
        "676": "B97.21",
        "677": "B97.29",
        "678": "B97.30",
        "679": "B97.31",
        "680": "B97.33",
        "681": "B97.34",
        "682": "B97.35",
        "683": "B97.39",
        "684": "B97.5",
        "685": "B97.6",
        "686": "B97.7",
        "687": "B99.8",
        "688": "B99.9",
        "689": "C00.1",
        "690": "C00.2",
        "691": "C00.4",
        "692": "C00.5",
        "693": "C00.6",
        "694": "C00.9",
        "695": "C02.1",
        "696": "C03.0",
        "697": "C03.1",
        "698": "C05.8",
        "699": "C06.0",
        "700": "C06.1",
        "701": "C06.2",
        "702": "C06.80",
        "703": "C06.89",
        "704": "C06.9",
        "705": "C08.0",
        "706": "C08.1",
        "707": "C09.8",
        "708": "C09.9",
        "709": "C10.0",
        "710": "C10.1",
        "711": "C10.3",
        "712": "C10.4",
        "713": "C10.8",
        "714": "C10.9",
        "715": "C11.0",
        "716": "C11.1",
        "717": "C11.8",
        "718": "C13.0",
        "719": "C13.1",
        "720": "C13.9",
        "721": "C14.0",
        "722": "C14.2",
        "723": "C14.8",
        "724": "C15.4",
        "725": "C15.5",
        "726": "C16.0",
        "727": "C16.1",
        "728": "C16.5",
        "729": "C16.6",
        "730": "C16.8",
        "731": "C16.9",
        "732": "C17.1",
        "733": "C17.2",
        "734": "C17.3",
        "735": "C17.8",
        "736": "C17.9",
        "737": "C18.0",
        "738": "C18.1",
        "739": "C18.2",
        "740": "C18.4",
        "741": "C18.5",
        "742": "C18.8",
        "743": "C18.9",
        "744": "C21.0",
        "745": "C21.1",
        "746": "C21.2",
        "747": "C21.8",
        "748": "C22.0",
        "749": "C22.2",
        "750": "C22.7",
        "751": "C22.9",
        "752": "C24.0",
        "753": "C24.1",
        "754": "C24.8",
        "755": "C24.9",
        "756": "C25.0",
        "757": "C25.2",
        "758": "C25.3",
        "759": "C25.4",
        "760": "C25.7",
        "761": "C25.8",
        "762": "C26.0",
        "763": "C26.1",
        "764": "C26.9",
        "765": "C30.0",
        "766": "C31.1",
        "767": "C31.2",
        "768": "C31.3",
        "769": "C31.8",
        "770": "C31.9",
        "771": "C32.0",
        "772": "C32.1",
        "773": "C32.2",
        "774": "C32.8",
        "775": "C32.9",
        "776": "C34.10",
        "777": "C34.11",
        "778": "C34.12",
        "779": "C34.30",
        "780": "C34.32",
        "781": "C34.9",
        "782": "C34.90",
        "783": "C34.91",
        "784": "C39.0",
        "785": "C40.01",
        "786": "C40.12",
        "787": "C40.20",
        "788": "C40.21",
        "789": "C40.22",
        "790": "C40.31",
        "791": "C40.80",
        "792": "C40.82",
        "793": "C40.92",
        "794": "C41.2",
        "795": "C41.3",
        "796": "C41.4",
        "797": "C41.9",
        "798": "C43.0",
        "799": "C43.11",
        "800": "C43.12",
        "801": "C43.20",
        "802": "C43.21",
        "803": "C43.22",
        "804": "C43.31",
        "805": "C43.39",
        "806": "C43.52",
        "807": "C43.59",
        "808": "C43.60",
        "809": "C43.61",
        "810": "C43.62",
        "811": "C43.71",
        "812": "C43.8",
        "813": "C43.9",
        "814": "C44.01",
        "815": "C44.02",
        "816": "C44.10",
        "817": "C44.11",
        "818": "C44.12",
        "819": "C44.19",
        "820": "C44.20",
        "821": "C44.21",
        "822": "C44.22",
        "823": "C44.29",
        "824": "C44.30",
        "825": "C44.31",
        "826": "C44.32",
        "827": "C44.39",
        "828": "C44.40",
        "829": "C44.41",
        "830": "C44.42",
        "831": "C44.49",
        "832": "C44.50",
        "833": "C44.51",
        "834": "C44.52",
        "835": "C44.60",
        "836": "C44.61",
        "837": "C44.62",
        "838": "C44.70",
        "839": "C44.71",
        "840": "C44.72",
        "841": "C44.79",
        "842": "C44.80",
        "843": "C44.81",
        "844": "C44.89",
        "845": "C44.90",
        "846": "C44.92",
        "847": "C44.99",
        "848": "C45.0",
        "849": "C45.1",
        "850": "C45.7",
        "851": "C45.9",
        "852": "C46.0",
        "853": "C46.1",
        "854": "C46.2",
        "855": "C46.3",
        "856": "C46.4",
        "857": "C46.52",
        "858": "C46.7",
        "859": "C46.9",
        "860": "C47.10",
        "861": "C47.21",
        "862": "C47.5",
        "863": "C47.6",
        "864": "C47.8",
        "865": "C47.9",
        "866": "C48.0",
        "867": "C48.1",
        "868": "C48.8",
        "869": "C49.0",
        "870": "C49.10",
        "871": "C49.11",
        "872": "C49.3",
        "873": "C49.4",
        "874": "C49.6",
        "875": "C49.8",
        "876": "C49.9",
        "877": "C4A.0",
        "878": "C4A.10",
        "879": "C4A.11",
        "880": "C4A.12",
        "881": "C4A.20",
        "882": "C4A.22",
        "883": "C4A.30",
        "884": "C4A.31",
        "885": "C4A.39",
        "886": "C4A.4",
        "887": "C4A.51",
        "888": "C4A.52",
        "889": "C4A.60",
        "890": "C4A.71",
        "891": "C4A.72",
        "892": "C4A.8",
        "893": "C50.01",
        "894": "C50.02",
        "895": "C50.11",
        "896": "C50.12",
        "897": "C50.21",
        "898": "C50.22",
        "899": "C50.31",
        "900": "C50.32",
        "901": "C50.41",
        "902": "C50.42",
        "903": "C50.51",
        "904": "C50.52",
        "905": "C50.61",
        "906": "C50.62",
        "907": "C50.81",
        "908": "C50.82",
        "909": "C50.91",
        "910": "C50.92",
        "911": "C51.2",
        "912": "C51.8",
        "913": "C53.1",
        "914": "C53.8",
        "915": "C54.0",
        "916": "C54.2",
        "917": "C54.8",
        "918": "C56.1",
        "919": "C56.9",
        "920": "C57.00",
        "921": "C57.01",
        "922": "C57.02",
        "923": "C57.10",
        "924": "C57.11",
        "925": "C57.12",
        "926": "C57.21",
        "927": "C57.3",
        "928": "C57.7",
        "929": "C57.9",
        "930": "C60.1",
        "931": "C60.2",
        "932": "C60.8",
        "933": "C60.9",
        "934": "C62.00",
        "935": "C62.01",
        "936": "C62.02",
        "937": "C62.10",
        "938": "C62.11",
        "939": "C63.00",
        "940": "C63.02",
        "941": "C63.10",
        "942": "C63.12",
        "943": "C63.8",
        "944": "C63.9",
        "945": "C64.1",
        "946": "C64.2",
        "947": "C65.1",
        "948": "C65.2",
        "949": "C65.9",
        "950": "C66.1",
        "951": "C66.2",
        "952": "C66.9",
        "953": "C67.0",
        "954": "C67.1",
        "955": "C67.2",
        "956": "C67.3",
        "957": "C67.4",
        "958": "C67.5",
        "959": "C67.6",
        "960": "C67.7",
        "961": "C67.8",
        "962": "C68.0",
        "963": "C68.1",
        "964": "C68.8",
        "965": "C68.9",
        "966": "C69.02",
        "967": "C69.10",
        "968": "C69.11",
        "969": "C69.22",
        "970": "C69.30",
        "971": "C69.40",
        "972": "C69.41",
        "973": "C69.42",
        "974": "C69.50",
        "975": "C69.51",
        "976": "C69.61",
        "977": "C69.62",
        "978": "C69.80",
        "979": "C69.82",
        "980": "C69.92",
        "981": "C70.0",
        "982": "C70.1",
        "983": "C70.9",
        "984": "C71.1",
        "985": "C71.2",
        "986": "C71.3",
        "987": "C71.4",
        "988": "C71.5",
        "989": "C71.8",
        "990": "C71.9",
        "991": "C72.20",
        "992": "C72.21",
        "993": "C72.22",
        "994": "C72.31",
        "995": "C72.32",
        "996": "C72.40",
        "997": "C72.41",
        "998": "C72.42",
        "999": "C72.50",
        "1000": "C72.9",
        "1001": "C74.01",
        "1002": "C74.02",
        "1003": "C74.10",
        "1004": "C74.12",
        "1005": "C74.90",
        "1006": "C74.91",
        "1007": "C75.0",
        "1008": "C75.2",
        "1009": "C75.4",
        "1010": "C75.5",
        "1011": "C75.8",
        "1012": "C75.9",
        "1013": "C76.2",
        "1014": "C76.3",
        "1015": "C76.40",
        "1016": "C76.42",
        "1017": "C76.50",
        "1018": "C76.51",
        "1019": "C76.8",
        "1020": "C77.0",
        "1021": "C77.1",
        "1022": "C77.2",
        "1023": "C77.3",
        "1024": "C77.8",
        "1025": "C77.9",
        "1026": "C78.02",
        "1027": "C78.1",
        "1028": "C78.2",
        "1029": "C78.30",
        "1030": "C78.4",
        "1031": "C78.6",
        "1032": "C78.80",
        "1033": "C78.89",
        "1034": "C79.02",
        "1035": "C79.19",
        "1036": "C79.31",
        "1037": "C79.49",
        "1038": "C79.51",
        "1039": "C79.52",
        "1040": "C79.60",
        "1041": "C79.61",
        "1042": "C79.62",
        "1043": "C79.70",
        "1044": "C79.72",
        "1045": "C79.81",
        "1046": "C79.82",
        "1047": "C79.89",
        "1048": "C79.9",
        "1049": "C7A.01",
        "1050": "C7A.02",
        "1051": "C7A.09",
        "1052": "C7A.1",
        "1053": "C7A.8",
        "1054": "C7B.00",
        "1055": "C7B.02",
        "1056": "C7B.03",
        "1057": "C7B.04",
        "1058": "C7B.09",
        "1059": "C7B.1",
        "1060": "C7B.8",
        "1061": "C80.0",
        "1062": "C80.1",
        "1063": "C81.00",
        "1064": "C81.01",
        "1065": "C81.02",
        "1066": "C81.04",
        "1067": "C81.05",
        "1068": "C81.07",
        "1069": "C81.10",
        "1070": "C81.11",
        "1071": "C81.12",
        "1072": "C81.14",
        "1073": "C81.15",
        "1074": "C81.16",
        "1075": "C81.18",
        "1076": "C81.19",
        "1077": "C81.21",
        "1078": "C81.22",
        "1079": "C81.23",
        "1080": "C81.26",
        "1081": "C81.27",
        "1082": "C81.28",
        "1083": "C81.29",
        "1084": "C81.31",
        "1085": "C81.32",
        "1086": "C81.33",
        "1087": "C81.34",
        "1088": "C81.35",
        "1089": "C81.36",
        "1090": "C81.37",
        "1091": "C81.39",
        "1092": "C81.40",
        "1093": "C81.41",
        "1094": "C81.42",
        "1095": "C81.43",
        "1096": "C81.44",
        "1097": "C81.45",
        "1098": "C81.46",
        "1099": "C81.47",
        "1100": "C81.48",
        "1101": "C81.49",
        "1102": "C81.70",
        "1103": "C81.71",
        "1104": "C81.72",
        "1105": "C81.73",
        "1106": "C81.74",
        "1107": "C81.75",
        "1108": "C81.76",
        "1109": "C81.77",
        "1110": "C81.78",
        "1111": "C81.90",
        "1112": "C81.91",
        "1113": "C81.95",
        "1114": "C81.96",
        "1115": "C81.97",
        "1116": "C81.98",
        "1117": "C82.00",
        "1118": "C82.01",
        "1119": "C82.02",
        "1120": "C82.03",
        "1121": "C82.04",
        "1122": "C82.07",
        "1123": "C82.08",
        "1124": "C82.10",
        "1125": "C82.11",
        "1126": "C82.12",
        "1127": "C82.13",
        "1128": "C82.14",
        "1129": "C82.15",
        "1130": "C82.16",
        "1131": "C82.17",
        "1132": "C82.18",
        "1133": "C82.20",
        "1134": "C82.23",
        "1135": "C82.24",
        "1136": "C82.25",
        "1137": "C82.27",
        "1138": "C82.31",
        "1139": "C82.32",
        "1140": "C82.33",
        "1141": "C82.34",
        "1142": "C82.35",
        "1143": "C82.36",
        "1144": "C82.38",
        "1145": "C82.39",
        "1146": "C82.40",
        "1147": "C82.41",
        "1148": "C82.43",
        "1149": "C82.46",
        "1150": "C82.47",
        "1151": "C82.48",
        "1152": "C82.51",
        "1153": "C82.52",
        "1154": "C82.54",
        "1155": "C82.55",
        "1156": "C82.57",
        "1157": "C82.58",
        "1158": "C82.60",
        "1159": "C82.61",
        "1160": "C82.64",
        "1161": "C82.65",
        "1162": "C82.66",
        "1163": "C82.67",
        "1164": "C82.81",
        "1165": "C82.82",
        "1166": "C82.84",
        "1167": "C82.87",
        "1168": "C82.88",
        "1169": "C82.89",
        "1170": "C82.90",
        "1171": "C82.91",
        "1172": "C82.93",
        "1173": "C82.94",
        "1174": "C82.95",
        "1175": "C82.96",
        "1176": "C82.99",
        "1177": "C83.00",
        "1178": "C83.02",
        "1179": "C83.03",
        "1180": "C83.05",
        "1181": "C83.06",
        "1182": "C83.08",
        "1183": "C83.09",
        "1184": "C83.11",
        "1185": "C83.12",
        "1186": "C83.13",
        "1187": "C83.18",
        "1188": "C83.19",
        "1189": "C83.30",
        "1190": "C83.31",
        "1191": "C83.32",
        "1192": "C83.33",
        "1193": "C83.35",
        "1194": "C83.36",
        "1195": "C83.38",
        "1196": "C83.39",
        "1197": "C83.51",
        "1198": "C83.55",
        "1199": "C83.56",
        "1200": "C83.57",
        "1201": "C83.59",
        "1202": "C83.70",
        "1203": "C83.71",
        "1204": "C83.73",
        "1205": "C83.74",
        "1206": "C83.75",
        "1207": "C83.76",
        "1208": "C83.79",
        "1209": "C83.81",
        "1210": "C83.82",
        "1211": "C83.83",
        "1212": "C83.84",
        "1213": "C83.85",
        "1214": "C83.87",
        "1215": "C83.91",
        "1216": "C83.93",
        "1217": "C83.94",
        "1218": "C84.00",
        "1219": "C84.01",
        "1220": "C84.02",
        "1221": "C84.04",
        "1222": "C84.06",
        "1223": "C84.07",
        "1224": "C84.08",
        "1225": "C84.09",
        "1226": "C84.10",
        "1227": "C84.11",
        "1228": "C84.12",
        "1229": "C84.13",
        "1230": "C84.15",
        "1231": "C84.16",
        "1232": "C84.17",
        "1233": "C84.18",
        "1234": "C84.42",
        "1235": "C84.43",
        "1236": "C84.44",
        "1237": "C84.47",
        "1238": "C84.48",
        "1239": "C84.60",
        "1240": "C84.62",
        "1241": "C84.63",
        "1242": "C84.64",
        "1243": "C84.65",
        "1244": "C84.67",
        "1245": "C84.68",
        "1246": "C84.70",
        "1247": "C84.71",
        "1248": "C84.74",
        "1249": "C84.75",
        "1250": "C84.76",
        "1251": "C84.77",
        "1252": "C84.78",
        "1253": "C84.79",
        "1254": "C84.90",
        "1255": "C84.91",
        "1256": "C84.92",
        "1257": "C84.93",
        "1258": "C84.95",
        "1259": "C84.96",
        "1260": "C84.97",
        "1261": "C84.99",
        "1262": "C84.A0",
        "1263": "C84.A1",
        "1264": "C84.A2",
        "1265": "C84.A3",
        "1266": "C84.A6",
        "1267": "C84.A7",
        "1268": "C84.A8",
        "1269": "C84.A9",
        "1270": "C84.Z0",
        "1271": "C84.Z1",
        "1272": "C84.Z2",
        "1273": "C84.Z4",
        "1274": "C84.Z5",
        "1275": "C84.Z6",
        "1276": "C84.Z7",
        "1277": "C84.Z8",
        "1278": "C84.Z9",
        "1279": "C85.10",
        "1280": "C85.11",
        "1281": "C85.12",
        "1282": "C85.14",
        "1283": "C85.16",
        "1284": "C85.17",
        "1285": "C85.19",
        "1286": "C85.21",
        "1287": "C85.23",
        "1288": "C85.26",
        "1289": "C85.27",
        "1290": "C85.80",
        "1291": "C85.81",
        "1292": "C85.82",
        "1293": "C85.83",
        "1294": "C85.84",
        "1295": "C85.85",
        "1296": "C85.89",
        "1297": "C85.90",
        "1298": "C85.91",
        "1299": "C85.92",
        "1300": "C85.93",
        "1301": "C85.94",
        "1302": "C85.95",
        "1303": "C85.96",
        "1304": "C85.97",
        "1305": "C85.98",
        "1306": "C85.99",
        "1307": "C86.0",
        "1308": "C86.1",
        "1309": "C86.2",
        "1310": "C86.3",
        "1311": "C86.4",
        "1312": "C86.6",
        "1313": "C88.0",
        "1314": "C88.2",
        "1315": "C88.4",
        "1316": "C88.9",
        "1317": "C90.00",
        "1318": "C90.01",
        "1319": "C90.02",
        "1320": "C90.11",
        "1321": "C90.12",
        "1322": "C90.20",
        "1323": "C90.21",
        "1324": "C90.22",
        "1325": "C90.31",
        "1326": "C90.32",
        "1327": "C91.00",
        "1328": "C91.01",
        "1329": "C91.10",
        "1330": "C91.11",
        "1331": "C91.12",
        "1332": "C91.31",
        "1333": "C91.40",
        "1334": "C91.41",
        "1335": "C91.60",
        "1336": "C91.61",
        "1337": "C91.62",
        "1338": "C91.91",
        "1339": "C91.A0",
        "1340": "C91.A1",
        "1341": "C91.A2",
        "1342": "C92.00",
        "1343": "C92.01",
        "1344": "C92.1",
        "1345": "C92.10",
        "1346": "C92.11",
        "1347": "C92.12",
        "1348": "C92.21",
        "1349": "C92.22",
        "1350": "C92.31",
        "1351": "C92.32",
        "1352": "C92.41",
        "1353": "C92.51",
        "1354": "C92.52",
        "1355": "C92.60",
        "1356": "C92.61",
        "1357": "C92.62",
        "1358": "C92.91",
        "1359": "C92.A1",
        "1360": "C92.A2",
        "1361": "C92.Z2",
        "1362": "C93.00",
        "1363": "C93.01",
        "1364": "C93.02",
        "1365": "C93.11",
        "1366": "C93.12",
        "1367": "C93.30",
        "1368": "C93.92",
        "1369": "C93.Z0",
        "1370": "C93.Z2",
        "1371": "C94.00",
        "1372": "C94.01",
        "1373": "C94.02",
        "1374": "C94.20",
        "1375": "C94.21",
        "1376": "C94.22",
        "1377": "C94.32",
        "1378": "C94.40",
        "1379": "C94.42",
        "1380": "C94.6",
        "1381": "C94.82",
        "1382": "C95.00",
        "1383": "C95.02",
        "1384": "C95.10",
        "1385": "C95.12",
        "1386": "C95.91",
        "1387": "C95.92",
        "1388": "C96.0",
        "1389": "C96.4",
        "1390": "C96.6",
        "1391": "C96.Z",
        "1392": "D00.02",
        "1393": "D00.03",
        "1394": "D00.04",
        "1395": "D00.06",
        "1396": "D00.07",
        "1397": "D00.08",
        "1398": "D00.2",
        "1399": "D01.0",
        "1400": "D01.1",
        "1401": "D01.3",
        "1402": "D01.49",
        "1403": "D01.5",
        "1404": "D01.7",
        "1405": "D01.9",
        "1406": "D02.0",
        "1407": "D02.20",
        "1408": "D02.22",
        "1409": "D02.4",
        "1410": "D03.0",
        "1411": "D03.20",
        "1412": "D03.21",
        "1413": "D03.22",
        "1414": "D03.30",
        "1415": "D03.39",
        "1416": "D03.4",
        "1417": "D03.52",
        "1418": "D03.59",
        "1419": "D03.71",
        "1420": "D03.72",
        "1421": "D03.8",
        "1422": "D03.9",
        "1423": "D04.0",
        "1424": "D04.10",
        "1425": "D04.12",
        "1426": "D04.21",
        "1427": "D04.22",
        "1428": "D04.30",
        "1429": "D04.39",
        "1430": "D04.4",
        "1431": "D04.60",
        "1432": "D04.62",
        "1433": "D04.72",
        "1434": "D04.8",
        "1435": "D05.00",
        "1436": "D05.02",
        "1437": "D05.10",
        "1438": "D05.11",
        "1439": "D05.12",
        "1440": "D05.81",
        "1441": "D05.82",
        "1442": "D05.90",
        "1443": "D05.92",
        "1444": "D06.9",
        "1445": "D07.1",
        "1446": "D07.2",
        "1447": "D07.5",
        "1448": "D07.60",
        "1449": "D09.0",
        "1450": "D09.10",
        "1451": "D09.2",
        "1452": "D09.20",
        "1453": "D09.21",
        "1454": "D09.22",
        "1455": "D09.3",
        "1456": "D09.8",
        "1457": "D09.9",
        "1458": "D10.0",
        "1459": "D10.2",
        "1460": "D10.30",
        "1461": "D10.39",
        "1462": "D10.5",
        "1463": "D10.7",
        "1464": "D10.9",
        "1465": "D11.0",
        "1466": "D11.9",
        "1467": "D12.0",
        "1468": "D12.1",
        "1469": "D12.2",
        "1470": "D12.3",
        "1471": "D12.4",
        "1472": "D12.5",
        "1473": "D12.7",
        "1474": "D12.8",
        "1475": "D12.9",
        "1476": "D13.0",
        "1477": "D13.1",
        "1478": "D13.2",
        "1479": "D13.30",
        "1480": "D13.39",
        "1481": "D13.4",
        "1482": "D13.5",
        "1483": "D14.1",
        "1484": "D14.2",
        "1485": "D14.31",
        "1486": "D14.32",
        "1487": "D14.4",
        "1488": "D15.7",
        "1489": "D16.02",
        "1490": "D16.10",
        "1491": "D16.11",
        "1492": "D16.20",
        "1493": "D16.21",
        "1494": "D16.4",
        "1495": "D16.5",
        "1496": "D16.8",
        "1497": "D16.9",
        "1498": "D17.0",
        "1499": "D17.1",
        "1500": "D17.20",
        "1501": "D17.22",
        "1502": "D17.24",
        "1503": "D17.30",
        "1504": "D17.39",
        "1505": "D17.4",
        "1506": "D17.9",
        "1507": "D18.00",
        "1508": "D18.01",
        "1509": "D18.02",
        "1510": "D19.0",
        "1511": "D19.7",
        "1512": "D19.9",
        "1513": "D20.0",
        "1514": "D20.1",
        "1515": "D21.0",
        "1516": "D21.12",
        "1517": "D21.4",
        "1518": "D21.5",
        "1519": "D21.6",
        "1520": "D21.9",
        "1521": "D22.0",
        "1522": "D22.10",
        "1523": "D22.12",
        "1524": "D22.22",
        "1525": "D22.30",
        "1526": "D22.39",
        "1527": "D22.4",
        "1528": "D22.5",
        "1529": "D22.61",
        "1530": "D22.62",
        "1531": "D22.70",
        "1532": "D22.9",
        "1533": "D23.11",
        "1534": "D23.12",
        "1535": "D23.20",
        "1536": "D23.21",
        "1537": "D23.22",
        "1538": "D23.4",
        "1539": "D23.5",
        "1540": "D23.70",
        "1541": "D23.71",
        "1542": "D23.72",
        "1543": "D23.9",
        "1544": "D24.2",
        "1545": "D24.9",
        "1546": "D25.1",
        "1547": "D26.1",
        "1548": "D26.9",
        "1549": "D27.0",
        "1550": "D27.1",
        "1551": "D27.9",
        "1552": "D28.0",
        "1553": "D28.1",
        "1554": "D28.7",
        "1555": "D28.9",
        "1556": "D29.0",
        "1557": "D29.1",
        "1558": "D29.20",
        "1559": "D29.21",
        "1560": "D29.22",
        "1561": "D29.31",
        "1562": "D29.32",
        "1563": "D29.4",
        "1564": "D29.8",
        "1565": "D29.9",
        "1566": "D30.01",
        "1567": "D30.02",
        "1568": "D30.10",
        "1569": "D30.11",
        "1570": "D30.12",
        "1571": "D30.2",
        "1572": "D30.20",
        "1573": "D30.21",
        "1574": "D30.22",
        "1575": "D30.4",
        "1576": "D30.8",
        "1577": "D30.9",
        "1578": "D31.10",
        "1579": "D31.11",
        "1580": "D31.21",
        "1581": "D31.22",
        "1582": "D31.30",
        "1583": "D31.31",
        "1584": "D31.32",
        "1585": "D31.40",
        "1586": "D31.42",
        "1587": "D31.50",
        "1588": "D31.51",
        "1589": "D31.61",
        "1590": "D31.62",
        "1591": "D31.9",
        "1592": "D31.90",
        "1593": "D31.91",
        "1594": "D31.92",
        "1595": "D32.0",
        "1596": "D32.1",
        "1597": "D32.9",
        "1598": "D33.0",
        "1599": "D33.1",
        "1600": "D33.2",
        "1601": "D33.4",
        "1602": "D33.7",
        "1603": "D33.9",
        "1604": "D35.01",
        "1605": "D35.02",
        "1606": "D35.1",
        "1607": "D35.3",
        "1608": "D35.9",
        "1609": "D36.0",
        "1610": "D36.10",
        "1611": "D36.11",
        "1612": "D36.12",
        "1613": "D36.13",
        "1614": "D36.14",
        "1615": "D36.15",
        "1616": "D36.16",
        "1617": "D36.17",
        "1618": "D36.7",
        "1619": "D37.01",
        "1620": "D37.03",
        "1621": "D37.04",
        "1622": "D37.05",
        "1623": "D37.09",
        "1624": "D37.1",
        "1625": "D37.2",
        "1626": "D37.3",
        "1627": "D37.4",
        "1628": "D37.5",
        "1629": "D37.6",
        "1630": "D38.1",
        "1631": "D38.3",
        "1632": "D38.5",
        "1633": "D39.0",
        "1634": "D39.12",
        "1635": "D39.2",
        "1636": "D39.8",
        "1637": "D3A.00",
        "1638": "D3A.01",
        "1639": "D3A.02",
        "1640": "D3A.09",
        "1641": "D40.0",
        "1642": "D40.10",
        "1643": "D40.11",
        "1644": "D40.12",
        "1645": "D40.9",
        "1646": "D41.00",
        "1647": "D41.01",
        "1648": "D41.02",
        "1649": "D41.1",
        "1650": "D41.10",
        "1651": "D41.20",
        "1652": "D41.22",
        "1653": "D41.3",
        "1654": "D41.4",
        "1655": "D41.8",
        "1656": "D42.0",
        "1657": "D42.1",
        "1658": "D43.1",
        "1659": "D43.3",
        "1660": "D43.4",
        "1661": "D43.8",
        "1662": "D43.9",
        "1663": "D44.10",
        "1664": "D44.11",
        "1665": "D44.12",
        "1666": "D44.3",
        "1667": "D44.4",
        "1668": "D44.5",
        "1669": "D44.6",
        "1670": "D44.7",
        "1671": "D44.9",
        "1672": "D46.0",
        "1673": "D46.20",
        "1674": "D46.21",
        "1675": "D46.4",
        "1676": "D46.9",
        "1677": "D46.B",
        "1678": "D46.C",
        "1679": "D46.Z",
        "1680": "D47.0",
        "1681": "D47.1",
        "1682": "D47.2",
        "1683": "D47.3",
        "1684": "D47.9",
        "1685": "D47.Z1",
        "1686": "D47.Z9",
        "1687": "D48.0",
        "1688": "D48.2",
        "1689": "D48.3",
        "1690": "D48.5",
        "1691": "D48.61",
        "1692": "D48.62",
        "1693": "D48.9",
        "1694": "D49.4",
        "1695": "D49.5",
        "1696": "D49.6",
        "1697": "D49.7",
        "1698": "D49.89",
        "1699": "D49.9",
        "1700": "D50.1",
        "1701": "D50.8",
        "1702": "D50.9",
        "1703": "D51.0",
        "1704": "D51.1",
        "1705": "D51.2",
        "1706": "D51.3",
        "1707": "D51.8",
        "1708": "D51.9",
        "1709": "D52.0",
        "1710": "D52.1",
        "1711": "D52.9",
        "1712": "D53.0",
        "1713": "D53.2",
        "1714": "D53.8",
        "1715": "D55.0",
        "1716": "D55.1",
        "1717": "D55.2",
        "1718": "D55.9",
        "1719": "D56.0",
        "1720": "D56.1",
        "1721": "D56.2",
        "1722": "D56.3",
        "1723": "D56.5",
        "1724": "D56.9",
        "1725": "D57.0",
        "1726": "D57.00",
        "1727": "D57.01",
        "1728": "D57.1",
        "1729": "D57.20",
        "1730": "D57.21",
        "1731": "D57.3",
        "1732": "D57.40",
        "1733": "D57.41",
        "1734": "D57.80",
        "1735": "D57.81",
        "1736": "D58.0",
        "1737": "D58.1",
        "1738": "D58.2",
        "1739": "D59.0",
        "1740": "D59.1",
        "1741": "D59.2",
        "1742": "D59.3",
        "1743": "D59.4",
        "1744": "D59.8",
        "1745": "D59.9",
        "1746": "D60.0",
        "1747": "D60.8",
        "1748": "D60.9",
        "1749": "D61.01",
        "1750": "D61.09",
        "1751": "D61.1",
        "1752": "D61.3",
        "1753": "D61.81",
        "1754": "D61.89",
        "1755": "D61.9",
        "1756": "D63.0",
        "1757": "D64.1",
        "1758": "D64.2",
        "1759": "D64.3",
        "1760": "D64.4",
        "1761": "D64.81",
        "1762": "D64.9",
        "1763": "D68.0",
        "1764": "D68.1",
        "1765": "D68.31",
        "1766": "D68.4",
        "1767": "D68.52",
        "1768": "D68.62",
        "1769": "D68.69",
        "1770": "D69.0",
        "1771": "D69.1",
        "1772": "D69.2",
        "1773": "D69.41",
        "1774": "D69.49",
        "1775": "D69.59",
        "1776": "D69.6",
        "1777": "D70.1",
        "1778": "D70.3",
        "1779": "D70.8",
        "1780": "D72.0",
        "1781": "D72.1",
        "1782": "D72.81",
        "1783": "D72.82",
        "1784": "D72.89",
        "1785": "D72.9",
        "1786": "D73.0",
        "1787": "D73.2",
        "1788": "D73.4",
        "1789": "D73.81",
        "1790": "D73.9",
        "1791": "D74.0",
        "1792": "D74.9",
        "1793": "D75.0",
        "1794": "D75.1",
        "1795": "D75.2",
        "1796": "D75.82",
        "1797": "D75.9",
        "1798": "D76.2",
        "1799": "D76.3",
        "1800": "D78.01",
        "1801": "D78.12",
        "1802": "D78.22",
        "1803": "D78.89",
        "1804": "D80.0",
        "1805": "D80.1",
        "1806": "D80.3",
        "1807": "D80.4",
        "1808": "D80.5",
        "1809": "D80.6",
        "1810": "D80.7",
        "1811": "D80.9",
        "1812": "D81.4",
        "1813": "D81.5",
        "1814": "D81.6",
        "1815": "D81.7",
        "1816": "D81.81",
        "1817": "D81.89",
        "1818": "D81.9",
        "1819": "D82.0",
        "1820": "D82.2",
        "1821": "D82.3",
        "1822": "D82.4",
        "1823": "D82.8",
        "1824": "D83.2",
        "1825": "D83.9",
        "1826": "D84.1",
        "1827": "D84.8",
        "1828": "D86.0",
        "1829": "D86.3",
        "1830": "D86.82",
        "1831": "D86.83",
        "1832": "D86.84",
        "1833": "D86.85",
        "1834": "D86.86",
        "1835": "D86.87",
        "1836": "D86.89",
        "1837": "D86.9",
        "1838": "D89.0",
        "1839": "D89.1",
        "1840": "D89.2",
        "1841": "D89.3",
        "1842": "D89.81",
        "1843": "D89.82",
        "1844": "D89.9",
        "1845": "E00.0",
        "1846": "E00.1",
        "1847": "E01.0",
        "1848": "E01.2",
        "1849": "E01.8",
        "1850": "E03.0",
        "1851": "E03.3",
        "1852": "E03.5",
        "1853": "E03.8",
        "1854": "E03.9",
        "1855": "E04.0",
        "1856": "E04.1",
        "1857": "E04.2",
        "1858": "E04.8",
        "1859": "E04.9",
        "1860": "E05.00",
        "1861": "E05.10",
        "1862": "E05.20",
        "1863": "E05.21",
        "1864": "E05.31",
        "1865": "E05.40",
        "1866": "E05.41",
        "1867": "E05.5",
        "1868": "E05.80",
        "1869": "E05.81",
        "1870": "E05.9",
        "1871": "E05.91",
        "1872": "E06.1",
        "1873": "E06.3",
        "1874": "E06.4",
        "1875": "E06.5",
        "1876": "E07.0",
        "1877": "E07.8",
        "1878": "E07.81",
        "1879": "E07.9",
        "1880": "E08.01",
        "1881": "E08.10",
        "1882": "E08.22",
        "1883": "E08.29",
        "1884": "E08.31",
        "1885": "E08.32",
        "1886": "E08.33",
        "1887": "E08.34",
        "1888": "E08.36",
        "1889": "E08.40",
        "1890": "E08.41",
        "1891": "E08.42",
        "1892": "E08.44",
        "1893": "E08.49",
        "1894": "E08.51",
        "1895": "E08.52",
        "1896": "E08.59",
        "1897": "E08.61",
        "1898": "E08.62",
        "1899": "E08.63",
        "1900": "E08.64",
        "1901": "E08.65",
        "1902": "E08.8",
        "1903": "E08.9",
        "1904": "E09.00",
        "1905": "E09.10",
        "1906": "E09.11",
        "1907": "E09.21",
        "1908": "E09.29",
        "1909": "E09.32",
        "1910": "E09.33",
        "1911": "E09.34",
        "1912": "E09.35",
        "1913": "E09.36",
        "1914": "E09.39",
        "1915": "E09.40",
        "1916": "E09.41",
        "1917": "E09.43",
        "1918": "E09.44",
        "1919": "E09.51",
        "1920": "E09.52",
        "1921": "E09.59",
        "1922": "E09.61",
        "1923": "E09.62",
        "1924": "E09.63",
        "1925": "E09.64",
        "1926": "E09.65",
        "1927": "E09.69",
        "1928": "E09.8",
        "1929": "E09.9",
        "1930": "E10.1",
        "1931": "E10.10",
        "1932": "E10.21",
        "1933": "E10.29",
        "1934": "E10.31",
        "1935": "E10.33",
        "1936": "E10.35",
        "1937": "E10.36",
        "1938": "E10.39",
        "1939": "E10.4",
        "1940": "E10.40",
        "1941": "E10.41",
        "1942": "E10.43",
        "1943": "E10.51",
        "1944": "E10.52",
        "1945": "E10.59",
        "1946": "E10.6",
        "1947": "E10.61",
        "1948": "E10.62",
        "1949": "E10.63",
        "1950": "E10.65",
        "1951": "E10.9",
        "1952": "E11.22",
        "1953": "E11.29",
        "1954": "E11.31",
        "1955": "E11.32",
        "1956": "E11.33",
        "1957": "E11.34",
        "1958": "E11.35",
        "1959": "E11.36",
        "1960": "E11.39",
        "1961": "E11.4",
        "1962": "E11.40",
        "1963": "E11.42",
        "1964": "E11.43",
        "1965": "E11.49",
        "1966": "E11.51",
        "1967": "E11.59",
        "1968": "E11.6",
        "1969": "E11.61",
        "1970": "E11.62",
        "1971": "E11.64",
        "1972": "E11.65",
        "1973": "E11.69",
        "1974": "E11.8",
        "1975": "E11.9",
        "1976": "E12.9",
        "1977": "E13.00",
        "1978": "E13.01",
        "1979": "E13.10",
        "1980": "E13.11",
        "1981": "E13.22",
        "1982": "E13.29",
        "1983": "E13.31",
        "1984": "E13.32",
        "1985": "E13.34",
        "1986": "E13.35",
        "1987": "E13.36",
        "1988": "E13.39",
        "1989": "E13.40",
        "1990": "E13.41",
        "1991": "E13.42",
        "1992": "E13.43",
        "1993": "E13.44",
        "1994": "E13.49",
        "1995": "E13.51",
        "1996": "E13.52",
        "1997": "E13.59",
        "1998": "E13.61",
        "1999": "E13.62",
        "2000": "E13.63",
        "2001": "E13.64",
        "2002": "E13.65",
        "2003": "E13.8",
        "2004": "E13.9",
        "2005": "E14.1",
        "2006": "E14.4",
        "2007": "E16.1",
        "2008": "E16.2",
        "2009": "E16.3",
        "2010": "E20.1",
        "2011": "E20.9",
        "2012": "E21.0",
        "2013": "E21.1",
        "2014": "E21.3",
        "2015": "E21.4",
        "2016": "E21.5",
        "2017": "E22.0",
        "2018": "E22.1",
        "2019": "E22.8",
        "2020": "E23.0",
        "2021": "E23.1",
        "2022": "E23.2",
        "2023": "E23.7",
        "2024": "E24.0",
        "2025": "E24.1",
        "2026": "E24.8",
        "2027": "E24.9",
        "2028": "E25.0",
        "2029": "E25.8",
        "2030": "E25.9",
        "2031": "E26.02",
        "2032": "E26.09",
        "2033": "E26.1",
        "2034": "E26.81",
        "2035": "E26.89",
        "2036": "E26.9",
        "2037": "E27.0",
        "2038": "E27.1",
        "2039": "E27.2",
        "2040": "E27.40",
        "2041": "E27.5",
        "2042": "E27.8",
        "2043": "E27.9",
        "2044": "E28.0",
        "2045": "E28.1",
        "2046": "E28.2",
        "2047": "E28.3",
        "2048": "E28.31",
        "2049": "E28.9",
        "2050": "E29.9",
        "2051": "E30.0",
        "2052": "E30.1",
        "2053": "E30.9",
        "2054": "E31.1",
        "2055": "E31.20",
        "2056": "E31.22",
        "2057": "E31.9",
        "2058": "E32.1",
        "2059": "E32.8",
        "2060": "E32.9",
        "2061": "E34.0",
        "2062": "E34.1",
        "2063": "E34.2",
        "2064": "E34.3",
        "2065": "E34.4",
        "2066": "E34.50",
        "2067": "E34.51",
        "2068": "E34.9",
        "2069": "E36.01",
        "2070": "E36.02",
        "2071": "E36.11",
        "2072": "E36.12",
        "2073": "E44.1",
        "2074": "E50.0",
        "2075": "E50.1",
        "2076": "E50.3",
        "2077": "E50.5",
        "2078": "E50.6",
        "2079": "E50.7",
        "2080": "E51.12",
        "2081": "E51.8",
        "2082": "E51.9",
        "2083": "E53.0",
        "2084": "E53.1",
        "2085": "E53.8",
        "2086": "E53.9",
        "2087": "E55.0",
        "2088": "E56.0",
        "2089": "E56.8",
        "2090": "E56.9",
        "2091": "E61.1",
        "2092": "E61.2",
        "2093": "E61.3",
        "2094": "E61.5",
        "2095": "E61.6",
        "2096": "E61.8",
        "2097": "E61.9",
        "2098": "E63.0",
        "2099": "E63.1",
        "2100": "E63.8",
        "2101": "E63.9",
        "2102": "E64.0",
        "2103": "E64.1",
        "2104": "E64.2",
        "2105": "E64.8",
        "2106": "E64.9",
        "2107": "E66.01",
        "2108": "E66.09",
        "2109": "E66.1",
        "2110": "E66.2",
        "2111": "E66.9",
        "2112": "E67.0",
        "2113": "E67.3",
        "2114": "E67.8",
        "2115": "E70.0",
        "2116": "E70.1",
        "2117": "E70.20",
        "2118": "E70.29",
        "2119": "E70.31",
        "2120": "E70.32",
        "2121": "E70.33",
        "2122": "E70.39",
        "2123": "E70.40",
        "2124": "E70.41",
        "2125": "E70.5",
        "2126": "E70.9",
        "2127": "E71.11",
        "2128": "E71.12",
        "2129": "E71.19",
        "2130": "E71.30",
        "2131": "E71.31",
        "2132": "E71.41",
        "2133": "E71.42",
        "2134": "E71.44",
        "2135": "E71.50",
        "2136": "E71.51",
        "2137": "E71.52",
        "2138": "E71.53",
        "2139": "E71.54",
        "2140": "E72.01",
        "2141": "E72.02",
        "2142": "E72.03",
        "2143": "E72.04",
        "2144": "E72.11",
        "2145": "E72.12",
        "2146": "E72.19",
        "2147": "E72.20",
        "2148": "E72.21",
        "2149": "E72.23",
        "2150": "E72.3",
        "2151": "E72.4",
        "2152": "E72.52",
        "2153": "E72.59",
        "2154": "E72.8",
        "2155": "E72.9",
        "2156": "E73.8",
        "2157": "E73.9",
        "2158": "E74.00",
        "2159": "E74.04",
        "2160": "E74.10",
        "2161": "E74.11",
        "2162": "E74.12",
        "2163": "E74.21",
        "2164": "E74.29",
        "2165": "E74.31",
        "2166": "E74.39",
        "2167": "E74.4",
        "2168": "E74.9",
        "2169": "E75.00",
        "2170": "E75.02",
        "2171": "E75.10",
        "2172": "E75.11",
        "2173": "E75.22",
        "2174": "E75.23",
        "2175": "E75.24",
        "2176": "E75.25",
        "2177": "E75.5",
        "2178": "E75.6",
        "2179": "E76.01",
        "2180": "E76.02",
        "2181": "E76.03",
        "2182": "E76.21",
        "2183": "E76.29",
        "2184": "E76.3",
        "2185": "E76.8",
        "2186": "E76.9",
        "2187": "E77.1",
        "2188": "E77.8",
        "2189": "E77.9",
        "2190": "E78.0",
        "2191": "E78.1",
        "2192": "E78.2",
        "2193": "E78.3",
        "2194": "E78.5",
        "2195": "E78.6",
        "2196": "E78.71",
        "2197": "E78.72",
        "2198": "E78.79",
        "2199": "E78.89",
        "2200": "E79.1",
        "2201": "E80.0",
        "2202": "E80.20",
        "2203": "E80.3",
        "2204": "E80.4",
        "2205": "E80.5",
        "2206": "E80.6",
        "2207": "E80.7",
        "2208": "E83.00",
        "2209": "E83.01",
        "2210": "E83.09",
        "2211": "E83.10",
        "2212": "E83.11",
        "2213": "E83.3",
        "2214": "E83.30",
        "2215": "E83.31",
        "2216": "E83.32",
        "2217": "E83.39",
        "2218": "E83.41",
        "2219": "E83.42",
        "2220": "E83.49",
        "2221": "E83.50",
        "2222": "E83.51",
        "2223": "E83.52",
        "2224": "E83.59",
        "2225": "E83.81",
        "2226": "E83.9",
        "2227": "E84.0",
        "2228": "E84.9",
        "2229": "E85.0",
        "2230": "E85.1",
        "2231": "E85.2",
        "2232": "E85.3",
        "2233": "E85.4",
        "2234": "E85.8",
        "2235": "E86.0",
        "2236": "E86.1",
        "2237": "E87.0",
        "2238": "E87.1",
        "2239": "E87.3",
        "2240": "E87.4",
        "2241": "E87.5",
        "2242": "E87.6",
        "2243": "E87.70",
        "2244": "E87.71",
        "2245": "E87.79",
        "2246": "E87.8",
        "2247": "E88.1",
        "2248": "E88.2",
        "2249": "E88.3",
        "2250": "E88.40",
        "2251": "E88.41",
        "2252": "E88.42",
        "2253": "E88.89",
        "2254": "E88.9",
        "2255": "E89.0",
        "2256": "E89.2",
        "2257": "E89.3",
        "2258": "E89.5",
        "2259": "E89.6",
        "2260": "E89.81",
        "2261": "E89.89",
        "2262": "F01.50",
        "2263": "F01.51",
        "2264": "F02.80",
        "2265": "F02.81",
        "2266": "F03.90",
        "2267": "F03.91",
        "2268": "F05.9",
        "2269": "F06.0",
        "2270": "F06.2",
        "2271": "F06.31",
        "2272": "F06.32",
        "2273": "F06.33",
        "2274": "F06.34",
        "2275": "F06.4",
        "2276": "F07.0",
        "2277": "F07.81",
        "2278": "F07.9",
        "2279": "F10.10",
        "2280": "F10.12",
        "2281": "F10.14",
        "2282": "F10.15",
        "2283": "F10.18",
        "2284": "F10.19",
        "2285": "F10.20",
        "2286": "F10.21",
        "2287": "F10.22",
        "2288": "F10.23",
        "2289": "F10.25",
        "2290": "F10.28",
        "2291": "F10.29",
        "2292": "F10.92",
        "2293": "F10.94",
        "2294": "F10.95",
        "2295": "F10.96",
        "2296": "F10.97",
        "2297": "F10.98",
        "2298": "F10.99",
        "2299": "F11.10",
        "2300": "F11.12",
        "2301": "F11.14",
        "2302": "F11.15",
        "2303": "F11.18",
        "2304": "F11.19",
        "2305": "F11.20",
        "2306": "F11.22",
        "2307": "F11.23",
        "2308": "F11.24",
        "2309": "F11.28",
        "2310": "F11.29",
        "2311": "F11.92",
        "2312": "F11.94",
        "2313": "F11.98",
        "2314": "F11.99",
        "2315": "F12.10",
        "2316": "F12.12",
        "2317": "F12.15",
        "2318": "F12.18",
        "2319": "F12.20",
        "2320": "F12.22",
        "2321": "F12.25",
        "2322": "F12.90",
        "2323": "F12.92",
        "2324": "F12.95",
        "2325": "F12.98",
        "2326": "F13.12",
        "2327": "F13.15",
        "2328": "F13.18",
        "2329": "F13.19",
        "2330": "F13.20",
        "2331": "F13.21",
        "2332": "F13.22",
        "2333": "F13.23",
        "2334": "F13.25",
        "2335": "F13.27",
        "2336": "F13.28",
        "2337": "F13.29",
        "2338": "F13.90",
        "2339": "F13.92",
        "2340": "F13.93",
        "2341": "F13.94",
        "2342": "F13.95",
        "2343": "F13.97",
        "2344": "F13.98",
        "2345": "F14.10",
        "2346": "F14.14",
        "2347": "F14.15",
        "2348": "F14.18",
        "2349": "F14.20",
        "2350": "F14.21",
        "2351": "F14.22",
        "2352": "F14.25",
        "2353": "F14.28",
        "2354": "F14.29",
        "2355": "F14.90",
        "2356": "F14.92",
        "2357": "F14.94",
        "2358": "F14.95",
        "2359": "F14.98",
        "2360": "F14.99",
        "2361": "F15.10",
        "2362": "F15.12",
        "2363": "F15.15",
        "2364": "F15.18",
        "2365": "F15.19",
        "2366": "F15.20",
        "2367": "F15.22",
        "2368": "F15.23",
        "2369": "F15.25",
        "2370": "F15.28",
        "2371": "F15.92",
        "2372": "F15.93",
        "2373": "F15.94",
        "2374": "F15.95",
        "2375": "F15.98",
        "2376": "F15.99",
        "2377": "F16.10",
        "2378": "F16.12",
        "2379": "F16.18",
        "2380": "F16.19",
        "2381": "F16.21",
        "2382": "F16.22",
        "2383": "F16.24",
        "2384": "F16.25",
        "2385": "F16.28",
        "2386": "F16.90",
        "2387": "F16.92",
        "2388": "F16.94",
        "2389": "F16.95",
        "2390": "F16.98",
        "2391": "F17.20",
        "2392": "F17.21",
        "2393": "F17.22",
        "2394": "F17.29",
        "2395": "F18.12",
        "2396": "F18.15",
        "2397": "F18.18",
        "2398": "F18.19",
        "2399": "F18.20",
        "2400": "F18.22",
        "2401": "F18.24",
        "2402": "F18.25",
        "2403": "F18.27",
        "2404": "F18.28",
        "2405": "F18.29",
        "2406": "F18.90",
        "2407": "F18.92",
        "2408": "F18.94",
        "2409": "F18.95",
        "2410": "F18.97",
        "2411": "F18.98",
        "2412": "F18.99",
        "2413": "F19.10",
        "2414": "F19.12",
        "2415": "F19.14",
        "2416": "F19.15",
        "2417": "F19.16",
        "2418": "F19.18",
        "2419": "F19.20",
        "2420": "F19.22",
        "2421": "F19.23",
        "2422": "F19.24",
        "2423": "F19.25",
        "2424": "F19.26",
        "2425": "F19.28",
        "2426": "F19.92",
        "2427": "F19.93",
        "2428": "F19.95",
        "2429": "F19.97",
        "2430": "F19.98",
        "2431": "F20.0",
        "2432": "F20.3",
        "2433": "F20.5",
        "2434": "F20.89",
        "2435": "F20.9",
        "2436": "F25.0",
        "2437": "F25.8",
        "2438": "F25.9",
        "2439": "F30.10",
        "2440": "F30.12",
        "2441": "F30.13",
        "2442": "F30.2",
        "2443": "F30.3",
        "2444": "F30.4",
        "2445": "F30.8",
        "2446": "F30.9",
        "2447": "F31.0",
        "2448": "F31.10",
        "2449": "F31.12",
        "2450": "F31.2",
        "2451": "F31.3",
        "2452": "F31.30",
        "2453": "F31.31",
        "2454": "F31.32",
        "2455": "F31.60",
        "2456": "F31.61",
        "2457": "F31.62",
        "2458": "F31.63",
        "2459": "F31.70",
        "2460": "F31.71",
        "2461": "F31.72",
        "2462": "F31.73",
        "2463": "F31.75",
        "2464": "F31.76",
        "2465": "F31.8",
        "2466": "F31.81",
        "2467": "F31.89",
        "2468": "F31.9",
        "2469": "F32.0",
        "2470": "F32.1",
        "2471": "F32.3",
        "2472": "F32.4",
        "2473": "F32.5",
        "2474": "F32.8",
        "2475": "F32.9",
        "2476": "F33.1",
        "2477": "F33.40",
        "2478": "F33.41",
        "2479": "F33.42",
        "2480": "F33.8",
        "2481": "F33.9",
        "2482": "F34.0",
        "2483": "F34.1",
        "2484": "F34.9",
        "2485": "F40.00",
        "2486": "F40.01",
        "2487": "F40.02",
        "2488": "F40.1",
        "2489": "F40.11",
        "2490": "F40.21",
        "2491": "F40.22",
        "2492": "F40.23",
        "2493": "F40.24",
        "2494": "F40.29",
        "2495": "F40.9",
        "2496": "F41.0",
        "2497": "F41.1",
        "2498": "F41.3",
        "2499": "F41.8",
        "2500": "F43.1",
        "2501": "F43.10",
        "2502": "F43.11",
        "2503": "F43.12",
        "2504": "F43.20",
        "2505": "F43.23",
        "2506": "F43.25",
        "2507": "F43.29",
        "2508": "F43.8",
        "2509": "F43.9",
        "2510": "F44.0",
        "2511": "F44.4",
        "2512": "F44.5",
        "2513": "F44.6",
        "2514": "F44.81",
        "2515": "F44.9",
        "2516": "F45.1",
        "2517": "F45.2",
        "2518": "F45.20",
        "2519": "F45.21",
        "2520": "F45.3",
        "2521": "F45.42",
        "2522": "F45.8",
        "2523": "F45.9",
        "2524": "F48.0",
        "2525": "F48.1",
        "2526": "F48.2",
        "2527": "F50.01",
        "2528": "F50.02",
        "2529": "F50.2",
        "2530": "F50.9",
        "2531": "F51.0",
        "2532": "F51.01",
        "2533": "F51.03",
        "2534": "F51.04",
        "2535": "F51.05",
        "2536": "F51.09",
        "2537": "F51.12",
        "2538": "F51.3",
        "2539": "F51.4",
        "2540": "F51.5",
        "2541": "F52.0",
        "2542": "F52.1",
        "2543": "F52.21",
        "2544": "F52.22",
        "2545": "F52.32",
        "2546": "F52.4",
        "2547": "F52.5",
        "2548": "F52.6",
        "2549": "F55.0",
        "2550": "F55.1",
        "2551": "F55.2",
        "2552": "F55.3",
        "2553": "F60.0",
        "2554": "F60.1",
        "2555": "F60.4",
        "2556": "F60.6",
        "2557": "F60.7",
        "2558": "F60.81",
        "2559": "F60.9",
        "2560": "F63.0",
        "2561": "F63.1",
        "2562": "F63.3",
        "2563": "F63.81",
        "2564": "F63.89",
        "2565": "F63.9",
        "2566": "F64.9",
        "2567": "F65.1",
        "2568": "F65.2",
        "2569": "F65.3",
        "2570": "F65.50",
        "2571": "F65.51",
        "2572": "F65.81",
        "2573": "F65.9",
        "2574": "F68.10",
        "2575": "F68.12",
        "2576": "F68.8",
        "2577": "F80.1",
        "2578": "F80.2",
        "2579": "F80.4",
        "2580": "F80.89",
        "2581": "F80.9",
        "2582": "F81.0",
        "2583": "F81.81",
        "2584": "F81.89",
        "2585": "F81.9",
        "2586": "F84.0",
        "2587": "F84.2",
        "2588": "F84.3",
        "2589": "F84.5",
        "2590": "F84.8",
        "2591": "F84.9",
        "2592": "F90.0",
        "2593": "F90.1",
        "2594": "F90.2",
        "2595": "F90.8",
        "2596": "F90.9",
        "2597": "F91.1",
        "2598": "F91.2",
        "2599": "F91.3",
        "2600": "F93.8",
        "2601": "F93.9",
        "2602": "F94.1",
        "2603": "F94.2",
        "2604": "F94.8",
        "2605": "F94.9",
        "2606": "F95.0",
        "2607": "F95.1",
        "2608": "F95.2",
        "2609": "F95.9",
        "2610": "F98.1",
        "2611": "F98.29",
        "2612": "F98.8",
        "2613": "F98.9",
        "2614": "G00.1",
        "2615": "G00.2",
        "2616": "G03.0",
        "2617": "G03.2",
        "2618": "G03.8",
        "2619": "G03.9",
        "2620": "G04.00",
        "2621": "G04.01",
        "2622": "G04.02",
        "2623": "G04.30",
        "2624": "G04.32",
        "2625": "G04.81",
        "2626": "G04.89",
        "2627": "G04.91",
        "2628": "G06.0",
        "2629": "G06.1",
        "2630": "G06.2",
        "2631": "G11.3",
        "2632": "G11.9",
        "2633": "G12.1",
        "2634": "G12.21",
        "2635": "G12.22",
        "2636": "G12.29",
        "2637": "G12.8",
        "2638": "G12.9",
        "2639": "G13.0",
        "2640": "G13.1",
        "2641": "G13.8",
        "2642": "G21.0",
        "2643": "G21.2",
        "2644": "G21.4",
        "2645": "G21.9",
        "2646": "G23.0",
        "2647": "G23.1",
        "2648": "G23.2",
        "2649": "G23.8",
        "2650": "G23.9",
        "2651": "G24.02",
        "2652": "G24.09",
        "2653": "G24.2",
        "2654": "G24.3",
        "2655": "G24.5",
        "2656": "G24.8",
        "2657": "G24.9",
        "2658": "G25.0",
        "2659": "G25.1",
        "2660": "G25.2",
        "2661": "G25.3",
        "2662": "G25.4",
        "2663": "G25.5",
        "2664": "G25.61",
        "2665": "G25.70",
        "2666": "G25.71",
        "2667": "G25.8",
        "2668": "G25.81",
        "2669": "G25.82",
        "2670": "G25.83",
        "2671": "G25.89",
        "2672": "G25.9",
        "2673": "G30.0",
        "2674": "G30.1",
        "2675": "G30.8",
        "2676": "G30.9",
        "2677": "G31.01",
        "2678": "G31.09",
        "2679": "G31.82",
        "2680": "G31.83",
        "2681": "G31.84",
        "2682": "G31.85",
        "2683": "G31.89",
        "2684": "G31.9",
        "2685": "G32.89",
        "2686": "G36.1",
        "2687": "G36.9",
        "2688": "G37.0",
        "2689": "G37.2",
        "2690": "G37.8",
        "2691": "G37.9",
        "2692": "G40.00",
        "2693": "G40.01",
        "2694": "G40.11",
        "2695": "G40.20",
        "2696": "G40.21",
        "2697": "G40.30",
        "2698": "G40.40",
        "2699": "G40.41",
        "2700": "G40.50",
        "2701": "G40.80",
        "2702": "G40.81",
        "2703": "G40.82",
        "2704": "G40.89",
        "2705": "G40.90",
        "2706": "G40.91",
        "2707": "G40.A0",
        "2708": "G40.A1",
        "2709": "G40.B0",
        "2710": "G40.B1",
        "2711": "G43.0",
        "2712": "G43.00",
        "2713": "G43.01",
        "2714": "G43.1",
        "2715": "G43.10",
        "2716": "G43.11",
        "2717": "G43.40",
        "2718": "G43.41",
        "2719": "G43.50",
        "2720": "G43.51",
        "2721": "G43.60",
        "2722": "G43.61",
        "2723": "G43.70",
        "2724": "G43.80",
        "2725": "G43.81",
        "2726": "G43.82",
        "2727": "G43.83",
        "2728": "G43.9",
        "2729": "G43.90",
        "2730": "G43.91",
        "2731": "G43.A0",
        "2732": "G43.B1",
        "2733": "G44.0",
        "2734": "G44.00",
        "2735": "G44.01",
        "2736": "G44.02",
        "2737": "G44.03",
        "2738": "G44.04",
        "2739": "G44.05",
        "2740": "G44.09",
        "2741": "G44.1",
        "2742": "G44.2",
        "2743": "G44.20",
        "2744": "G44.21",
        "2745": "G44.22",
        "2746": "G44.30",
        "2747": "G44.31",
        "2748": "G44.40",
        "2749": "G44.41",
        "2750": "G44.52",
        "2751": "G44.53",
        "2752": "G44.82",
        "2753": "G44.83",
        "2754": "G44.84",
        "2755": "G44.85",
        "2756": "G44.89",
        "2757": "G45.0",
        "2758": "G45.2",
        "2759": "G45.3",
        "2760": "G45.4",
        "2761": "G45.8",
        "2762": "G45.9",
        "2763": "G46.2",
        "2764": "G46.4",
        "2765": "G46.5",
        "2766": "G46.8",
        "2767": "G47.0",
        "2768": "G47.00",
        "2769": "G47.09",
        "2770": "G47.10",
        "2771": "G47.11",
        "2772": "G47.12",
        "2773": "G47.13",
        "2774": "G47.14",
        "2775": "G47.19",
        "2776": "G47.20",
        "2777": "G47.21",
        "2778": "G47.22",
        "2779": "G47.24",
        "2780": "G47.26",
        "2781": "G47.27",
        "2782": "G47.29",
        "2783": "G47.3",
        "2784": "G47.33",
        "2785": "G47.35",
        "2786": "G47.36",
        "2787": "G47.42",
        "2788": "G47.50",
        "2789": "G47.53",
        "2790": "G47.54",
        "2791": "G47.59",
        "2792": "G47.62",
        "2793": "G47.63",
        "2794": "G47.69",
        "2795": "G47.9",
        "2796": "G50.0",
        "2797": "G50.1",
        "2798": "G50.8",
        "2799": "G50.9",
        "2800": "G51.0",
        "2801": "G51.1",
        "2802": "G51.2",
        "2803": "G51.4",
        "2804": "G51.9",
        "2805": "G52.0",
        "2806": "G52.1",
        "2807": "G52.2",
        "2808": "G52.3",
        "2809": "G52.7",
        "2810": "G52.8",
        "2811": "G52.9",
        "2812": "G53.0",
        "2813": "G54.0",
        "2814": "G54.1",
        "2815": "G54.3",
        "2816": "G54.4",
        "2817": "G54.5",
        "2818": "G54.6",
        "2819": "G54.8",
        "2820": "G56.00",
        "2821": "G56.02",
        "2822": "G56.11",
        "2823": "G56.12",
        "2824": "G56.20",
        "2825": "G56.21",
        "2826": "G56.32",
        "2827": "G56.40",
        "2828": "G56.41",
        "2829": "G56.80",
        "2830": "G56.81",
        "2831": "G56.82",
        "2832": "G56.90",
        "2833": "G57.00",
        "2834": "G57.02",
        "2835": "G57.11",
        "2836": "G57.12",
        "2837": "G57.20",
        "2838": "G57.21",
        "2839": "G57.22",
        "2840": "G57.30",
        "2841": "G57.32",
        "2842": "G57.40",
        "2843": "G57.41",
        "2844": "G57.50",
        "2845": "G57.52",
        "2846": "G57.60",
        "2847": "G57.62",
        "2848": "G57.71",
        "2849": "G57.81",
        "2850": "G57.82",
        "2851": "G57.90",
        "2852": "G57.92",
        "2853": "G58.0",
        "2854": "G58.7",
        "2855": "G58.8",
        "2856": "G58.9",
        "2857": "G60.1",
        "2858": "G60.2",
        "2859": "G60.3",
        "2860": "G60.8",
        "2861": "G61.0",
        "2862": "G61.1",
        "2863": "G61.81",
        "2864": "G62.1",
        "2865": "G62.2",
        "2866": "G62.81",
        "2867": "G65.0",
        "2868": "G65.2",
        "2869": "G70.0",
        "2870": "G70.2",
        "2871": "G70.80",
        "2872": "G70.81",
        "2873": "G70.89",
        "2874": "G70.9",
        "2875": "G71.0",
        "2876": "G71.11",
        "2877": "G71.13",
        "2878": "G71.14",
        "2879": "G71.19",
        "2880": "G71.8",
        "2881": "G72.0",
        "2882": "G72.3",
        "2883": "G72.41",
        "2884": "G72.49",
        "2885": "G73.1",
        "2886": "G73.7",
        "2887": "G80.0",
        "2888": "G80.1",
        "2889": "G80.4",
        "2890": "G80.9",
        "2891": "G81.00",
        "2892": "G81.02",
        "2893": "G81.04",
        "2894": "G81.14",
        "2895": "G81.91",
        "2896": "G81.92",
        "2897": "G81.93",
        "2898": "G82.20",
        "2899": "G82.52",
        "2900": "G82.54",
        "2901": "G83.0",
        "2902": "G83.10",
        "2903": "G83.11",
        "2904": "G83.12",
        "2905": "G83.20",
        "2906": "G83.22",
        "2907": "G83.23",
        "2908": "G83.24",
        "2909": "G83.31",
        "2910": "G83.34",
        "2911": "G83.4",
        "2912": "G83.5",
        "2913": "G83.81",
        "2914": "G83.82",
        "2915": "G83.83",
        "2916": "G83.84",
        "2917": "G83.89",
        "2918": "G83.9",
        "2919": "G89.11",
        "2920": "G89.12",
        "2921": "G89.18",
        "2922": "G89.21",
        "2923": "G89.28",
        "2924": "G89.29",
        "2925": "G89.3",
        "2926": "G89.4",
        "2927": "G90.09",
        "2928": "G90.1",
        "2929": "G90.2",
        "2930": "G90.3",
        "2931": "G90.50",
        "2932": "G90.51",
        "2933": "G90.52",
        "2934": "G90.9",
        "2935": "G91.1",
        "2936": "G91.2",
        "2937": "G91.3",
        "2938": "G91.4",
        "2939": "G91.8",
        "2940": "G91.9",
        "2941": "G93.0",
        "2942": "G93.2",
        "2943": "G93.3",
        "2944": "G93.40",
        "2945": "G93.41",
        "2946": "G93.49",
        "2947": "G93.5",
        "2948": "G93.6",
        "2949": "G93.7",
        "2950": "G93.81",
        "2951": "G93.82",
        "2952": "G93.89",
        "2953": "G93.9",
        "2954": "G95.19",
        "2955": "G95.20",
        "2956": "G95.81",
        "2957": "G95.89",
        "2958": "G96.0",
        "2959": "G96.11",
        "2960": "G96.12",
        "2961": "G96.19",
        "2962": "G96.8",
        "2963": "G96.9",
        "2964": "G97.1",
        "2965": "G97.2",
        "2966": "G97.32",
        "2967": "G97.81",
        "2968": "G97.82",
        "2969": "G98.0",
        "2970": "G99.2",
        "2971": "H00.0",
        "2972": "H00.01",
        "2973": "H00.02",
        "2974": "H00.03",
        "2975": "H00.1",
        "2976": "H00.12",
        "2977": "H00.14",
        "2978": "H00.15",
        "2979": "H00.19",
        "2980": "H01.0",
        "2981": "H01.00",
        "2982": "H01.01",
        "2983": "H01.02",
        "2984": "H01.11",
        "2985": "H01.12",
        "2986": "H01.13",
        "2987": "H01.14",
        "2988": "H01.8",
        "2989": "H01.9",
        "2990": "H02.00",
        "2991": "H02.01",
        "2992": "H02.02",
        "2993": "H02.03",
        "2994": "H02.04",
        "2995": "H02.05",
        "2996": "H02.10",
        "2997": "H02.11",
        "2998": "H02.12",
        "2999": "H02.13",
        "3000": "H02.14",
        "3001": "H02.20",
        "3002": "H02.21",
        "3003": "H02.22",
        "3004": "H02.23",
        "3005": "H02.30",
        "3006": "H02.31",
        "3007": "H02.32",
        "3008": "H02.33",
        "3009": "H02.35",
        "3010": "H02.36",
        "3011": "H02.41",
        "3012": "H02.42",
        "3013": "H02.43",
        "3014": "H02.51",
        "3015": "H02.52",
        "3016": "H02.53",
        "3017": "H02.59",
        "3018": "H02.62",
        "3019": "H02.64",
        "3020": "H02.65",
        "3021": "H02.66",
        "3022": "H02.70",
        "3023": "H02.71",
        "3024": "H02.72",
        "3025": "H02.73",
        "3026": "H02.8",
        "3027": "H02.81",
        "3028": "H02.82",
        "3029": "H02.83",
        "3030": "H02.84",
        "3031": "H02.85",
        "3032": "H02.86",
        "3033": "H02.87",
        "3034": "H02.89",
        "3035": "H02.9",
        "3036": "H04.0",
        "3037": "H04.00",
        "3038": "H04.01",
        "3039": "H04.02",
        "3040": "H04.03",
        "3041": "H04.1",
        "3042": "H04.11",
        "3043": "H04.12",
        "3044": "H04.13",
        "3045": "H04.14",
        "3046": "H04.15",
        "3047": "H04.16",
        "3048": "H04.19",
        "3049": "H04.20",
        "3050": "H04.21",
        "3051": "H04.22",
        "3052": "H04.30",
        "3053": "H04.31",
        "3054": "H04.32",
        "3055": "H04.33",
        "3056": "H04.41",
        "3057": "H04.42",
        "3058": "H04.43",
        "3059": "H04.51",
        "3060": "H04.52",
        "3061": "H04.53",
        "3062": "H04.54",
        "3063": "H04.55",
        "3064": "H04.56",
        "3065": "H04.57",
        "3066": "H04.61",
        "3067": "H04.69",
        "3068": "H04.81",
        "3069": "H04.89",
        "3070": "H05.0",
        "3071": "H05.01",
        "3072": "H05.02",
        "3073": "H05.03",
        "3074": "H05.04",
        "3075": "H05.10",
        "3076": "H05.11",
        "3077": "H05.12",
        "3078": "H05.2",
        "3079": "H05.20",
        "3080": "H05.21",
        "3081": "H05.22",
        "3082": "H05.23",
        "3083": "H05.24",
        "3084": "H05.26",
        "3085": "H05.31",
        "3086": "H05.32",
        "3087": "H05.33",
        "3088": "H05.34",
        "3089": "H05.35",
        "3090": "H05.40",
        "3091": "H05.41",
        "3092": "H05.42",
        "3093": "H05.51",
        "3094": "H05.53",
        "3095": "H05.81",
        "3096": "H05.82",
        "3097": "H05.9",
        "3098": "H10.0",
        "3099": "H10.01",
        "3100": "H10.02",
        "3101": "H10.1",
        "3102": "H10.12",
        "3103": "H10.13",
        "3104": "H10.21",
        "3105": "H10.22",
        "3106": "H10.23",
        "3107": "H10.3",
        "3108": "H10.30",
        "3109": "H10.33",
        "3110": "H10.4",
        "3111": "H10.40",
        "3112": "H10.41",
        "3113": "H10.42",
        "3114": "H10.43",
        "3115": "H10.44",
        "3116": "H10.45",
        "3117": "H10.5",
        "3118": "H10.50",
        "3119": "H10.51",
        "3120": "H10.52",
        "3121": "H10.53",
        "3122": "H10.81",
        "3123": "H10.89",
        "3124": "H10.9",
        "3125": "H11.0",
        "3126": "H11.00",
        "3127": "H11.01",
        "3128": "H11.02",
        "3129": "H11.03",
        "3130": "H11.04",
        "3131": "H11.05",
        "3132": "H11.06",
        "3133": "H11.10",
        "3134": "H11.11",
        "3135": "H11.12",
        "3136": "H11.13",
        "3137": "H11.14",
        "3138": "H11.15",
        "3139": "H11.21",
        "3140": "H11.22",
        "3141": "H11.23",
        "3142": "H11.3",
        "3143": "H11.30",
        "3144": "H11.31",
        "3145": "H11.32",
        "3146": "H11.41",
        "3147": "H11.42",
        "3148": "H11.43",
        "3149": "H11.44",
        "3150": "H11.81",
        "3151": "H11.82",
        "3152": "H11.89",
        "3153": "H15.00",
        "3154": "H15.01",
        "3155": "H15.03",
        "3156": "H15.04",
        "3157": "H15.05",
        "3158": "H15.09",
        "3159": "H15.10",
        "3160": "H15.11",
        "3161": "H15.12",
        "3162": "H15.8",
        "3163": "H15.81",
        "3164": "H15.82",
        "3165": "H15.83",
        "3166": "H15.84",
        "3167": "H15.85",
        "3168": "H15.9",
        "3169": "H16.0",
        "3170": "H16.00",
        "3171": "H16.01",
        "3172": "H16.02",
        "3173": "H16.03",
        "3174": "H16.04",
        "3175": "H16.05",
        "3176": "H16.06",
        "3177": "H16.07",
        "3178": "H16.10",
        "3179": "H16.11",
        "3180": "H16.12",
        "3181": "H16.13",
        "3182": "H16.14",
        "3183": "H16.20",
        "3184": "H16.21",
        "3185": "H16.22",
        "3186": "H16.23",
        "3187": "H16.24",
        "3188": "H16.25",
        "3189": "H16.26",
        "3190": "H16.29",
        "3191": "H16.30",
        "3192": "H16.31",
        "3193": "H16.32",
        "3194": "H16.33",
        "3195": "H16.39",
        "3196": "H16.40",
        "3197": "H16.41",
        "3198": "H16.42",
        "3199": "H16.43",
        "3200": "H16.44",
        "3201": "H16.8",
        "3202": "H16.9",
        "3203": "H17.02",
        "3204": "H17.11",
        "3205": "H17.12",
        "3206": "H17.13",
        "3207": "H17.81",
        "3208": "H17.82",
        "3209": "H17.89",
        "3210": "H18.00",
        "3211": "H18.01",
        "3212": "H18.02",
        "3213": "H18.03",
        "3214": "H18.04",
        "3215": "H18.05",
        "3216": "H18.06",
        "3217": "H18.10",
        "3218": "H18.13",
        "3219": "H18.2",
        "3220": "H18.21",
        "3221": "H18.22",
        "3222": "H18.23",
        "3223": "H18.30",
        "3224": "H18.31",
        "3225": "H18.32",
        "3226": "H18.33",
        "3227": "H18.41",
        "3228": "H18.42",
        "3229": "H18.43",
        "3230": "H18.44",
        "3231": "H18.45",
        "3232": "H18.46",
        "3233": "H18.50",
        "3234": "H18.51",
        "3235": "H18.55",
        "3236": "H18.59",
        "3237": "H18.6",
        "3238": "H18.60",
        "3239": "H18.61",
        "3240": "H18.62",
        "3241": "H18.70",
        "3242": "H18.71",
        "3243": "H18.72",
        "3244": "H18.73",
        "3245": "H18.79",
        "3246": "H18.81",
        "3247": "H18.82",
        "3248": "H18.83",
        "3249": "H18.89",
        "3250": "H20.01",
        "3251": "H20.02",
        "3252": "H20.03",
        "3253": "H20.04",
        "3254": "H20.05",
        "3255": "H20.11",
        "3256": "H20.13",
        "3257": "H20.20",
        "3258": "H20.21",
        "3259": "H20.23",
        "3260": "H20.81",
        "3261": "H20.82",
        "3262": "H20.9",
        "3263": "H21.00",
        "3264": "H21.03",
        "3265": "H21.1X",
        "3266": "H21.21",
        "3267": "H21.22",
        "3268": "H21.23",
        "3269": "H21.24",
        "3270": "H21.25",
        "3271": "H21.26",
        "3272": "H21.27",
        "3273": "H21.29",
        "3274": "H21.30",
        "3275": "H21.31",
        "3276": "H21.32",
        "3277": "H21.33",
        "3278": "H21.34",
        "3279": "H21.35",
        "3280": "H21.40",
        "3281": "H21.41",
        "3282": "H21.42",
        "3283": "H21.50",
        "3284": "H21.51",
        "3285": "H21.52",
        "3286": "H21.53",
        "3287": "H21.54",
        "3288": "H21.56",
        "3289": "H21.81",
        "3290": "H25.01",
        "3291": "H25.03",
        "3292": "H25.04",
        "3293": "H25.09",
        "3294": "H25.10",
        "3295": "H25.12",
        "3296": "H25.13",
        "3297": "H25.21",
        "3298": "H25.81",
        "3299": "H26.00",
        "3300": "H26.01",
        "3301": "H26.03",
        "3302": "H26.04",
        "3303": "H26.05",
        "3304": "H26.06",
        "3305": "H26.10",
        "3306": "H26.11",
        "3307": "H26.12",
        "3308": "H26.13",
        "3309": "H26.20",
        "3310": "H26.21",
        "3311": "H26.22",
        "3312": "H26.23",
        "3313": "H26.30",
        "3314": "H26.32",
        "3315": "H26.33",
        "3316": "H26.41",
        "3317": "H26.49",
        "3318": "H26.8",
        "3319": "H26.9",
        "3320": "H27.00",
        "3321": "H27.01",
        "3322": "H27.02",
        "3323": "H27.03",
        "3324": "H27.11",
        "3325": "H27.12",
        "3326": "H27.13",
        "3327": "H27.8",
        "3328": "H27.9",
        "3329": "H30.00",
        "3330": "H30.01",
        "3331": "H30.02",
        "3332": "H30.03",
        "3333": "H30.04",
        "3334": "H30.10",
        "3335": "H30.11",
        "3336": "H30.12",
        "3337": "H30.13",
        "3338": "H30.14",
        "3339": "H30.20",
        "3340": "H30.81",
        "3341": "H30.89",
        "3342": "H30.90",
        "3343": "H30.91",
        "3344": "H30.92",
        "3345": "H30.93",
        "3346": "H31.00",
        "3347": "H31.01",
        "3348": "H31.02",
        "3349": "H31.09",
        "3350": "H31.10",
        "3351": "H31.11",
        "3352": "H31.12",
        "3353": "H31.20",
        "3354": "H31.21",
        "3355": "H31.22",
        "3356": "H31.23",
        "3357": "H31.29",
        "3358": "H31.30",
        "3359": "H31.31",
        "3360": "H31.32",
        "3361": "H31.40",
        "3362": "H31.41",
        "3363": "H31.42",
        "3364": "H31.8",
        "3365": "H31.9",
        "3366": "H33.00",
        "3367": "H33.01",
        "3368": "H33.02",
        "3369": "H33.03",
        "3370": "H33.04",
        "3371": "H33.05",
        "3372": "H33.10",
        "3373": "H33.11",
        "3374": "H33.12",
        "3375": "H33.19",
        "3376": "H33.21",
        "3377": "H33.22",
        "3378": "H33.30",
        "3379": "H33.31",
        "3380": "H33.32",
        "3381": "H33.33",
        "3382": "H33.40",
        "3383": "H33.41",
        "3384": "H33.42",
        "3385": "H33.43",
        "3386": "H33.8",
        "3387": "H34.01",
        "3388": "H34.02",
        "3389": "H34.03",
        "3390": "H34.12",
        "3391": "H34.13",
        "3392": "H34.21",
        "3393": "H34.23",
        "3394": "H34.81",
        "3395": "H34.82",
        "3396": "H34.83",
        "3397": "H34.9",
        "3398": "H35.00",
        "3399": "H35.01",
        "3400": "H35.02",
        "3401": "H35.03",
        "3402": "H35.04",
        "3403": "H35.05",
        "3404": "H35.06",
        "3405": "H35.07",
        "3406": "H35.09",
        "3407": "H35.10",
        "3408": "H35.11",
        "3409": "H35.12",
        "3410": "H35.13",
        "3411": "H35.14",
        "3412": "H35.15",
        "3413": "H35.16",
        "3414": "H35.17",
        "3415": "H35.20",
        "3416": "H35.21",
        "3417": "H35.22",
        "3418": "H35.31",
        "3419": "H35.33",
        "3420": "H35.34",
        "3421": "H35.35",
        "3422": "H35.36",
        "3423": "H35.37",
        "3424": "H35.38",
        "3425": "H35.40",
        "3426": "H35.41",
        "3427": "H35.42",
        "3428": "H35.43",
        "3429": "H35.44",
        "3430": "H35.45",
        "3431": "H35.46",
        "3432": "H35.50",
        "3433": "H35.53",
        "3434": "H35.54",
        "3435": "H35.60",
        "3436": "H35.71",
        "3437": "H35.72",
        "3438": "H35.73",
        "3439": "H35.81",
        "3440": "H35.89",
        "3441": "H35.9",
        "3442": "H40.0",
        "3443": "H40.01",
        "3444": "H40.02",
        "3445": "H40.03",
        "3446": "H40.04",
        "3447": "H40.05",
        "3448": "H40.06",
        "3449": "H40.10",
        "3450": "H40.11",
        "3451": "H40.12",
        "3452": "H40.13",
        "3453": "H40.14",
        "3454": "H40.15",
        "3455": "H40.21",
        "3456": "H40.22",
        "3457": "H40.23",
        "3458": "H40.30",
        "3459": "H40.31",
        "3460": "H40.32",
        "3461": "H40.33",
        "3462": "H40.40",
        "3463": "H40.41",
        "3464": "H40.42",
        "3465": "H40.43",
        "3466": "H40.50",
        "3467": "H40.51",
        "3468": "H40.52",
        "3469": "H40.53",
        "3470": "H40.60",
        "3471": "H40.61",
        "3472": "H40.62",
        "3473": "H40.63",
        "3474": "H40.81",
        "3475": "H40.82",
        "3476": "H40.83",
        "3477": "H40.89",
        "3478": "H40.9",
        "3479": "H43.02",
        "3480": "H43.03",
        "3481": "H43.11",
        "3482": "H43.12",
        "3483": "H43.13",
        "3484": "H43.3",
        "3485": "H43.31",
        "3486": "H43.39",
        "3487": "H43.81",
        "3488": "H43.82",
        "3489": "H43.89",
        "3490": "H44.0",
        "3491": "H44.00",
        "3492": "H44.01",
        "3493": "H44.02",
        "3494": "H44.1",
        "3495": "H44.11",
        "3496": "H44.12",
        "3497": "H44.13",
        "3498": "H44.19",
        "3499": "H44.20",
        "3500": "H44.21",
        "3501": "H44.23",
        "3502": "H44.30",
        "3503": "H44.31",
        "3504": "H44.32",
        "3505": "H44.39",
        "3506": "H44.40",
        "3507": "H44.41",
        "3508": "H44.42",
        "3509": "H44.43",
        "3510": "H44.44",
        "3511": "H44.51",
        "3512": "H44.52",
        "3513": "H44.53",
        "3514": "H44.60",
        "3515": "H44.61",
        "3516": "H44.62",
        "3517": "H44.63",
        "3518": "H44.64",
        "3519": "H44.65",
        "3520": "H44.69",
        "3521": "H44.70",
        "3522": "H44.71",
        "3523": "H44.72",
        "3524": "H44.73",
        "3525": "H44.74",
        "3526": "H44.75",
        "3527": "H44.79",
        "3528": "H44.81",
        "3529": "H44.82",
        "3530": "H44.89",
        "3531": "H44.9",
        "3532": "H46.00",
        "3533": "H46.01",
        "3534": "H46.02",
        "3535": "H46.03",
        "3536": "H46.10",
        "3537": "H46.11",
        "3538": "H46.13",
        "3539": "H46.2",
        "3540": "H46.3",
        "3541": "H46.8",
        "3542": "H47.01",
        "3543": "H47.02",
        "3544": "H47.03",
        "3545": "H47.09",
        "3546": "H47.10",
        "3547": "H47.11",
        "3548": "H47.12",
        "3549": "H47.13",
        "3550": "H47.14",
        "3551": "H47.21",
        "3552": "H47.22",
        "3553": "H47.23",
        "3554": "H47.29",
        "3555": "H47.31",
        "3556": "H47.32",
        "3557": "H47.33",
        "3558": "H47.39",
        "3559": "H47.41",
        "3560": "H47.42",
        "3561": "H47.43",
        "3562": "H47.49",
        "3563": "H47.51",
        "3564": "H47.52",
        "3565": "H47.53",
        "3566": "H47.61",
        "3567": "H47.62",
        "3568": "H47.63",
        "3569": "H47.64",
        "3570": "H49.01",
        "3571": "H49.02",
        "3572": "H49.10",
        "3573": "H49.12",
        "3574": "H49.13",
        "3575": "H49.21",
        "3576": "H49.22",
        "3577": "H49.30",
        "3578": "H49.31",
        "3579": "H49.33",
        "3580": "H49.42",
        "3581": "H49.81",
        "3582": "H49.88",
        "3583": "H49.9",
        "3584": "H50.0",
        "3585": "H50.00",
        "3586": "H50.01",
        "3587": "H50.02",
        "3588": "H50.03",
        "3589": "H50.04",
        "3590": "H50.05",
        "3591": "H50.06",
        "3592": "H50.07",
        "3593": "H50.11",
        "3594": "H50.12",
        "3595": "H50.14",
        "3596": "H50.15",
        "3597": "H50.16",
        "3598": "H50.17",
        "3599": "H50.18",
        "3600": "H50.21",
        "3601": "H50.22",
        "3602": "H50.30",
        "3603": "H50.33",
        "3604": "H50.34",
        "3605": "H50.40",
        "3606": "H50.41",
        "3607": "H50.42",
        "3608": "H50.43",
        "3609": "H50.5",
        "3610": "H50.52",
        "3611": "H50.53",
        "3612": "H50.61",
        "3613": "H50.81",
        "3614": "H50.89",
        "3615": "H50.9",
        "3616": "H51.0",
        "3617": "H51.20",
        "3618": "H51.21",
        "3619": "H51.22",
        "3620": "H51.9",
        "3621": "H52.00",
        "3622": "H52.01",
        "3623": "H52.03",
        "3624": "H52.1",
        "3625": "H52.10",
        "3626": "H52.11",
        "3627": "H52.12",
        "3628": "H52.13",
        "3629": "H52.2",
        "3630": "H52.20",
        "3631": "H52.21",
        "3632": "H52.22",
        "3633": "H52.4",
        "3634": "H52.51",
        "3635": "H52.52",
        "3636": "H52.53",
        "3637": "H52.6",
        "3638": "H52.7",
        "3639": "H53.0",
        "3640": "H53.00",
        "3641": "H53.01",
        "3642": "H53.02",
        "3643": "H53.03",
        "3644": "H53.1",
        "3645": "H53.11",
        "3646": "H53.12",
        "3647": "H53.13",
        "3648": "H53.14",
        "3649": "H53.15",
        "3650": "H53.19",
        "3651": "H53.2",
        "3652": "H53.30",
        "3653": "H53.31",
        "3654": "H53.32",
        "3655": "H53.33",
        "3656": "H53.34",
        "3657": "H53.4",
        "3658": "H53.40",
        "3659": "H53.41",
        "3660": "H53.42",
        "3661": "H53.43",
        "3662": "H53.45",
        "3663": "H53.46",
        "3664": "H53.47",
        "3665": "H53.48",
        "3666": "H53.50",
        "3667": "H53.52",
        "3668": "H53.53",
        "3669": "H53.54",
        "3670": "H53.59",
        "3671": "H53.60",
        "3672": "H53.62",
        "3673": "H53.69",
        "3674": "H53.71",
        "3675": "H53.72",
        "3676": "H53.8",
        "3677": "H53.9",
        "3678": "H54.0",
        "3679": "H54.10",
        "3680": "H54.11",
        "3681": "H54.2",
        "3682": "H54.3",
        "3683": "H54.4",
        "3684": "H54.40",
        "3685": "H54.41",
        "3686": "H54.5",
        "3687": "H54.51",
        "3688": "H54.52",
        "3689": "H54.6",
        "3690": "H54.60",
        "3691": "H54.61",
        "3692": "H54.62",
        "3693": "H54.7",
        "3694": "H55.00",
        "3695": "H55.01",
        "3696": "H55.03",
        "3697": "H55.81",
        "3698": "H57.01",
        "3699": "H57.02",
        "3700": "H57.03",
        "3701": "H57.04",
        "3702": "H57.05",
        "3703": "H57.09",
        "3704": "H57.1",
        "3705": "H57.8",
        "3706": "H59.01",
        "3707": "H59.02",
        "3708": "H59.03",
        "3709": "H59.09",
        "3710": "H59.11",
        "3711": "H59.12",
        "3712": "H59.21",
        "3713": "H59.22",
        "3714": "H59.31",
        "3715": "H59.32",
        "3716": "H59.40",
        "3717": "H59.8",
        "3718": "H59.81",
        "3719": "H59.88",
        "3720": "H59.89",
        "3721": "H60.0",
        "3722": "H60.00",
        "3723": "H60.02",
        "3724": "H60.03",
        "3725": "H60.1",
        "3726": "H60.11",
        "3727": "H60.12",
        "3728": "H60.13",
        "3729": "H60.20",
        "3730": "H60.23",
        "3731": "H60.3",
        "3732": "H60.31",
        "3733": "H60.32",
        "3734": "H60.33",
        "3735": "H60.39",
        "3736": "H60.41",
        "3737": "H60.42",
        "3738": "H60.43",
        "3739": "H60.50",
        "3740": "H60.51",
        "3741": "H60.52",
        "3742": "H60.53",
        "3743": "H60.54",
        "3744": "H60.55",
        "3745": "H60.59",
        "3746": "H60.60",
        "3747": "H60.63",
        "3748": "H60.8X",
        "3749": "H60.9",
        "3750": "H60.90",
        "3751": "H60.92",
        "3752": "H60.93",
        "3753": "H61.00",
        "3754": "H61.01",
        "3755": "H61.03",
        "3756": "H61.1",
        "3757": "H61.10",
        "3758": "H61.11",
        "3759": "H61.12",
        "3760": "H61.19",
        "3761": "H61.2",
        "3762": "H61.22",
        "3763": "H61.30",
        "3764": "H61.31",
        "3765": "H61.32",
        "3766": "H61.39",
        "3767": "H61.81",
        "3768": "H61.89",
        "3769": "H61.90",
        "3770": "H61.91",
        "3771": "H61.92",
        "3772": "H62.0",
        "3773": "H62.1",
        "3774": "H62.40",
        "3775": "H62.41",
        "3776": "H62.42",
        "3777": "H62.8X",
        "3778": "H65.00",
        "3779": "H65.02",
        "3780": "H65.04",
        "3781": "H65.05",
        "3782": "H65.07",
        "3783": "H65.11",
        "3784": "H65.19",
        "3785": "H65.20",
        "3786": "H65.21",
        "3787": "H65.22",
        "3788": "H65.23",
        "3789": "H65.31",
        "3790": "H65.33",
        "3791": "H65.41",
        "3792": "H65.49",
        "3793": "H65.9",
        "3794": "H65.90",
        "3795": "H65.92",
        "3796": "H65.93",
        "3797": "H66.0",
        "3798": "H66.00",
        "3799": "H66.01",
        "3800": "H66.10",
        "3801": "H66.11",
        "3802": "H66.13",
        "3803": "H66.21",
        "3804": "H66.3X",
        "3805": "H66.4",
        "3806": "H66.42",
        "3807": "H66.43",
        "3808": "H66.9",
        "3809": "H66.90",
        "3810": "H66.91",
        "3811": "H66.92",
        "3812": "H66.93",
        "3813": "H67.0",
        "3814": "H67.1",
        "3815": "H67.3",
        "3816": "H67.9",
        "3817": "H68.00",
        "3818": "H68.01",
        "3819": "H68.02",
        "3820": "H68.1",
        "3821": "H68.10",
        "3822": "H68.11",
        "3823": "H68.12",
        "3824": "H68.13",
        "3825": "H69.00",
        "3826": "H69.01",
        "3827": "H69.80",
        "3828": "H69.81",
        "3829": "H69.9",
        "3830": "H69.92",
        "3831": "H70.00",
        "3832": "H70.01",
        "3833": "H70.09",
        "3834": "H70.20",
        "3835": "H70.21",
        "3836": "H70.22",
        "3837": "H70.81",
        "3838": "H70.89",
        "3839": "H70.9",
        "3840": "H70.90",
        "3841": "H70.92",
        "3842": "H71.00",
        "3843": "H71.01",
        "3844": "H71.02",
        "3845": "H71.03",
        "3846": "H71.11",
        "3847": "H71.12",
        "3848": "H71.13",
        "3849": "H71.20",
        "3850": "H71.21",
        "3851": "H71.22",
        "3852": "H71.23",
        "3853": "H71.33",
        "3854": "H71.90",
        "3855": "H71.92",
        "3856": "H71.93",
        "3857": "H72.00",
        "3858": "H72.03",
        "3859": "H72.10",
        "3860": "H72.11",
        "3861": "H72.12",
        "3862": "H72.13",
        "3863": "H72.2X",
        "3864": "H72.81",
        "3865": "H72.82",
        "3866": "H72.9",
        "3867": "H72.90",
        "3868": "H72.93",
        "3869": "H73.00",
        "3870": "H73.01",
        "3871": "H73.09",
        "3872": "H73.11",
        "3873": "H73.12",
        "3874": "H73.13",
        "3875": "H73.22",
        "3876": "H73.23",
        "3877": "H73.8",
        "3878": "H73.81",
        "3879": "H73.82",
        "3880": "H73.89",
        "3881": "H73.90",
        "3882": "H73.93",
        "3883": "H74.0",
        "3884": "H74.01",
        "3885": "H74.02",
        "3886": "H74.11",
        "3887": "H74.12",
        "3888": "H74.13",
        "3889": "H74.19",
        "3890": "H74.20",
        "3891": "H74.22",
        "3892": "H74.31",
        "3893": "H74.32",
        "3894": "H74.39",
        "3895": "H74.40",
        "3896": "H74.41",
        "3897": "H74.42",
        "3898": "H74.43",
        "3899": "H74.8X",
        "3900": "H74.90",
        "3901": "H74.91",
        "3902": "H74.93",
        "3903": "H75.01",
        "3904": "H75.02",
        "3905": "H75.03",
        "3906": "H75.80",
        "3907": "H75.81",
        "3908": "H75.82",
        "3909": "H75.83",
        "3910": "H80.00",
        "3911": "H80.01",
        "3912": "H80.02",
        "3913": "H80.03",
        "3914": "H80.11",
        "3915": "H80.13",
        "3916": "H80.21",
        "3917": "H80.23",
        "3918": "H80.80",
        "3919": "H80.81",
        "3920": "H80.82",
        "3921": "H80.9",
        "3922": "H80.90",
        "3923": "H80.92",
        "3924": "H80.93",
        "3925": "H81.01",
        "3926": "H81.02",
        "3927": "H81.03",
        "3928": "H81.1",
        "3929": "H81.10",
        "3930": "H81.12",
        "3931": "H81.13",
        "3932": "H81.2",
        "3933": "H81.20",
        "3934": "H81.3",
        "3935": "H81.31",
        "3936": "H81.39",
        "3937": "H81.42",
        "3938": "H81.43",
        "3939": "H81.49",
        "3940": "H81.8X",
        "3941": "H81.90",
        "3942": "H81.93",
        "3943": "H82.2",
        "3944": "H82.3",
        "3945": "H82.9",
        "3946": "H83.09",
        "3947": "H83.11",
        "3948": "H83.12",
        "3949": "H83.13",
        "3950": "H83.19",
        "3951": "H83.2X",
        "3952": "H83.3X",
        "3953": "H83.8X",
        "3954": "H83.90",
        "3955": "H83.92",
        "3956": "H90.0",
        "3957": "H90.11",
        "3958": "H90.2",
        "3959": "H90.41",
        "3960": "H90.5",
        "3961": "H90.6",
        "3962": "H90.8",
        "3963": "H91.0",
        "3964": "H91.01",
        "3965": "H91.02",
        "3966": "H91.03",
        "3967": "H91.10",
        "3968": "H91.11",
        "3969": "H91.12",
        "3970": "H91.13",
        "3971": "H91.22",
        "3972": "H91.23",
        "3973": "H91.3",
        "3974": "H91.8",
        "3975": "H91.8X",
        "3976": "H91.9",
        "3977": "H91.90",
        "3978": "H91.91",
        "3979": "H91.92",
        "3980": "H91.93",
        "3981": "H92.0",
        "3982": "H92.01",
        "3983": "H92.02",
        "3984": "H92.03",
        "3985": "H92.1",
        "3986": "H92.10",
        "3987": "H92.11",
        "3988": "H92.13",
        "3989": "H92.20",
        "3990": "H92.22",
        "3991": "H92.23",
        "3992": "H93.0",
        "3993": "H93.01",
        "3994": "H93.09",
        "3995": "H93.1",
        "3996": "H93.12",
        "3997": "H93.19",
        "3998": "H93.2",
        "3999": "H93.21",
        "4000": "H93.22",
        "4001": "H93.23",
        "4002": "H93.24",
        "4003": "H93.29",
        "4004": "H93.3X",
        "4005": "H93.4",
        "4006": "H93.8X",
        "4007": "H93.9",
        "4008": "H93.90",
        "4009": "H93.92",
        "4010": "H93.93",
        "4011": "H94.00",
        "4012": "H94.01",
        "4013": "H94.02",
        "4014": "H94.82",
        "4015": "H94.83",
        "4016": "H95.00",
        "4017": "H95.02",
        "4018": "H95.11",
        "4019": "H95.12",
        "4020": "H95.13",
        "4021": "H95.19",
        "4022": "H95.21",
        "4023": "H95.22",
        "4024": "H95.31",
        "4025": "H95.41",
        "4026": "H95.42",
        "4027": "H95.81",
        "4028": "H95.88",
        "4029": "H95.89",
        "4030": "I01.1",
        "4031": "I01.2",
        "4032": "I01.8",
        "4033": "I01.9",
        "4034": "I05.0",
        "4035": "I05.1",
        "4036": "I05.2",
        "4037": "I05.8",
        "4038": "I05.9",
        "4039": "I06.0",
        "4040": "I06.1",
        "4041": "I06.2",
        "4042": "I06.9",
        "4043": "I07.8",
        "4044": "I07.9",
        "4045": "I08.0",
        "4046": "I08.3",
        "4047": "I09.1",
        "4048": "I09.89",
        "4049": "I11.0",
        "4050": "I11.9",
        "4051": "I12.0",
        "4052": "I12.9",
        "4053": "I13.10",
        "4054": "I13.11",
        "4055": "I13.2",
        "4056": "I15.1",
        "4057": "I15.2",
        "4058": "I15.8",
        "4059": "I15.9",
        "4060": "I20.0",
        "4061": "I20.1",
        "4062": "I20.8",
        "4063": "I20.9",
        "4064": "I21.01",
        "4065": "I21.02",
        "4066": "I21.19",
        "4067": "I21.21",
        "4068": "I21.29",
        "4069": "I21.3",
        "4070": "I21.4",
        "4071": "I22.0",
        "4072": "I22.1",
        "4073": "I22.8",
        "4074": "I23.0",
        "4075": "I23.1",
        "4076": "I23.2",
        "4077": "I23.4",
        "4078": "I24.1",
        "4079": "I24.9",
        "4080": "I25.10",
        "4081": "I25.11",
        "4082": "I25.2",
        "4083": "I25.3",
        "4084": "I25.41",
        "4085": "I25.5",
        "4086": "I25.6",
        "4087": "I25.70",
        "4088": "I25.71",
        "4089": "I25.72",
        "4090": "I25.73",
        "4091": "I25.75",
        "4092": "I25.76",
        "4093": "I25.79",
        "4094": "I25.81",
        "4095": "I25.84",
        "4096": "I25.89",
        "4097": "I25.9",
        "4098": "I26.01",
        "4099": "I26.09",
        "4100": "I26.90",
        "4101": "I26.92",
        "4102": "I26.99",
        "4103": "I27.81",
        "4104": "I27.89",
        "4105": "I28.1",
        "4106": "I28.9",
        "4107": "I30.0",
        "4108": "I30.1",
        "4109": "I30.8",
        "4110": "I30.9",
        "4111": "I31.0",
        "4112": "I31.1",
        "4113": "I31.3",
        "4114": "I31.9",
        "4115": "I33.9",
        "4116": "I34.0",
        "4117": "I34.2",
        "4118": "I34.8",
        "4119": "I34.9",
        "4120": "I35.1",
        "4121": "I35.2",
        "4122": "I35.8",
        "4123": "I36.0",
        "4124": "I36.1",
        "4125": "I36.2",
        "4126": "I36.8",
        "4127": "I36.9",
        "4128": "I37.0",
        "4129": "I37.1",
        "4130": "I37.2",
        "4131": "I40.0",
        "4132": "I40.9",
        "4133": "I42.1",
        "4134": "I42.2",
        "4135": "I42.3",
        "4136": "I42.4",
        "4137": "I42.6",
        "4138": "I42.8",
        "4139": "I42.9",
        "4140": "I44.0",
        "4141": "I44.1",
        "4142": "I44.4",
        "4143": "I44.69",
        "4144": "I45.0",
        "4145": "I45.10",
        "4146": "I45.19",
        "4147": "I45.2",
        "4148": "I45.3",
        "4149": "I45.4",
        "4150": "I45.6",
        "4151": "I45.81",
        "4152": "I45.89",
        "4153": "I46.8",
        "4154": "I46.9",
        "4155": "I48.1",
        "4156": "I48.2",
        "4157": "I48.3",
        "4158": "I48.91",
        "4159": "I48.92",
        "4160": "I49.02",
        "4161": "I49.1",
        "4162": "I49.3",
        "4163": "I49.40",
        "4164": "I49.49",
        "4165": "I49.5",
        "4166": "I49.8",
        "4167": "I49.9",
        "4168": "I50.0",
        "4169": "I50.20",
        "4170": "I50.21",
        "4171": "I50.23",
        "4172": "I50.30",
        "4173": "I50.31",
        "4174": "I50.32",
        "4175": "I50.40",
        "4176": "I50.41",
        "4177": "I50.42",
        "4178": "I51.0",
        "4179": "I51.3",
        "4180": "I51.4",
        "4181": "I51.5",
        "4182": "I51.6",
        "4183": "I51.7",
        "4184": "I51.81",
        "4185": "I51.89",
        "4186": "I60.00",
        "4187": "I60.01",
        "4188": "I60.02",
        "4189": "I60.11",
        "4190": "I60.21",
        "4191": "I60.22",
        "4192": "I60.30",
        "4193": "I60.31",
        "4194": "I60.32",
        "4195": "I60.4",
        "4196": "I60.50",
        "4197": "I60.51",
        "4198": "I60.52",
        "4199": "I60.6",
        "4200": "I60.7",
        "4201": "I60.8",
        "4202": "I60.9",
        "4203": "I61.0",
        "4204": "I61.1",
        "4205": "I61.3",
        "4206": "I61.8",
        "4207": "I62.01",
        "4208": "I62.03",
        "4209": "I62.9",
        "4210": "I63.00",
        "4211": "I63.01",
        "4212": "I63.02",
        "4213": "I63.03",
        "4214": "I63.09",
        "4215": "I63.11",
        "4216": "I63.12",
        "4217": "I63.13",
        "4218": "I63.19",
        "4219": "I63.21",
        "4220": "I63.22",
        "4221": "I63.23",
        "4222": "I63.29",
        "4223": "I63.30",
        "4224": "I63.31",
        "4225": "I63.32",
        "4226": "I63.33",
        "4227": "I63.34",
        "4228": "I63.39",
        "4229": "I63.41",
        "4230": "I63.43",
        "4231": "I63.44",
        "4232": "I63.49",
        "4233": "I63.51",
        "4234": "I63.52",
        "4235": "I63.53",
        "4236": "I63.54",
        "4237": "I63.59",
        "4238": "I63.6",
        "4239": "I63.9",
        "4240": "I65.01",
        "4241": "I65.02",
        "4242": "I65.09",
        "4243": "I65.22",
        "4244": "I65.8",
        "4245": "I65.9",
        "4246": "I66.01",
        "4247": "I66.02",
        "4248": "I66.12",
        "4249": "I66.21",
        "4250": "I66.22",
        "4251": "I66.29",
        "4252": "I67.0",
        "4253": "I67.1",
        "4254": "I67.2",
        "4255": "I67.3",
        "4256": "I67.5",
        "4257": "I67.81",
        "4258": "I67.82",
        "4259": "I67.83",
        "4260": "I67.84",
        "4261": "I67.89",
        "4262": "I67.9",
        "4263": "I68.2",
        "4264": "I69.00",
        "4265": "I69.02",
        "4266": "I69.03",
        "4267": "I69.04",
        "4268": "I69.05",
        "4269": "I69.06",
        "4270": "I69.09",
        "4271": "I69.10",
        "4272": "I69.11",
        "4273": "I69.12",
        "4274": "I69.13",
        "4275": "I69.14",
        "4276": "I69.15",
        "4277": "I69.16",
        "4278": "I69.19",
        "4279": "I69.20",
        "4280": "I69.22",
        "4281": "I69.23",
        "4282": "I69.24",
        "4283": "I69.25",
        "4284": "I69.26",
        "4285": "I69.29",
        "4286": "I69.31",
        "4287": "I69.32",
        "4288": "I69.33",
        "4289": "I69.34",
        "4290": "I69.35",
        "4291": "I69.36",
        "4292": "I69.39",
        "4293": "I69.80",
        "4294": "I69.82",
        "4295": "I69.83",
        "4296": "I69.84",
        "4297": "I69.85",
        "4298": "I69.86",
        "4299": "I69.89",
        "4300": "I69.90",
        "4301": "I69.92",
        "4302": "I69.93",
        "4303": "I69.94",
        "4304": "I69.95",
        "4305": "I69.96",
        "4306": "I69.99",
        "4307": "I70.20",
        "4308": "I70.21",
        "4309": "I70.22",
        "4310": "I70.23",
        "4311": "I70.24",
        "4312": "I70.25",
        "4313": "I70.26",
        "4314": "I70.29",
        "4315": "I70.30",
        "4316": "I70.31",
        "4317": "I70.32",
        "4318": "I70.33",
        "4319": "I70.34",
        "4320": "I70.35",
        "4321": "I70.36",
        "4322": "I70.39",
        "4323": "I70.40",
        "4324": "I70.41",
        "4325": "I70.42",
        "4326": "I70.43",
        "4327": "I70.44",
        "4328": "I70.45",
        "4329": "I70.46",
        "4330": "I70.49",
        "4331": "I70.50",
        "4332": "I70.51",
        "4333": "I70.52",
        "4334": "I70.53",
        "4335": "I70.54",
        "4336": "I70.56",
        "4337": "I70.59",
        "4338": "I70.60",
        "4339": "I70.61",
        "4340": "I70.62",
        "4341": "I70.63",
        "4342": "I70.64",
        "4343": "I70.65",
        "4344": "I70.66",
        "4345": "I70.69",
        "4346": "I70.70",
        "4347": "I70.71",
        "4348": "I70.72",
        "4349": "I70.73",
        "4350": "I70.74",
        "4351": "I70.75",
        "4352": "I70.76",
        "4353": "I70.79",
        "4354": "I70.91",
        "4355": "I71.00",
        "4356": "I71.01",
        "4357": "I71.03",
        "4358": "I71.2",
        "4359": "I71.4",
        "4360": "I71.6",
        "4361": "I71.9",
        "4362": "I72.0",
        "4363": "I72.1",
        "4364": "I72.3",
        "4365": "I72.4",
        "4366": "I72.8",
        "4367": "I72.9",
        "4368": "I73.00",
        "4369": "I73.1",
        "4370": "I73.81",
        "4371": "I73.89",
        "4372": "I73.9",
        "4373": "I74.01",
        "4374": "I74.09",
        "4375": "I74.10",
        "4376": "I74.11",
        "4377": "I74.2",
        "4378": "I74.4",
        "4379": "I74.5",
        "4380": "I74.8",
        "4381": "I75.01",
        "4382": "I75.02",
        "4383": "I75.89",
        "4384": "I77.0",
        "4385": "I77.2",
        "4386": "I77.3",
        "4387": "I77.4",
        "4388": "I77.5",
        "4389": "I77.6",
        "4390": "I77.71",
        "4391": "I77.73",
        "4392": "I77.74",
        "4393": "I77.81",
        "4394": "I77.9",
        "4395": "I78.0",
        "4396": "I78.1",
        "4397": "I78.9",
        "4398": "I79.0",
        "4399": "I80.01",
        "4400": "I80.02",
        "4401": "I80.03",
        "4402": "I80.1",
        "4403": "I80.11",
        "4404": "I80.2",
        "4405": "I80.20",
        "4406": "I80.22",
        "4407": "I80.23",
        "4408": "I80.29",
        "4409": "I80.3",
        "4410": "I80.8",
        "4411": "I80.9",
        "4412": "I82.0",
        "4413": "I82.1",
        "4414": "I82.21",
        "4415": "I82.22",
        "4416": "I82.29",
        "4417": "I82.3",
        "4418": "I82.40",
        "4419": "I82.41",
        "4420": "I82.42",
        "4421": "I82.43",
        "4422": "I82.44",
        "4423": "I82.49",
        "4424": "I82.4Y",
        "4425": "I82.4Z",
        "4426": "I82.50",
        "4427": "I82.51",
        "4428": "I82.52",
        "4429": "I82.53",
        "4430": "I82.54",
        "4431": "I82.59",
        "4432": "I82.5Y",
        "4433": "I82.5Z",
        "4434": "I82.60",
        "4435": "I82.61",
        "4436": "I82.62",
        "4437": "I82.70",
        "4438": "I82.71",
        "4439": "I82.72",
        "4440": "I82.81",
        "4441": "I82.9",
        "4442": "I82.90",
        "4443": "I82.91",
        "4444": "I82.A1",
        "4445": "I82.B1",
        "4446": "I82.B2",
        "4447": "I82.C2",
        "4448": "I83.00",
        "4449": "I83.01",
        "4450": "I83.02",
        "4451": "I83.10",
        "4452": "I83.11",
        "4453": "I83.20",
        "4454": "I83.21",
        "4455": "I83.22",
        "4456": "I83.81",
        "4457": "I83.89",
        "4458": "I83.90",
        "4459": "I83.91",
        "4460": "I83.92",
        "4461": "I83.93",
        "4462": "I84.1",
        "4463": "I85.01",
        "4464": "I85.11",
        "4465": "I86.0",
        "4466": "I86.1",
        "4467": "I86.3",
        "4468": "I86.4",
        "4469": "I86.8",
        "4470": "I87.00",
        "4471": "I87.01",
        "4472": "I87.02",
        "4473": "I87.03",
        "4474": "I87.09",
        "4475": "I87.2",
        "4476": "I87.30",
        "4477": "I87.31",
        "4478": "I87.32",
        "4479": "I87.33",
        "4480": "I87.39",
        "4481": "I87.9",
        "4482": "I88.1",
        "4483": "I88.8",
        "4484": "I88.9",
        "4485": "I89.0",
        "4486": "I89.1",
        "4487": "I89.9",
        "4488": "I95.1",
        "4489": "I95.2",
        "4490": "I95.3",
        "4491": "I95.81",
        "4492": "I95.89",
        "4493": "I97.0",
        "4494": "I97.11",
        "4495": "I97.12",
        "4496": "I97.13",
        "4497": "I97.19",
        "4498": "I97.2",
        "4499": "I97.41",
        "4500": "I97.61",
        "4501": "I97.62",
        "4502": "I97.79",
        "4503": "I97.81",
        "4504": "I97.82",
        "4505": "I97.88",
        "4506": "I99.8",
        "4507": "J01.01",
        "4508": "J01.10",
        "4509": "J01.11",
        "4510": "J01.2",
        "4511": "J01.21",
        "4512": "J01.3",
        "4513": "J01.30",
        "4514": "J01.31",
        "4515": "J01.80",
        "4516": "J01.9",
        "4517": "J01.91",
        "4518": "J02.0",
        "4519": "J02.8",
        "4520": "J02.9",
        "4521": "J03.8",
        "4522": "J03.81",
        "4523": "J03.9",
        "4524": "J03.90",
        "4525": "J03.91",
        "4526": "J04.0",
        "4527": "J04.1",
        "4528": "J04.10",
        "4529": "J04.2",
        "4530": "J05.10",
        "4531": "J05.11",
        "4532": "J06.0",
        "4533": "J06.9",
        "4534": "J09.X3",
        "4535": "J09.X9",
        "4536": "J10.00",
        "4537": "J10.01",
        "4538": "J10.08",
        "4539": "J10.1",
        "4540": "J10.2",
        "4541": "J10.4",
        "4542": "J10.81",
        "4543": "J10.82",
        "4544": "J10.89",
        "4545": "J11.00",
        "4546": "J11.08",
        "4547": "J11.2",
        "4548": "J11.82",
        "4549": "J11.83",
        "4550": "J12.1",
        "4551": "J12.3",
        "4552": "J12.81",
        "4553": "J12.89",
        "4554": "J12.9",
        "4555": "J15.0",
        "4556": "J15.1",
        "4557": "J15.20",
        "4558": "J15.21",
        "4559": "J15.29",
        "4560": "J15.4",
        "4561": "J15.5",
        "4562": "J15.6",
        "4563": "J15.7",
        "4564": "J15.8",
        "4565": "J15.9",
        "4566": "J16.0",
        "4567": "J16.8",
        "4568": "J18.0",
        "4569": "J18.1",
        "4570": "J18.8",
        "4571": "J18.9",
        "4572": "J20.0",
        "4573": "J20.2",
        "4574": "J20.3",
        "4575": "J20.4",
        "4576": "J20.6",
        "4577": "J20.8",
        "4578": "J20.9",
        "4579": "J21.0",
        "4580": "J21.9",
        "4581": "J30.0",
        "4582": "J30.1",
        "4583": "J30.4",
        "4584": "J30.5",
        "4585": "J30.81",
        "4586": "J31.0",
        "4587": "J31.1",
        "4588": "J32.2",
        "4589": "J32.3",
        "4590": "J32.8",
        "4591": "J32.9",
        "4592": "J33.1",
        "4593": "J33.8",
        "4594": "J33.9",
        "4595": "J34.0",
        "4596": "J34.1",
        "4597": "J34.2",
        "4598": "J34.3",
        "4599": "J34.8",
        "4600": "J34.89",
        "4601": "J34.9",
        "4602": "J35.01",
        "4603": "J35.02",
        "4604": "J35.1",
        "4605": "J35.3",
        "4606": "J35.9",
        "4607": "J37.0",
        "4608": "J38.00",
        "4609": "J38.1",
        "4610": "J38.3",
        "4611": "J38.4",
        "4612": "J38.5",
        "4613": "J38.6",
        "4614": "J38.7",
        "4615": "J39.1",
        "4616": "J39.2",
        "4617": "J39.3",
        "4618": "J39.8",
        "4619": "J39.9",
        "4620": "J41.0",
        "4621": "J41.1",
        "4622": "J41.8",
        "4623": "J43.1",
        "4624": "J43.2",
        "4625": "J43.9",
        "4626": "J44.0",
        "4627": "J44.9",
        "4628": "J45.20",
        "4629": "J45.30",
        "4630": "J45.42",
        "4631": "J45.50",
        "4632": "J45.90",
        "4633": "J45.99",
        "4634": "J47.0",
        "4635": "J62.0",
        "4636": "J63.3",
        "4637": "J63.5",
        "4638": "J63.6",
        "4639": "J66.0",
        "4640": "J66.2",
        "4641": "J66.8",
        "4642": "J67.0",
        "4643": "J67.1",
        "4644": "J67.2",
        "4645": "J67.4",
        "4646": "J67.5",
        "4647": "J67.6",
        "4648": "J67.7",
        "4649": "J67.8",
        "4650": "J67.9",
        "4651": "J68.0",
        "4652": "J68.1",
        "4653": "J68.4",
        "4654": "J68.9",
        "4655": "J69.0",
        "4656": "J69.8",
        "4657": "J70.0",
        "4658": "J70.1",
        "4659": "J70.2",
        "4660": "J70.4",
        "4661": "J70.5",
        "4662": "J70.8",
        "4663": "J70.9",
        "4664": "J81.0",
        "4665": "J84.01",
        "4666": "J84.09",
        "4667": "J84.1",
        "4668": "J84.11",
        "4669": "J84.17",
        "4670": "J84.2",
        "4671": "J84.8",
        "4672": "J84.81",
        "4673": "J84.84",
        "4674": "J84.9",
        "4675": "J85.0",
        "4676": "J85.1",
        "4677": "J85.3",
        "4678": "J86.0",
        "4679": "J86.9",
        "4680": "J91.8",
        "4681": "J92.9",
        "4682": "J93.0",
        "4683": "J93.12",
        "4684": "J93.82",
        "4685": "J93.83",
        "4686": "J94.0",
        "4687": "J94.2",
        "4688": "J94.8",
        "4689": "J94.9",
        "4690": "J95.00",
        "4691": "J95.01",
        "4692": "J95.02",
        "4693": "J95.09",
        "4694": "J95.2",
        "4695": "J95.4",
        "4696": "J95.61",
        "4697": "J95.62",
        "4698": "J95.81",
        "4699": "J95.83",
        "4700": "J95.85",
        "4701": "J95.89",
        "4702": "J96.00",
        "4703": "J96.01",
        "4704": "J96.02",
        "4705": "J96.10",
        "4706": "J96.12",
        "4707": "J96.20",
        "4708": "J96.90",
        "4709": "J96.91",
        "4710": "J96.92",
        "4711": "J98.19",
        "4712": "J98.2",
        "4713": "J98.3",
        "4714": "J98.5",
        "4715": "J98.6",
        "4716": "K00.0",
        "4717": "K00.1",
        "4718": "K00.2",
        "4719": "K00.4",
        "4720": "K00.5",
        "4721": "K00.6",
        "4722": "K00.7",
        "4723": "K00.8",
        "4724": "K00.9",
        "4725": "K01.0",
        "4726": "K01.1",
        "4727": "K02.2",
        "4728": "K02.3",
        "4729": "K02.51",
        "4730": "K02.52",
        "4731": "K02.53",
        "4732": "K02.61",
        "4733": "K02.62",
        "4734": "K02.9",
        "4735": "K03.0",
        "4736": "K03.1",
        "4737": "K03.2",
        "4738": "K03.4",
        "4739": "K03.7",
        "4740": "K03.9",
        "4741": "K04.0",
        "4742": "K04.3",
        "4743": "K04.5",
        "4744": "K04.7",
        "4745": "K04.8",
        "4746": "K04.90",
        "4747": "K04.99",
        "4748": "K05.0",
        "4749": "K05.01",
        "4750": "K05.1",
        "4751": "K05.10",
        "4752": "K05.2",
        "4753": "K05.20",
        "4754": "K05.21",
        "4755": "K05.22",
        "4756": "K05.30",
        "4757": "K05.31",
        "4758": "K05.32",
        "4759": "K05.4",
        "4760": "K05.5",
        "4761": "K05.6",
        "4762": "K06.0",
        "4763": "K06.1",
        "4764": "K06.2",
        "4765": "K06.8",
        "4766": "K08.0",
        "4767": "K08.10",
        "4768": "K08.11",
        "4769": "K08.12",
        "4770": "K08.13",
        "4771": "K08.19",
        "4772": "K08.20",
        "4773": "K08.21",
        "4774": "K08.24",
        "4775": "K08.25",
        "4776": "K08.26",
        "4777": "K08.3",
        "4778": "K08.40",
        "4779": "K08.41",
        "4780": "K08.42",
        "4781": "K08.43",
        "4782": "K08.49",
        "4783": "K08.52",
        "4784": "K08.53",
        "4785": "K08.54",
        "4786": "K08.55",
        "4787": "K08.56",
        "4788": "K08.59",
        "4789": "K08.8",
        "4790": "K08.9",
        "4791": "K09.1",
        "4792": "K09.9",
        "4793": "K10.8",
        "4794": "K11.0",
        "4795": "K11.1",
        "4796": "K11.2",
        "4797": "K11.20",
        "4798": "K11.22",
        "4799": "K11.23",
        "4800": "K11.3",
        "4801": "K11.4",
        "4802": "K11.5",
        "4803": "K11.6",
        "4804": "K11.7",
        "4805": "K11.8",
        "4806": "K11.9",
        "4807": "K12.0",
        "4808": "K12.1",
        "4809": "K12.2",
        "4810": "K12.31",
        "4811": "K12.32",
        "4812": "K12.39",
        "4813": "K13.0",
        "4814": "K13.2",
        "4815": "K13.22",
        "4816": "K13.29",
        "4817": "K13.3",
        "4818": "K13.4",
        "4819": "K13.5",
        "4820": "K13.7",
        "4821": "K13.70",
        "4822": "K14.0",
        "4823": "K14.1",
        "4824": "K14.2",
        "4825": "K14.4",
        "4826": "K14.5",
        "4827": "K14.6",
        "4828": "K14.9",
        "4829": "K20.0",
        "4830": "K20.8",
        "4831": "K20.9",
        "4832": "K21.9",
        "4833": "K22.0",
        "4834": "K22.11",
        "4835": "K22.2",
        "4836": "K22.3",
        "4837": "K22.4",
        "4838": "K22.5",
        "4839": "K22.70",
        "4840": "K22.71",
        "4841": "K22.8",
        "4842": "K22.9",
        "4843": "K25.0",
        "4844": "K25.1",
        "4845": "K25.2",
        "4846": "K25.3",
        "4847": "K25.4",
        "4848": "K25.6",
        "4849": "K25.9",
        "4850": "K26.0",
        "4851": "K26.1",
        "4852": "K26.2",
        "4853": "K26.7",
        "4854": "K27.1",
        "4855": "K27.3",
        "4856": "K27.5",
        "4857": "K27.7",
        "4858": "K28.1",
        "4859": "K28.2",
        "4860": "K28.3",
        "4861": "K28.4",
        "4862": "K28.5",
        "4863": "K28.6",
        "4864": "K28.7",
        "4865": "K28.9",
        "4866": "K29.00",
        "4867": "K29.01",
        "4868": "K29.1",
        "4869": "K29.20",
        "4870": "K29.30",
        "4871": "K29.31",
        "4872": "K29.41",
        "4873": "K29.5",
        "4874": "K29.50",
        "4875": "K29.51",
        "4876": "K29.60",
        "4877": "K29.71",
        "4878": "K29.8",
        "4879": "K29.9",
        "4880": "K29.91",
        "4881": "K31.1",
        "4882": "K31.2",
        "4883": "K31.3",
        "4884": "K31.4",
        "4885": "K31.5",
        "4886": "K31.6",
        "4887": "K31.7",
        "4888": "K31.81",
        "4889": "K31.83",
        "4890": "K31.89",
        "4891": "K35.3",
        "4892": "K35.80",
        "4893": "K35.89",
        "4894": "K38.1",
        "4895": "K38.8",
        "4896": "K40.00",
        "4897": "K40.11",
        "4898": "K40.20",
        "4899": "K40.21",
        "4900": "K40.30",
        "4901": "K40.31",
        "4902": "K40.41",
        "4903": "K40.9",
        "4904": "K40.90",
        "4905": "K41.00",
        "4906": "K41.11",
        "4907": "K41.21",
        "4908": "K41.30",
        "4909": "K41.40",
        "4910": "K41.41",
        "4911": "K41.91",
        "4912": "K42.1",
        "4913": "K43.1",
        "4914": "K43.2",
        "4915": "K43.4",
        "4916": "K43.7",
        "4917": "K43.9",
        "4918": "K44.9",
        "4919": "K45.0",
        "4920": "K45.8",
        "4921": "K46.0",
        "4922": "K46.1",
        "4923": "K46.9",
        "4924": "K50.00",
        "4925": "K50.01",
        "4926": "K50.10",
        "4927": "K50.11",
        "4928": "K50.80",
        "4929": "K50.81",
        "4930": "K50.90",
        "4931": "K50.91",
        "4932": "K51.0",
        "4933": "K51.00",
        "4934": "K51.01",
        "4935": "K51.1",
        "4936": "K51.2",
        "4937": "K51.21",
        "4938": "K51.30",
        "4939": "K51.31",
        "4940": "K51.41",
        "4941": "K51.50",
        "4942": "K51.51",
        "4943": "K51.80",
        "4944": "K51.81",
        "4945": "K51.9",
        "4946": "K51.91",
        "4947": "K52.0",
        "4948": "K52.1",
        "4949": "K52.81",
        "4950": "K52.82",
        "4951": "K52.89",
        "4952": "K52.9",
        "4953": "K55.0",
        "4954": "K55.1",
        "4955": "K55.20",
        "4956": "K55.21",
        "4957": "K55.8",
        "4958": "K55.9",
        "4959": "K56.2",
        "4960": "K56.3",
        "4961": "K56.41",
        "4962": "K56.49",
        "4963": "K56.5",
        "4964": "K56.6",
        "4965": "K56.60",
        "4966": "K57.00",
        "4967": "K57.11",
        "4968": "K57.13",
        "4969": "K57.20",
        "4970": "K57.21",
        "4971": "K57.31",
        "4972": "K57.33",
        "4973": "K57.40",
        "4974": "K57.50",
        "4975": "K57.51",
        "4976": "K57.53",
        "4977": "K57.80",
        "4978": "K57.81",
        "4979": "K57.90",
        "4980": "K57.91",
        "4981": "K57.92",
        "4982": "K57.93",
        "4983": "K58.0",
        "4984": "K58.9",
        "4985": "K59.0",
        "4986": "K59.01",
        "4987": "K59.1",
        "4988": "K59.2",
        "4989": "K59.3",
        "4990": "K59.4",
        "4991": "K59.8",
        "4992": "K59.9",
        "4993": "K60.0",
        "4994": "K60.1",
        "4995": "K60.2",
        "4996": "K60.3",
        "4997": "K60.4",
        "4998": "K60.5",
        "4999": "K61.0",
        "5000": "K61.1",
        "5001": "K61.3",
        "5002": "K62.0",
        "5003": "K62.1",
        "5004": "K62.2",
        "5005": "K62.5",
        "5006": "K62.6",
        "5007": "K62.8",
        "5008": "K62.81",
        "5009": "K62.82",
        "5010": "K62.9",
        "5011": "K63.0",
        "5012": "K63.1",
        "5013": "K63.2",
        "5014": "K63.4",
        "5015": "K63.89",
        "5016": "K63.9",
        "5017": "K64.0",
        "5018": "K64.2",
        "5019": "K64.3",
        "5020": "K64.4",
        "5021": "K64.5",
        "5022": "K65.0",
        "5023": "K65.4",
        "5024": "K65.8",
        "5025": "K66.0",
        "5026": "K66.1",
        "5027": "K66.9",
        "5028": "K68.11",
        "5029": "K68.12",
        "5030": "K68.9",
        "5031": "K70.0",
        "5032": "K70.11",
        "5033": "K70.31",
        "5034": "K70.9",
        "5035": "K71.0",
        "5036": "K71.10",
        "5037": "K71.11",
        "5038": "K71.2",
        "5039": "K71.3",
        "5040": "K71.4",
        "5041": "K71.50",
        "5042": "K71.51",
        "5043": "K71.6",
        "5044": "K71.8",
        "5045": "K72.0",
        "5046": "K72.01",
        "5047": "K72.11",
        "5048": "K72.90",
        "5049": "K72.91",
        "5050": "K73.1",
        "5051": "K73.2",
        "5052": "K73.8",
        "5053": "K74.0",
        "5054": "K74.1",
        "5055": "K74.3",
        "5056": "K74.4",
        "5057": "K74.5",
        "5058": "K74.6",
        "5059": "K74.60",
        "5060": "K74.69",
        "5061": "K75.0",
        "5062": "K75.2",
        "5063": "K75.4",
        "5064": "K75.8",
        "5065": "K75.81",
        "5066": "K75.89",
        "5067": "K76.0",
        "5068": "K76.2",
        "5069": "K76.5",
        "5070": "K76.6",
        "5071": "K76.7",
        "5072": "K76.81",
        "5073": "K77.8",
        "5074": "K80.00",
        "5075": "K80.11",
        "5076": "K80.18",
        "5077": "K80.19",
        "5078": "K80.20",
        "5079": "K80.21",
        "5080": "K80.30",
        "5081": "K80.32",
        "5082": "K80.34",
        "5083": "K80.35",
        "5084": "K80.36",
        "5085": "K80.37",
        "5086": "K80.40",
        "5087": "K80.41",
        "5088": "K80.42",
        "5089": "K80.43",
        "5090": "K80.44",
        "5091": "K80.46",
        "5092": "K80.47",
        "5093": "K80.5",
        "5094": "K80.50",
        "5095": "K80.61",
        "5096": "K80.62",
        "5097": "K80.63",
        "5098": "K80.64",
        "5099": "K80.66",
        "5100": "K80.70",
        "5101": "K80.71",
        "5102": "K80.80",
        "5103": "K81.0",
        "5104": "K81.9",
        "5105": "K82.0",
        "5106": "K82.1",
        "5107": "K82.3",
        "5108": "K82.4",
        "5109": "K82.8",
        "5110": "K82.9",
        "5111": "K83.1",
        "5112": "K83.2",
        "5113": "K83.8",
        "5114": "K83.9",
        "5115": "K85.0",
        "5116": "K85.2",
        "5117": "K85.8",
        "5118": "K85.9",
        "5119": "K86.1",
        "5120": "K86.3",
        "5121": "K90.0",
        "5122": "K90.1",
        "5123": "K90.2",
        "5124": "K90.3",
        "5125": "K90.4",
        "5126": "K90.81",
        "5127": "K90.89",
        "5128": "K90.9",
        "5129": "K91.0",
        "5130": "K91.3",
        "5131": "K91.5",
        "5132": "K91.61",
        "5133": "K91.71",
        "5134": "K91.81",
        "5135": "K91.82",
        "5136": "K91.83",
        "5137": "K91.84",
        "5138": "K91.85",
        "5139": "K91.86",
        "5140": "K92.0",
        "5141": "K92.1",
        "5142": "K92.2",
        "5143": "K92.89",
        "5144": "K92.9",
        "5145": "K94.00",
        "5146": "K94.02",
        "5147": "K94.10",
        "5148": "K94.13",
        "5149": "K94.20",
        "5150": "K94.21",
        "5151": "K94.22",
        "5152": "K94.23",
        "5153": "K94.29",
        "5154": "K94.30",
        "5155": "K94.31",
        "5156": "K94.39",
        "5157": "K95.01",
        "5158": "K95.09",
        "5159": "K95.89",
        "5160": "L01.0",
        "5161": "L01.02",
        "5162": "L01.09",
        "5163": "L02.0",
        "5164": "L02.01",
        "5165": "L02.03",
        "5166": "L02.1",
        "5167": "L02.11",
        "5168": "L02.12",
        "5169": "L02.13",
        "5170": "L02.2",
        "5171": "L02.21",
        "5172": "L02.22",
        "5173": "L02.23",
        "5174": "L02.32",
        "5175": "L02.4",
        "5176": "L02.41",
        "5177": "L02.42",
        "5178": "L02.43",
        "5179": "L02.51",
        "5180": "L02.52",
        "5181": "L02.53",
        "5182": "L02.61",
        "5183": "L02.62",
        "5184": "L02.63",
        "5185": "L02.8",
        "5186": "L02.81",
        "5187": "L02.83",
        "5188": "L02.91",
        "5189": "L02.92",
        "5190": "L03.0",
        "5191": "L03.01",
        "5192": "L03.02",
        "5193": "L03.03",
        "5194": "L03.04",
        "5195": "L03.1",
        "5196": "L03.11",
        "5197": "L03.12",
        "5198": "L03.2",
        "5199": "L03.21",
        "5200": "L03.22",
        "5201": "L03.31",
        "5202": "L03.32",
        "5203": "L03.8",
        "5204": "L03.81",
        "5205": "L03.89",
        "5206": "L04.1",
        "5207": "L04.2",
        "5208": "L04.3",
        "5209": "L04.8",
        "5210": "L04.9",
        "5211": "L05.0",
        "5212": "L05.02",
        "5213": "L05.91",
        "5214": "L08.0",
        "5215": "L08.1",
        "5216": "L08.89",
        "5217": "L08.9",
        "5218": "L10.0",
        "5219": "L10.2",
        "5220": "L10.3",
        "5221": "L10.5",
        "5222": "L10.81",
        "5223": "L11.0",
        "5224": "L11.1",
        "5225": "L11.8",
        "5226": "L12.1",
        "5227": "L12.2",
        "5228": "L12.30",
        "5229": "L12.8",
        "5230": "L12.9",
        "5231": "L13.0",
        "5232": "L13.1",
        "5233": "L13.9",
        "5234": "L20.0",
        "5235": "L20.8",
        "5236": "L20.81",
        "5237": "L20.84",
        "5238": "L20.89",
        "5239": "L20.9",
        "5240": "L21.0",
        "5241": "L21.8",
        "5242": "L22.1",
        "5243": "L23.1",
        "5244": "L23.2",
        "5245": "L23.3",
        "5246": "L23.4",
        "5247": "L23.6",
        "5248": "L23.7",
        "5249": "L23.81",
        "5250": "L23.89",
        "5251": "L23.9",
        "5252": "L24.0",
        "5253": "L24.1",
        "5254": "L24.2",
        "5255": "L24.4",
        "5256": "L24.6",
        "5257": "L24.7",
        "5258": "L24.81",
        "5259": "L24.89",
        "5260": "L24.9",
        "5261": "L25.0",
        "5262": "L25.1",
        "5263": "L25.2",
        "5264": "L25.3",
        "5265": "L25.5",
        "5266": "L25.8",
        "5267": "L25.9",
        "5268": "L27.0",
        "5269": "L27.1",
        "5270": "L27.2",
        "5271": "L27.8",
        "5272": "L28.0",
        "5273": "L28.2",
        "5274": "L29.0",
        "5275": "L29.1",
        "5276": "L29.2",
        "5277": "L29.8",
        "5278": "L29.9",
        "5279": "L30.0",
        "5280": "L30.1",
        "5281": "L30.2",
        "5282": "L30.3",
        "5283": "L30.4",
        "5284": "L30.5",
        "5285": "L30.8",
        "5286": "L30.9",
        "5287": "L40.0",
        "5288": "L40.2",
        "5289": "L40.3",
        "5290": "L40.4",
        "5291": "L40.51",
        "5292": "L40.52",
        "5293": "L40.53",
        "5294": "L40.54",
        "5295": "L40.59",
        "5296": "L40.8",
        "5297": "L40.9",
        "5298": "L41.0",
        "5299": "L41.4",
        "5300": "L41.8",
        "5301": "L41.9",
        "5302": "L43.1",
        "5303": "L43.2",
        "5304": "L43.8",
        "5305": "L43.9",
        "5306": "L44.0",
        "5307": "L44.1",
        "5308": "L44.2",
        "5309": "L44.3",
        "5310": "L44.4",
        "5311": "L44.8",
        "5312": "L44.9",
        "5313": "L49.1",
        "5314": "L49.3",
        "5315": "L49.4",
        "5316": "L49.8",
        "5317": "L49.9",
        "5318": "L50.0",
        "5319": "L50.1",
        "5320": "L50.6",
        "5321": "L50.8",
        "5322": "L50.9",
        "5323": "L51.0",
        "5324": "L51.1",
        "5325": "L51.2",
        "5326": "L51.8",
        "5327": "L51.9",
        "5328": "L53.0",
        "5329": "L53.9",
        "5330": "L55.0",
        "5331": "L55.1",
        "5332": "L55.2",
        "5333": "L55.9",
        "5334": "L56.0",
        "5335": "L56.1",
        "5336": "L56.3",
        "5337": "L56.4",
        "5338": "L56.9",
        "5339": "L57.0",
        "5340": "L57.1",
        "5341": "L57.2",
        "5342": "L57.5",
        "5343": "L57.8",
        "5344": "L57.9",
        "5345": "L58.0",
        "5346": "L58.9",
        "5347": "L59.8",
        "5348": "L59.9",
        "5349": "L60.0",
        "5350": "L60.1",
        "5351": "L60.2",
        "5352": "L60.3",
        "5353": "L60.4",
        "5354": "L60.5",
        "5355": "L60.8",
        "5356": "L60.9",
        "5357": "L63.0",
        "5358": "L63.1",
        "5359": "L63.2",
        "5360": "L63.8",
        "5361": "L63.9",
        "5362": "L64.8",
        "5363": "L65.0",
        "5364": "L65.1",
        "5365": "L65.8",
        "5366": "L65.9",
        "5367": "L66.0",
        "5368": "L66.1",
        "5369": "L66.4",
        "5370": "L66.8",
        "5371": "L67.0",
        "5372": "L67.1",
        "5373": "L67.8",
        "5374": "L67.9",
        "5375": "L68.0",
        "5376": "L68.1",
        "5377": "L68.8",
        "5378": "L68.9",
        "5379": "L70.0",
        "5380": "L70.2",
        "5381": "L70.3",
        "5382": "L70.4",
        "5383": "L70.5",
        "5384": "L70.8",
        "5385": "L70.9",
        "5386": "L71.0",
        "5387": "L71.1",
        "5388": "L71.8",
        "5389": "L71.9",
        "5390": "L72.0",
        "5391": "L72.1",
        "5392": "L72.11",
        "5393": "L72.12",
        "5394": "L72.2",
        "5395": "L72.3",
        "5396": "L72.8",
        "5397": "L72.9",
        "5398": "L73.0",
        "5399": "L73.1",
        "5400": "L73.2",
        "5401": "L73.8",
        "5402": "L73.9",
        "5403": "L74.1",
        "5404": "L74.2",
        "5405": "L74.3",
        "5406": "L74.4",
        "5407": "L74.51",
        "5408": "L74.52",
        "5409": "L74.9",
        "5410": "L75.1",
        "5411": "L75.8",
        "5412": "L75.9",
        "5413": "L76.02",
        "5414": "L76.11",
        "5415": "L76.22",
        "5416": "L76.82",
        "5417": "L80.9",
        "5418": "L81.1",
        "5419": "L81.3",
        "5420": "L81.4",
        "5421": "L81.5",
        "5422": "L81.6",
        "5423": "L81.7",
        "5424": "L81.8",
        "5425": "L81.9",
        "5426": "L82.0",
        "5427": "L82.1",
        "5428": "L85.0",
        "5429": "L85.1",
        "5430": "L85.3",
        "5431": "L85.8",
        "5432": "L85.9",
        "5433": "L87.0",
        "5434": "L87.1",
        "5435": "L87.8",
        "5436": "L89.00",
        "5437": "L89.01",
        "5438": "L89.02",
        "5439": "L89.10",
        "5440": "L89.11",
        "5441": "L89.12",
        "5442": "L89.13",
        "5443": "L89.14",
        "5444": "L89.15",
        "5445": "L89.20",
        "5446": "L89.21",
        "5447": "L89.22",
        "5448": "L89.30",
        "5449": "L89.31",
        "5450": "L89.32",
        "5451": "L89.40",
        "5452": "L89.41",
        "5453": "L89.43",
        "5454": "L89.44",
        "5455": "L89.50",
        "5456": "L89.51",
        "5457": "L89.52",
        "5458": "L89.60",
        "5459": "L89.61",
        "5460": "L89.62",
        "5461": "L89.81",
        "5462": "L89.89",
        "5463": "L89.90",
        "5464": "L89.92",
        "5465": "L89.94",
        "5466": "L90.0",
        "5467": "L90.1",
        "5468": "L90.3",
        "5469": "L90.5",
        "5470": "L90.6",
        "5471": "L90.8",
        "5472": "L90.9",
        "5473": "L91.0",
        "5474": "L91.8",
        "5475": "L92.0",
        "5476": "L92.1",
        "5477": "L92.2",
        "5478": "L92.3",
        "5479": "L92.8",
        "5480": "L93.0",
        "5481": "L93.1",
        "5482": "L93.2",
        "5483": "L94.0",
        "5484": "L94.1",
        "5485": "L94.4",
        "5486": "L94.5",
        "5487": "L94.6",
        "5488": "L94.9",
        "5489": "L95.9",
        "5490": "L97.10",
        "5491": "L97.11",
        "5492": "L97.12",
        "5493": "L97.20",
        "5494": "L97.21",
        "5495": "L97.22",
        "5496": "L97.30",
        "5497": "L97.31",
        "5498": "L97.32",
        "5499": "L97.40",
        "5500": "L97.41",
        "5501": "L97.42",
        "5502": "L97.50",
        "5503": "L97.51",
        "5504": "L97.52",
        "5505": "L97.80",
        "5506": "L97.81",
        "5507": "L97.82",
        "5508": "L97.90",
        "5509": "L97.91",
        "5510": "L97.92",
        "5511": "L98.0",
        "5512": "L98.1",
        "5513": "L98.3",
        "5514": "L98.4",
        "5515": "L98.41",
        "5516": "L98.42",
        "5517": "L98.49",
        "5518": "L98.6",
        "5519": "L98.8",
        "5520": "L98.9",
        "5521": "M00.00",
        "5522": "M00.01",
        "5523": "M00.02",
        "5524": "M00.03",
        "5525": "M00.04",
        "5526": "M00.05",
        "5527": "M00.06",
        "5528": "M00.07",
        "5529": "M00.08",
        "5530": "M00.09",
        "5531": "M00.11",
        "5532": "M00.12",
        "5533": "M00.13",
        "5534": "M00.14",
        "5535": "M00.15",
        "5536": "M00.16",
        "5537": "M00.17",
        "5538": "M00.18",
        "5539": "M00.19",
        "5540": "M00.20",
        "5541": "M00.21",
        "5542": "M00.23",
        "5543": "M00.24",
        "5544": "M00.25",
        "5545": "M00.26",
        "5546": "M00.27",
        "5547": "M00.28",
        "5548": "M00.8",
        "5549": "M00.81",
        "5550": "M00.82",
        "5551": "M00.83",
        "5552": "M00.84",
        "5553": "M00.85",
        "5554": "M00.86",
        "5555": "M00.87",
        "5556": "M00.88",
        "5557": "M00.89",
        "5558": "M01.X1",
        "5559": "M01.X2",
        "5560": "M01.X3",
        "5561": "M01.X4",
        "5562": "M01.X5",
        "5563": "M01.X6",
        "5564": "M01.X7",
        "5565": "M02.00",
        "5566": "M02.01",
        "5567": "M02.02",
        "5568": "M02.03",
        "5569": "M02.04",
        "5570": "M02.05",
        "5571": "M02.06",
        "5572": "M02.08",
        "5573": "M02.09",
        "5574": "M02.10",
        "5575": "M02.11",
        "5576": "M02.12",
        "5577": "M02.13",
        "5578": "M02.14",
        "5579": "M02.15",
        "5580": "M02.16",
        "5581": "M02.17",
        "5582": "M02.19",
        "5583": "M02.20",
        "5584": "M02.21",
        "5585": "M02.22",
        "5586": "M02.23",
        "5587": "M02.24",
        "5588": "M02.25",
        "5589": "M02.26",
        "5590": "M02.27",
        "5591": "M02.28",
        "5592": "M02.30",
        "5593": "M02.31",
        "5594": "M02.32",
        "5595": "M02.33",
        "5596": "M02.34",
        "5597": "M02.35",
        "5598": "M02.36",
        "5599": "M02.37",
        "5600": "M02.38",
        "5601": "M02.80",
        "5602": "M02.81",
        "5603": "M02.84",
        "5604": "M02.85",
        "5605": "M02.86",
        "5606": "M02.87",
        "5607": "M02.9",
        "5608": "M05.00",
        "5609": "M05.01",
        "5610": "M05.02",
        "5611": "M05.03",
        "5612": "M05.05",
        "5613": "M05.06",
        "5614": "M05.07",
        "5615": "M05.09",
        "5616": "M05.10",
        "5617": "M05.11",
        "5618": "M05.12",
        "5619": "M05.13",
        "5620": "M05.14",
        "5621": "M05.15",
        "5622": "M05.16",
        "5623": "M05.17",
        "5624": "M05.19",
        "5625": "M05.20",
        "5626": "M05.21",
        "5627": "M05.22",
        "5628": "M05.23",
        "5629": "M05.24",
        "5630": "M05.25",
        "5631": "M05.26",
        "5632": "M05.27",
        "5633": "M05.29",
        "5634": "M05.3",
        "5635": "M05.30",
        "5636": "M05.31",
        "5637": "M05.32",
        "5638": "M05.33",
        "5639": "M05.34",
        "5640": "M05.35",
        "5641": "M05.36",
        "5642": "M05.37",
        "5643": "M05.39",
        "5644": "M05.40",
        "5645": "M05.41",
        "5646": "M05.42",
        "5647": "M05.43",
        "5648": "M05.44",
        "5649": "M05.45",
        "5650": "M05.46",
        "5651": "M05.47",
        "5652": "M05.49",
        "5653": "M05.51",
        "5654": "M05.52",
        "5655": "M05.53",
        "5656": "M05.54",
        "5657": "M05.55",
        "5658": "M05.56",
        "5659": "M05.57",
        "5660": "M05.61",
        "5661": "M05.62",
        "5662": "M05.63",
        "5663": "M05.64",
        "5664": "M05.65",
        "5665": "M05.66",
        "5666": "M05.67",
        "5667": "M05.71",
        "5668": "M05.72",
        "5669": "M05.73",
        "5670": "M05.74",
        "5671": "M05.75",
        "5672": "M05.76",
        "5673": "M05.77",
        "5674": "M05.81",
        "5675": "M05.82",
        "5676": "M05.83",
        "5677": "M05.84",
        "5678": "M05.85",
        "5679": "M05.86",
        "5680": "M05.87",
        "5681": "M05.89",
        "5682": "M05.9",
        "5683": "M06.01",
        "5684": "M06.02",
        "5685": "M06.03",
        "5686": "M06.04",
        "5687": "M06.05",
        "5688": "M06.06",
        "5689": "M06.07",
        "5690": "M06.08",
        "5691": "M06.09",
        "5692": "M06.1",
        "5693": "M06.21",
        "5694": "M06.22",
        "5695": "M06.23",
        "5696": "M06.24",
        "5697": "M06.25",
        "5698": "M06.26",
        "5699": "M06.27",
        "5700": "M06.28",
        "5701": "M06.31",
        "5702": "M06.32",
        "5703": "M06.33",
        "5704": "M06.34",
        "5705": "M06.35",
        "5706": "M06.36",
        "5707": "M06.37",
        "5708": "M06.4",
        "5709": "M06.81",
        "5710": "M06.82",
        "5711": "M06.83",
        "5712": "M06.84",
        "5713": "M06.85",
        "5714": "M06.86",
        "5715": "M06.87",
        "5716": "M06.88",
        "5717": "M06.9",
        "5718": "M07.60",
        "5719": "M07.61",
        "5720": "M07.62",
        "5721": "M07.63",
        "5722": "M07.64",
        "5723": "M07.65",
        "5724": "M07.66",
        "5725": "M07.67",
        "5726": "M07.68",
        "5727": "M07.69",
        "5728": "M08.0",
        "5729": "M08.01",
        "5730": "M08.02",
        "5731": "M08.03",
        "5732": "M08.04",
        "5733": "M08.05",
        "5734": "M08.06",
        "5735": "M08.07",
        "5736": "M08.09",
        "5737": "M08.1",
        "5738": "M08.21",
        "5739": "M08.22",
        "5740": "M08.23",
        "5741": "M08.24",
        "5742": "M08.25",
        "5743": "M08.26",
        "5744": "M08.27",
        "5745": "M08.3",
        "5746": "M08.41",
        "5747": "M08.42",
        "5748": "M08.43",
        "5749": "M08.45",
        "5750": "M08.46",
        "5751": "M08.47",
        "5752": "M08.80",
        "5753": "M08.81",
        "5754": "M08.82",
        "5755": "M08.83",
        "5756": "M08.84",
        "5757": "M08.85",
        "5758": "M08.86",
        "5759": "M08.87",
        "5760": "M08.90",
        "5761": "M08.91",
        "5762": "M08.92",
        "5763": "M08.93",
        "5764": "M08.94",
        "5765": "M08.95",
        "5766": "M08.96",
        "5767": "M08.97",
        "5768": "M10.01",
        "5769": "M10.02",
        "5770": "M10.03",
        "5771": "M10.04",
        "5772": "M10.05",
        "5773": "M10.06",
        "5774": "M10.07",
        "5775": "M10.08",
        "5776": "M10.09",
        "5777": "M10.10",
        "5778": "M10.11",
        "5779": "M10.12",
        "5780": "M10.13",
        "5781": "M10.14",
        "5782": "M10.15",
        "5783": "M10.16",
        "5784": "M10.17",
        "5785": "M10.18",
        "5786": "M10.19",
        "5787": "M10.21",
        "5788": "M10.22",
        "5789": "M10.23",
        "5790": "M10.24",
        "5791": "M10.25",
        "5792": "M10.26",
        "5793": "M10.27",
        "5794": "M10.29",
        "5795": "M10.3",
        "5796": "M10.31",
        "5797": "M10.32",
        "5798": "M10.33",
        "5799": "M10.34",
        "5800": "M10.35",
        "5801": "M10.36",
        "5802": "M10.37",
        "5803": "M10.39",
        "5804": "M10.40",
        "5805": "M10.41",
        "5806": "M10.42",
        "5807": "M10.43",
        "5808": "M10.44",
        "5809": "M10.45",
        "5810": "M10.46",
        "5811": "M10.47",
        "5812": "M10.48",
        "5813": "M10.9",
        "5814": "M11.00",
        "5815": "M11.01",
        "5816": "M11.02",
        "5817": "M11.03",
        "5818": "M11.04",
        "5819": "M11.05",
        "5820": "M11.06",
        "5821": "M11.07",
        "5822": "M11.08",
        "5823": "M11.09",
        "5824": "M11.10",
        "5825": "M11.11",
        "5826": "M11.12",
        "5827": "M11.13",
        "5828": "M11.14",
        "5829": "M11.15",
        "5830": "M11.16",
        "5831": "M11.17",
        "5832": "M11.18",
        "5833": "M11.19",
        "5834": "M11.21",
        "5835": "M11.22",
        "5836": "M11.23",
        "5837": "M11.24",
        "5838": "M11.26",
        "5839": "M11.27",
        "5840": "M11.28",
        "5841": "M11.29",
        "5842": "M11.80",
        "5843": "M11.81",
        "5844": "M11.82",
        "5845": "M11.83",
        "5846": "M11.84",
        "5847": "M11.85",
        "5848": "M11.86",
        "5849": "M11.87",
        "5850": "M11.88",
        "5851": "M11.89",
        "5852": "M11.9",
        "5853": "M12.00",
        "5854": "M12.01",
        "5855": "M12.02",
        "5856": "M12.03",
        "5857": "M12.04",
        "5858": "M12.05",
        "5859": "M12.06",
        "5860": "M12.07",
        "5861": "M12.08",
        "5862": "M12.09",
        "5863": "M12.10",
        "5864": "M12.11",
        "5865": "M12.12",
        "5866": "M12.13",
        "5867": "M12.14",
        "5868": "M12.15",
        "5869": "M12.16",
        "5870": "M12.17",
        "5871": "M12.18",
        "5872": "M12.20",
        "5873": "M12.21",
        "5874": "M12.22",
        "5875": "M12.23",
        "5876": "M12.24",
        "5877": "M12.25",
        "5878": "M12.26",
        "5879": "M12.31",
        "5880": "M12.32",
        "5881": "M12.33",
        "5882": "M12.34",
        "5883": "M12.35",
        "5884": "M12.36",
        "5885": "M12.37",
        "5886": "M12.38",
        "5887": "M12.39",
        "5888": "M12.41",
        "5889": "M12.42",
        "5890": "M12.43",
        "5891": "M12.44",
        "5892": "M12.45",
        "5893": "M12.46",
        "5894": "M12.47",
        "5895": "M12.5",
        "5896": "M12.51",
        "5897": "M12.52",
        "5898": "M12.53",
        "5899": "M12.54",
        "5900": "M12.55",
        "5901": "M12.56",
        "5902": "M12.57",
        "5903": "M12.58",
        "5904": "M12.80",
        "5905": "M12.81",
        "5906": "M12.82",
        "5907": "M12.83",
        "5908": "M12.84",
        "5909": "M12.85",
        "5910": "M12.86",
        "5911": "M12.87",
        "5912": "M12.88",
        "5913": "M12.89",
        "5914": "M12.9",
        "5915": "M13.0",
        "5916": "M13.10",
        "5917": "M13.11",
        "5918": "M13.12",
        "5919": "M13.13",
        "5920": "M13.14",
        "5921": "M13.15",
        "5922": "M13.16",
        "5923": "M13.17",
        "5924": "M13.80",
        "5925": "M13.82",
        "5926": "M13.83",
        "5927": "M13.84",
        "5928": "M13.85",
        "5929": "M13.86",
        "5930": "M13.87",
        "5931": "M13.88",
        "5932": "M13.9",
        "5933": "M14.60",
        "5934": "M14.61",
        "5935": "M14.62",
        "5936": "M14.63",
        "5937": "M14.64",
        "5938": "M14.65",
        "5939": "M14.66",
        "5940": "M14.67",
        "5941": "M14.68",
        "5942": "M14.80",
        "5943": "M14.81",
        "5944": "M14.82",
        "5945": "M14.83",
        "5946": "M14.84",
        "5947": "M14.85",
        "5948": "M14.86",
        "5949": "M14.87",
        "5950": "M15.0",
        "5951": "M15.2",
        "5952": "M15.3",
        "5953": "M15.8",
        "5954": "M15.9",
        "5955": "M16.0",
        "5956": "M16.10",
        "5957": "M16.11",
        "5958": "M16.12",
        "5959": "M16.30",
        "5960": "M16.32",
        "5961": "M16.51",
        "5962": "M16.6",
        "5963": "M16.7",
        "5964": "M16.9",
        "5965": "M17.10",
        "5966": "M17.11",
        "5967": "M17.2",
        "5968": "M17.30",
        "5969": "M17.31",
        "5970": "M17.32",
        "5971": "M17.9",
        "5972": "M18.11",
        "5973": "M18.12",
        "5974": "M18.2",
        "5975": "M18.30",
        "5976": "M18.32",
        "5977": "M18.4",
        "5978": "M18.51",
        "5979": "M18.52",
        "5980": "M18.9",
        "5981": "M19.01",
        "5982": "M19.02",
        "5983": "M19.03",
        "5984": "M19.04",
        "5985": "M19.07",
        "5986": "M19.11",
        "5987": "M19.12",
        "5988": "M19.13",
        "5989": "M19.14",
        "5990": "M19.17",
        "5991": "M19.21",
        "5992": "M19.22",
        "5993": "M19.23",
        "5994": "M19.24",
        "5995": "M19.27",
        "5996": "M19.9",
        "5997": "M19.90",
        "5998": "M1A.00",
        "5999": "M1A.01",
        "6000": "M1A.02",
        "6001": "M1A.03",
        "6002": "M1A.04",
        "6003": "M1A.05",
        "6004": "M1A.06",
        "6005": "M1A.07",
        "6006": "M1A.08",
        "6007": "M1A.09",
        "6008": "M1A.10",
        "6009": "M1A.11",
        "6010": "M1A.12",
        "6011": "M1A.13",
        "6012": "M1A.14",
        "6013": "M1A.15",
        "6014": "M1A.16",
        "6015": "M1A.17",
        "6016": "M1A.18",
        "6017": "M1A.19",
        "6018": "M1A.20",
        "6019": "M1A.21",
        "6020": "M1A.22",
        "6021": "M1A.23",
        "6022": "M1A.24",
        "6023": "M1A.25",
        "6024": "M1A.26",
        "6025": "M1A.27",
        "6026": "M1A.29",
        "6027": "M1A.30",
        "6028": "M1A.31",
        "6029": "M1A.32",
        "6030": "M1A.33",
        "6031": "M1A.34",
        "6032": "M1A.35",
        "6033": "M1A.36",
        "6034": "M1A.37",
        "6035": "M1A.38",
        "6036": "M1A.40",
        "6037": "M1A.41",
        "6038": "M1A.42",
        "6039": "M1A.43",
        "6040": "M1A.44",
        "6041": "M1A.45",
        "6042": "M1A.46",
        "6043": "M1A.47",
        "6044": "M1A.48",
        "6045": "M1A.49",
        "6046": "M1A.9X",
        "6047": "M20.0",
        "6048": "M20.00",
        "6049": "M20.01",
        "6050": "M20.02",
        "6051": "M20.03",
        "6052": "M20.09",
        "6053": "M20.1",
        "6054": "M20.10",
        "6055": "M20.11",
        "6056": "M20.22",
        "6057": "M20.30",
        "6058": "M20.31",
        "6059": "M20.40",
        "6060": "M20.41",
        "6061": "M20.5X",
        "6062": "M20.60",
        "6063": "M20.61",
        "6064": "M21.02",
        "6065": "M21.05",
        "6066": "M21.06",
        "6067": "M21.07",
        "6068": "M21.12",
        "6069": "M21.15",
        "6070": "M21.16",
        "6071": "M21.17",
        "6072": "M21.20",
        "6073": "M21.21",
        "6074": "M21.22",
        "6075": "M21.23",
        "6076": "M21.24",
        "6077": "M21.25",
        "6078": "M21.26",
        "6079": "M21.27",
        "6080": "M21.33",
        "6081": "M21.37",
        "6082": "M21.4",
        "6083": "M21.40",
        "6084": "M21.41",
        "6085": "M21.42",
        "6086": "M21.51",
        "6087": "M21.52",
        "6088": "M21.53",
        "6089": "M21.54",
        "6090": "M21.6",
        "6091": "M21.6X",
        "6092": "M21.70",
        "6093": "M21.72",
        "6094": "M21.73",
        "6095": "M21.75",
        "6096": "M21.76",
        "6097": "M21.82",
        "6098": "M21.83",
        "6099": "M21.85",
        "6100": "M21.86",
        "6101": "M21.92",
        "6102": "M21.93",
        "6103": "M21.94",
        "6104": "M21.95",
        "6105": "M21.96",
        "6106": "M22.00",
        "6107": "M22.01",
        "6108": "M22.10",
        "6109": "M22.12",
        "6110": "M22.2",
        "6111": "M22.3X",
        "6112": "M22.40",
        "6113": "M22.41",
        "6114": "M22.8X",
        "6115": "M22.90",
        "6116": "M22.91",
        "6117": "M23.00",
        "6118": "M23.01",
        "6119": "M23.02",
        "6120": "M23.03",
        "6121": "M23.04",
        "6122": "M23.05",
        "6123": "M23.06",
        "6124": "M23.1",
        "6125": "M23.20",
        "6126": "M23.21",
        "6127": "M23.22",
        "6128": "M23.23",
        "6129": "M23.25",
        "6130": "M23.26",
        "6131": "M23.30",
        "6132": "M23.31",
        "6133": "M23.32",
        "6134": "M23.33",
        "6135": "M23.34",
        "6136": "M23.35",
        "6137": "M23.36",
        "6138": "M23.4",
        "6139": "M23.42",
        "6140": "M23.5",
        "6141": "M23.50",
        "6142": "M23.51",
        "6143": "M23.60",
        "6144": "M23.61",
        "6145": "M23.62",
        "6146": "M23.63",
        "6147": "M23.64",
        "6148": "M23.67",
        "6149": "M23.8",
        "6150": "M23.8X",
        "6151": "M23.90",
        "6152": "M24.02",
        "6153": "M24.03",
        "6154": "M24.04",
        "6155": "M24.05",
        "6156": "M24.07",
        "6157": "M24.11",
        "6158": "M24.12",
        "6159": "M24.13",
        "6160": "M24.14",
        "6161": "M24.15",
        "6162": "M24.17",
        "6163": "M24.21",
        "6164": "M24.22",
        "6165": "M24.23",
        "6166": "M24.24",
        "6167": "M24.25",
        "6168": "M24.27",
        "6169": "M24.28",
        "6170": "M24.30",
        "6171": "M24.31",
        "6172": "M24.32",
        "6173": "M24.33",
        "6174": "M24.34",
        "6175": "M24.35",
        "6176": "M24.36",
        "6177": "M24.37",
        "6178": "M24.40",
        "6179": "M24.41",
        "6180": "M24.42",
        "6181": "M24.43",
        "6182": "M24.44",
        "6183": "M24.45",
        "6184": "M24.46",
        "6185": "M24.47",
        "6186": "M24.50",
        "6187": "M24.51",
        "6188": "M24.52",
        "6189": "M24.54",
        "6190": "M24.55",
        "6191": "M24.56",
        "6192": "M24.57",
        "6193": "M24.6",
        "6194": "M24.60",
        "6195": "M24.61",
        "6196": "M24.62",
        "6197": "M24.63",
        "6198": "M24.64",
        "6199": "M24.65",
        "6200": "M24.66",
        "6201": "M24.67",
        "6202": "M24.80",
        "6203": "M24.81",
        "6204": "M24.82",
        "6205": "M24.83",
        "6206": "M24.85",
        "6207": "M24.87",
        "6208": "M24.9",
        "6209": "M25.00",
        "6210": "M25.01",
        "6211": "M25.02",
        "6212": "M25.03",
        "6213": "M25.04",
        "6214": "M25.05",
        "6215": "M25.06",
        "6216": "M25.07",
        "6217": "M25.10",
        "6218": "M25.11",
        "6219": "M25.12",
        "6220": "M25.13",
        "6221": "M25.14",
        "6222": "M25.15",
        "6223": "M25.16",
        "6224": "M25.17",
        "6225": "M25.2",
        "6226": "M25.20",
        "6227": "M25.22",
        "6228": "M25.23",
        "6229": "M25.24",
        "6230": "M25.25",
        "6231": "M25.26",
        "6232": "M25.27",
        "6233": "M25.28",
        "6234": "M25.30",
        "6235": "M25.31",
        "6236": "M25.32",
        "6237": "M25.33",
        "6238": "M25.34",
        "6239": "M25.36",
        "6240": "M25.37",
        "6241": "M25.4",
        "6242": "M25.41",
        "6243": "M25.42",
        "6244": "M25.43",
        "6245": "M25.44",
        "6246": "M25.45",
        "6247": "M25.46",
        "6248": "M25.47",
        "6249": "M25.48",
        "6250": "M25.5",
        "6251": "M25.51",
        "6252": "M25.52",
        "6253": "M25.53",
        "6254": "M25.55",
        "6255": "M25.56",
        "6256": "M25.57",
        "6257": "M25.6",
        "6258": "M25.60",
        "6259": "M25.61",
        "6260": "M25.63",
        "6261": "M25.64",
        "6262": "M25.65",
        "6263": "M25.66",
        "6264": "M25.67",
        "6265": "M25.71",
        "6266": "M25.72",
        "6267": "M25.73",
        "6268": "M25.74",
        "6269": "M25.75",
        "6270": "M25.76",
        "6271": "M25.77",
        "6272": "M25.78",
        "6273": "M25.80",
        "6274": "M25.81",
        "6275": "M25.82",
        "6276": "M25.83",
        "6277": "M25.84",
        "6278": "M25.85",
        "6279": "M25.87",
        "6280": "M25.9",
        "6281": "M26.00",
        "6282": "M26.02",
        "6283": "M26.03",
        "6284": "M26.06",
        "6285": "M26.07",
        "6286": "M26.10",
        "6287": "M26.11",
        "6288": "M26.12",
        "6289": "M26.21",
        "6290": "M26.22",
        "6291": "M26.23",
        "6292": "M26.24",
        "6293": "M26.31",
        "6294": "M26.33",
        "6295": "M26.36",
        "6296": "M26.37",
        "6297": "M26.39",
        "6298": "M26.4",
        "6299": "M26.50",
        "6300": "M26.53",
        "6301": "M26.55",
        "6302": "M26.59",
        "6303": "M26.61",
        "6304": "M26.69",
        "6305": "M26.70",
        "6306": "M26.73",
        "6307": "M26.79",
        "6308": "M26.81",
        "6309": "M26.89",
        "6310": "M27.0",
        "6311": "M27.1",
        "6312": "M27.2",
        "6313": "M27.3",
        "6314": "M27.40",
        "6315": "M27.49",
        "6316": "M27.59",
        "6317": "M27.61",
        "6318": "M27.62",
        "6319": "M27.69",
        "6320": "M27.8",
        "6321": "M30.0",
        "6322": "M30.1",
        "6323": "M30.2",
        "6324": "M30.8",
        "6325": "M31.1",
        "6326": "M31.2",
        "6327": "M31.30",
        "6328": "M31.4",
        "6329": "M31.5",
        "6330": "M31.6",
        "6331": "M31.7",
        "6332": "M31.8",
        "6333": "M31.9",
        "6334": "M32.0",
        "6335": "M32.10",
        "6336": "M32.11",
        "6337": "M32.13",
        "6338": "M32.14",
        "6339": "M32.8",
        "6340": "M32.9",
        "6341": "M33.00",
        "6342": "M33.01",
        "6343": "M33.02",
        "6344": "M33.09",
        "6345": "M33.19",
        "6346": "M33.20",
        "6347": "M33.21",
        "6348": "M33.29",
        "6349": "M33.90",
        "6350": "M33.91",
        "6351": "M33.92",
        "6352": "M33.99",
        "6353": "M34.81",
        "6354": "M34.83",
        "6355": "M34.9",
        "6356": "M35.0",
        "6357": "M35.00",
        "6358": "M35.02",
        "6359": "M35.03",
        "6360": "M35.04",
        "6361": "M35.2",
        "6362": "M35.3",
        "6363": "M35.4",
        "6364": "M35.5",
        "6365": "M35.6",
        "6366": "M35.7",
        "6367": "M35.8",
        "6368": "M35.9",
        "6369": "M36.1",
        "6370": "M36.2",
        "6371": "M36.3",
        "6372": "M36.4",
        "6373": "M36.8",
        "6374": "M40.00",
        "6375": "M40.03",
        "6376": "M40.04",
        "6377": "M40.05",
        "6378": "M40.12",
        "6379": "M40.15",
        "6380": "M40.20",
        "6381": "M40.29",
        "6382": "M40.35",
        "6383": "M40.37",
        "6384": "M40.45",
        "6385": "M40.46",
        "6386": "M40.47",
        "6387": "M40.55",
        "6388": "M40.56",
        "6389": "M40.57",
        "6390": "M41.00",
        "6391": "M41.02",
        "6392": "M41.03",
        "6393": "M41.04",
        "6394": "M41.05",
        "6395": "M41.07",
        "6396": "M41.08",
        "6397": "M41.11",
        "6398": "M41.12",
        "6399": "M41.20",
        "6400": "M41.22",
        "6401": "M41.23",
        "6402": "M41.34",
        "6403": "M41.35",
        "6404": "M41.40",
        "6405": "M41.41",
        "6406": "M41.43",
        "6407": "M41.44",
        "6408": "M41.45",
        "6409": "M41.46",
        "6410": "M41.50",
        "6411": "M41.52",
        "6412": "M41.53",
        "6413": "M41.54",
        "6414": "M41.55",
        "6415": "M41.56",
        "6416": "M41.80",
        "6417": "M41.83",
        "6418": "M41.85",
        "6419": "M41.87",
        "6420": "M42.00",
        "6421": "M42.01",
        "6422": "M42.02",
        "6423": "M42.05",
        "6424": "M42.07",
        "6425": "M42.09",
        "6426": "M42.11",
        "6427": "M42.12",
        "6428": "M42.13",
        "6429": "M42.14",
        "6430": "M42.15",
        "6431": "M42.16",
        "6432": "M42.17",
        "6433": "M42.18",
        "6434": "M42.19",
        "6435": "M43.00",
        "6436": "M43.01",
        "6437": "M43.02",
        "6438": "M43.03",
        "6439": "M43.06",
        "6440": "M43.08",
        "6441": "M43.09",
        "6442": "M43.10",
        "6443": "M43.11",
        "6444": "M43.13",
        "6445": "M43.15",
        "6446": "M43.16",
        "6447": "M43.18",
        "6448": "M43.24",
        "6449": "M43.25",
        "6450": "M43.27",
        "6451": "M43.4",
        "6452": "M43.5X",
        "6453": "M43.6",
        "6454": "M43.8X",
        "6455": "M43.9",
        "6456": "M45.0",
        "6457": "M45.1",
        "6458": "M45.4",
        "6459": "M45.5",
        "6460": "M45.6",
        "6461": "M45.7",
        "6462": "M45.9",
        "6463": "M46.00",
        "6464": "M46.03",
        "6465": "M46.04",
        "6466": "M46.05",
        "6467": "M46.07",
        "6468": "M46.09",
        "6469": "M46.21",
        "6470": "M46.22",
        "6471": "M46.24",
        "6472": "M46.25",
        "6473": "M46.27",
        "6474": "M46.28",
        "6475": "M46.30",
        "6476": "M46.31",
        "6477": "M46.33",
        "6478": "M46.35",
        "6479": "M46.36",
        "6480": "M46.37",
        "6481": "M46.39",
        "6482": "M46.4",
        "6483": "M46.43",
        "6484": "M46.44",
        "6485": "M46.45",
        "6486": "M46.46",
        "6487": "M46.47",
        "6488": "M46.52",
        "6489": "M46.53",
        "6490": "M46.54",
        "6491": "M46.56",
        "6492": "M46.57",
        "6493": "M46.80",
        "6494": "M46.81",
        "6495": "M46.82",
        "6496": "M46.84",
        "6497": "M46.85",
        "6498": "M46.86",
        "6499": "M46.87",
        "6500": "M46.88",
        "6501": "M46.89",
        "6502": "M46.92",
        "6503": "M46.94",
        "6504": "M46.95",
        "6505": "M46.96",
        "6506": "M46.97",
        "6507": "M46.99",
        "6508": "M47.01",
        "6509": "M47.02",
        "6510": "M47.10",
        "6511": "M47.12",
        "6512": "M47.13",
        "6513": "M47.14",
        "6514": "M47.15",
        "6515": "M47.20",
        "6516": "M47.22",
        "6517": "M47.23",
        "6518": "M47.24",
        "6519": "M47.25",
        "6520": "M47.26",
        "6521": "M47.27",
        "6522": "M47.28",
        "6523": "M47.81",
        "6524": "M47.89",
        "6525": "M47.9",
        "6526": "M48.0",
        "6527": "M48.01",
        "6528": "M48.02",
        "6529": "M48.03",
        "6530": "M48.05",
        "6531": "M48.07",
        "6532": "M48.08",
        "6533": "M48.1",
        "6534": "M48.10",
        "6535": "M48.12",
        "6536": "M48.13",
        "6537": "M48.14",
        "6538": "M48.15",
        "6539": "M48.16",
        "6540": "M48.17",
        "6541": "M48.19",
        "6542": "M48.20",
        "6543": "M48.21",
        "6544": "M48.25",
        "6545": "M48.26",
        "6546": "M48.31",
        "6547": "M48.33",
        "6548": "M48.34",
        "6549": "M48.35",
        "6550": "M48.36",
        "6551": "M48.37",
        "6552": "M48.4",
        "6553": "M48.40",
        "6554": "M48.41",
        "6555": "M48.43",
        "6556": "M48.44",
        "6557": "M48.45",
        "6558": "M48.46",
        "6559": "M48.47",
        "6560": "M48.48",
        "6561": "M48.50",
        "6562": "M48.51",
        "6563": "M48.52",
        "6564": "M48.53",
        "6565": "M48.54",
        "6566": "M48.55",
        "6567": "M48.56",
        "6568": "M48.57",
        "6569": "M48.58",
        "6570": "M48.8X",
        "6571": "M48.9",
        "6572": "M49.81",
        "6573": "M49.82",
        "6574": "M49.83",
        "6575": "M49.84",
        "6576": "M49.85",
        "6577": "M49.86",
        "6578": "M49.87",
        "6579": "M49.88",
        "6580": "M50.00",
        "6581": "M50.01",
        "6582": "M50.03",
        "6583": "M50.12",
        "6584": "M50.13",
        "6585": "M50.20",
        "6586": "M50.21",
        "6587": "M50.23",
        "6588": "M50.30",
        "6589": "M50.31",
        "6590": "M50.33",
        "6591": "M50.81",
        "6592": "M50.83",
        "6593": "M50.92",
        "6594": "M50.93",
        "6595": "M51.0",
        "6596": "M51.04",
        "6597": "M51.05",
        "6598": "M51.06",
        "6599": "M51.1",
        "6600": "M51.14",
        "6601": "M51.15",
        "6602": "M51.2",
        "6603": "M51.24",
        "6604": "M51.27",
        "6605": "M51.35",
        "6606": "M51.37",
        "6607": "M51.45",
        "6608": "M51.46",
        "6609": "M51.47",
        "6610": "M51.8",
        "6611": "M51.84",
        "6612": "M51.86",
        "6613": "M51.87",
        "6614": "M51.9",
        "6615": "M53.0",
        "6616": "M53.2X",
        "6617": "M53.3",
        "6618": "M53.82",
        "6619": "M53.83",
        "6620": "M53.84",
        "6621": "M53.85",
        "6622": "M53.86",
        "6623": "M53.87",
        "6624": "M53.88",
        "6625": "M54.00",
        "6626": "M54.01",
        "6627": "M54.02",
        "6628": "M54.04",
        "6629": "M54.07",
        "6630": "M54.08",
        "6631": "M54.09",
        "6632": "M54.14",
        "6633": "M54.16",
        "6634": "M54.17",
        "6635": "M54.18",
        "6636": "M54.2",
        "6637": "M54.30",
        "6638": "M54.31",
        "6639": "M54.32",
        "6640": "M54.41",
        "6641": "M54.42",
        "6642": "M54.5",
        "6643": "M54.6",
        "6644": "M54.8",
        "6645": "M54.81",
        "6646": "M54.89",
        "6647": "M54.9",
        "6648": "M60.0",
        "6649": "M60.00",
        "6650": "M60.01",
        "6651": "M60.02",
        "6652": "M60.03",
        "6653": "M60.04",
        "6654": "M60.05",
        "6655": "M60.06",
        "6656": "M60.07",
        "6657": "M60.09",
        "6658": "M60.10",
        "6659": "M60.11",
        "6660": "M60.12",
        "6661": "M60.13",
        "6662": "M60.14",
        "6663": "M60.15",
        "6664": "M60.16",
        "6665": "M60.17",
        "6666": "M60.18",
        "6667": "M60.2",
        "6668": "M60.20",
        "6669": "M60.21",
        "6670": "M60.22",
        "6671": "M60.24",
        "6672": "M60.25",
        "6673": "M60.27",
        "6674": "M60.28",
        "6675": "M60.80",
        "6676": "M60.81",
        "6677": "M60.82",
        "6678": "M60.83",
        "6679": "M60.84",
        "6680": "M60.85",
        "6681": "M60.86",
        "6682": "M60.87",
        "6683": "M60.88",
        "6684": "M61.01",
        "6685": "M61.02",
        "6686": "M61.03",
        "6687": "M61.04",
        "6688": "M61.05",
        "6689": "M61.06",
        "6690": "M61.10",
        "6691": "M61.11",
        "6692": "M61.12",
        "6693": "M61.13",
        "6694": "M61.14",
        "6695": "M61.15",
        "6696": "M61.16",
        "6697": "M61.17",
        "6698": "M61.18",
        "6699": "M61.19",
        "6700": "M61.21",
        "6701": "M61.22",
        "6702": "M61.23",
        "6703": "M61.24",
        "6704": "M61.25",
        "6705": "M61.26",
        "6706": "M61.27",
        "6707": "M61.29",
        "6708": "M61.30",
        "6709": "M61.31",
        "6710": "M61.33",
        "6711": "M61.34",
        "6712": "M61.35",
        "6713": "M61.36",
        "6714": "M61.37",
        "6715": "M61.39",
        "6716": "M61.4",
        "6717": "M61.41",
        "6718": "M61.42",
        "6719": "M61.43",
        "6720": "M61.45",
        "6721": "M61.46",
        "6722": "M61.47",
        "6723": "M61.50",
        "6724": "M61.51",
        "6725": "M61.52",
        "6726": "M61.53",
        "6727": "M61.54",
        "6728": "M61.55",
        "6729": "M61.56",
        "6730": "M61.57",
        "6731": "M61.9",
        "6732": "M62.00",
        "6733": "M62.01",
        "6734": "M62.02",
        "6735": "M62.03",
        "6736": "M62.04",
        "6737": "M62.05",
        "6738": "M62.06",
        "6739": "M62.07",
        "6740": "M62.08",
        "6741": "M62.11",
        "6742": "M62.12",
        "6743": "M62.13",
        "6744": "M62.14",
        "6745": "M62.15",
        "6746": "M62.16",
        "6747": "M62.17",
        "6748": "M62.18",
        "6749": "M62.2",
        "6750": "M62.20",
        "6751": "M62.21",
        "6752": "M62.22",
        "6753": "M62.23",
        "6754": "M62.24",
        "6755": "M62.25",
        "6756": "M62.26",
        "6757": "M62.27",
        "6758": "M62.28",
        "6759": "M62.40",
        "6760": "M62.41",
        "6761": "M62.42",
        "6762": "M62.43",
        "6763": "M62.44",
        "6764": "M62.45",
        "6765": "M62.46",
        "6766": "M62.47",
        "6767": "M62.49",
        "6768": "M62.50",
        "6769": "M62.51",
        "6770": "M62.52",
        "6771": "M62.53",
        "6772": "M62.54",
        "6773": "M62.55",
        "6774": "M62.56",
        "6775": "M62.57",
        "6776": "M62.58",
        "6777": "M62.59",
        "6778": "M62.6",
        "6779": "M62.81",
        "6780": "M62.82",
        "6781": "M62.83",
        "6782": "M62.89",
        "6783": "M63.80",
        "6784": "M63.81",
        "6785": "M63.82",
        "6786": "M63.83",
        "6787": "M63.84",
        "6788": "M63.85",
        "6789": "M63.86",
        "6790": "M63.87",
        "6791": "M63.89",
        "6792": "M65.00",
        "6793": "M65.01",
        "6794": "M65.02",
        "6795": "M65.03",
        "6796": "M65.04",
        "6797": "M65.05",
        "6798": "M65.06",
        "6799": "M65.07",
        "6800": "M65.08",
        "6801": "M65.10",
        "6802": "M65.11",
        "6803": "M65.12",
        "6804": "M65.13",
        "6805": "M65.14",
        "6806": "M65.15",
        "6807": "M65.16",
        "6808": "M65.17",
        "6809": "M65.18",
        "6810": "M65.19",
        "6811": "M65.22",
        "6812": "M65.23",
        "6813": "M65.24",
        "6814": "M65.25",
        "6815": "M65.26",
        "6816": "M65.27",
        "6817": "M65.28",
        "6818": "M65.3",
        "6819": "M65.30",
        "6820": "M65.31",
        "6821": "M65.32",
        "6822": "M65.33",
        "6823": "M65.34",
        "6824": "M65.35",
        "6825": "M65.4",
        "6826": "M65.80",
        "6827": "M65.81",
        "6828": "M65.82",
        "6829": "M65.83",
        "6830": "M65.84",
        "6831": "M65.85",
        "6832": "M65.86",
        "6833": "M65.87",
        "6834": "M65.88",
        "6835": "M65.89",
        "6836": "M65.9",
        "6837": "M66.0",
        "6838": "M66.10",
        "6839": "M66.11",
        "6840": "M66.12",
        "6841": "M66.13",
        "6842": "M66.14",
        "6843": "M66.15",
        "6844": "M66.17",
        "6845": "M66.18",
        "6846": "M66.21",
        "6847": "M66.22",
        "6848": "M66.23",
        "6849": "M66.24",
        "6850": "M66.25",
        "6851": "M66.26",
        "6852": "M66.27",
        "6853": "M66.30",
        "6854": "M66.31",
        "6855": "M66.32",
        "6856": "M66.33",
        "6857": "M66.34",
        "6858": "M66.35",
        "6859": "M66.36",
        "6860": "M66.37",
        "6861": "M66.39",
        "6862": "M66.80",
        "6863": "M66.81",
        "6864": "M66.82",
        "6865": "M66.83",
        "6866": "M66.84",
        "6867": "M66.85",
        "6868": "M66.86",
        "6869": "M66.87",
        "6870": "M66.88",
        "6871": "M66.89",
        "6872": "M67.02",
        "6873": "M67.20",
        "6874": "M67.21",
        "6875": "M67.22",
        "6876": "M67.23",
        "6877": "M67.24",
        "6878": "M67.25",
        "6879": "M67.26",
        "6880": "M67.27",
        "6881": "M67.28",
        "6882": "M67.30",
        "6883": "M67.31",
        "6884": "M67.32",
        "6885": "M67.33",
        "6886": "M67.34",
        "6887": "M67.35",
        "6888": "M67.36",
        "6889": "M67.37",
        "6890": "M67.39",
        "6891": "M67.4",
        "6892": "M67.41",
        "6893": "M67.42",
        "6894": "M67.43",
        "6895": "M67.44",
        "6896": "M67.45",
        "6897": "M67.46",
        "6898": "M67.47",
        "6899": "M67.49",
        "6900": "M67.51",
        "6901": "M67.52",
        "6902": "M67.80",
        "6903": "M67.81",
        "6904": "M67.82",
        "6905": "M67.83",
        "6906": "M67.84",
        "6907": "M67.85",
        "6908": "M67.86",
        "6909": "M67.87",
        "6910": "M67.89",
        "6911": "M67.92",
        "6912": "M67.93",
        "6913": "M67.94",
        "6914": "M67.95",
        "6915": "M67.96",
        "6916": "M67.97",
        "6917": "M67.98",
        "6918": "M67.99",
        "6919": "M70.03",
        "6920": "M70.04",
        "6921": "M70.10",
        "6922": "M70.12",
        "6923": "M70.22",
        "6924": "M70.3",
        "6925": "M70.41",
        "6926": "M70.42",
        "6927": "M70.5",
        "6928": "M70.60",
        "6929": "M70.61",
        "6930": "M70.62",
        "6931": "M70.8",
        "6932": "M70.81",
        "6933": "M70.82",
        "6934": "M70.83",
        "6935": "M70.84",
        "6936": "M70.85",
        "6937": "M70.87",
        "6938": "M70.91",
        "6939": "M70.92",
        "6940": "M70.93",
        "6941": "M70.94",
        "6942": "M70.95",
        "6943": "M70.96",
        "6944": "M70.97",
        "6945": "M70.98",
        "6946": "M70.99",
        "6947": "M71.01",
        "6948": "M71.02",
        "6949": "M71.03",
        "6950": "M71.04",
        "6951": "M71.05",
        "6952": "M71.06",
        "6953": "M71.07",
        "6954": "M71.09",
        "6955": "M71.11",
        "6956": "M71.12",
        "6957": "M71.13",
        "6958": "M71.14",
        "6959": "M71.16",
        "6960": "M71.17",
        "6961": "M71.18",
        "6962": "M71.19",
        "6963": "M71.20",
        "6964": "M71.21",
        "6965": "M71.30",
        "6966": "M71.31",
        "6967": "M71.32",
        "6968": "M71.33",
        "6969": "M71.34",
        "6970": "M71.35",
        "6971": "M71.37",
        "6972": "M71.38",
        "6973": "M71.40",
        "6974": "M71.42",
        "6975": "M71.43",
        "6976": "M71.44",
        "6977": "M71.45",
        "6978": "M71.46",
        "6979": "M71.47",
        "6980": "M71.48",
        "6981": "M71.50",
        "6982": "M71.52",
        "6983": "M71.53",
        "6984": "M71.54",
        "6985": "M71.55",
        "6986": "M71.56",
        "6987": "M71.57",
        "6988": "M71.81",
        "6989": "M71.82",
        "6990": "M71.83",
        "6991": "M71.84",
        "6992": "M71.85",
        "6993": "M71.86",
        "6994": "M71.87",
        "6995": "M71.88",
        "6996": "M71.89",
        "6997": "M71.9",
        "6998": "M72.0",
        "6999": "M72.1",
        "7000": "M72.2",
        "7001": "M72.3",
        "7002": "M72.5",
        "7003": "M72.6",
        "7004": "M72.9",
        "7005": "M75.0",
        "7006": "M75.01",
        "7007": "M75.02",
        "7008": "M75.1",
        "7009": "M75.10",
        "7010": "M75.11",
        "7011": "M75.12",
        "7012": "M75.2",
        "7013": "M75.20",
        "7014": "M75.21",
        "7015": "M75.3",
        "7016": "M75.30",
        "7017": "M75.31",
        "7018": "M75.32",
        "7019": "M75.4",
        "7020": "M75.40",
        "7021": "M75.41",
        "7022": "M75.42",
        "7023": "M75.50",
        "7024": "M75.51",
        "7025": "M75.8",
        "7026": "M75.80",
        "7027": "M75.81",
        "7028": "M75.90",
        "7029": "M75.92",
        "7030": "M76.0",
        "7031": "M76.00",
        "7032": "M76.01",
        "7033": "M76.02",
        "7034": "M76.10",
        "7035": "M76.11",
        "7036": "M76.12",
        "7037": "M76.20",
        "7038": "M76.22",
        "7039": "M76.30",
        "7040": "M76.32",
        "7041": "M76.41",
        "7042": "M76.51",
        "7043": "M76.52",
        "7044": "M76.6",
        "7045": "M76.61",
        "7046": "M76.62",
        "7047": "M76.70",
        "7048": "M76.71",
        "7049": "M76.72",
        "7050": "M76.81",
        "7051": "M76.82",
        "7052": "M76.89",
        "7053": "M76.9",
        "7054": "M77.0",
        "7055": "M77.00",
        "7056": "M77.02",
        "7057": "M77.1",
        "7058": "M77.10",
        "7059": "M77.11",
        "7060": "M77.12",
        "7061": "M77.20",
        "7062": "M77.21",
        "7063": "M77.22",
        "7064": "M77.30",
        "7065": "M77.31",
        "7066": "M77.4",
        "7067": "M77.40",
        "7068": "M77.41",
        "7069": "M77.42",
        "7070": "M77.50",
        "7071": "M77.52",
        "7072": "M77.9",
        "7073": "M79.0",
        "7074": "M79.1",
        "7075": "M79.2",
        "7076": "M79.3",
        "7077": "M79.4",
        "7078": "M79.5",
        "7079": "M79.6",
        "7080": "M79.60",
        "7081": "M79.62",
        "7082": "M79.64",
        "7083": "M79.65",
        "7084": "M79.66",
        "7085": "M79.67",
        "7086": "M79.7",
        "7087": "M79.8",
        "7088": "M79.81",
        "7089": "M79.89",
        "7090": "M79.9",
        "7091": "M79.A1",
        "7092": "M79.A2",
        "7093": "M79.A3",
        "7094": "M80.00",
        "7095": "M80.01",
        "7096": "M80.02",
        "7097": "M80.03",
        "7098": "M80.04",
        "7099": "M80.05",
        "7100": "M80.06",
        "7101": "M80.07",
        "7102": "M80.08",
        "7103": "M80.80",
        "7104": "M80.81",
        "7105": "M80.82",
        "7106": "M80.83",
        "7107": "M80.84",
        "7108": "M80.85",
        "7109": "M80.86",
        "7110": "M80.87",
        "7111": "M80.88",
        "7112": "M81.0",
        "7113": "M81.4",
        "7114": "M81.5",
        "7115": "M81.6",
        "7116": "M81.8",
        "7117": "M81.9",
        "7118": "M83.1",
        "7119": "M83.2",
        "7120": "M83.3",
        "7121": "M84.30",
        "7122": "M84.31",
        "7123": "M84.32",
        "7124": "M84.33",
        "7125": "M84.34",
        "7126": "M84.35",
        "7127": "M84.36",
        "7128": "M84.37",
        "7129": "M84.38",
        "7130": "M84.40",
        "7131": "M84.41",
        "7132": "M84.42",
        "7133": "M84.43",
        "7134": "M84.44",
        "7135": "M84.45",
        "7136": "M84.46",
        "7137": "M84.47",
        "7138": "M84.48",
        "7139": "M84.50",
        "7140": "M84.51",
        "7141": "M84.52",
        "7142": "M84.53",
        "7143": "M84.54",
        "7144": "M84.55",
        "7145": "M84.56",
        "7146": "M84.57",
        "7147": "M84.58",
        "7148": "M84.60",
        "7149": "M84.61",
        "7150": "M84.62",
        "7151": "M84.63",
        "7152": "M84.64",
        "7153": "M84.65",
        "7154": "M84.66",
        "7155": "M84.67",
        "7156": "M84.68",
        "7157": "M84.80",
        "7158": "M84.81",
        "7159": "M84.82",
        "7160": "M84.83",
        "7161": "M84.84",
        "7162": "M84.85",
        "7163": "M84.86",
        "7164": "M84.87",
        "7165": "M84.88",
        "7166": "M84.9",
        "7167": "M85.00",
        "7168": "M85.01",
        "7169": "M85.02",
        "7170": "M85.03",
        "7171": "M85.04",
        "7172": "M85.05",
        "7173": "M85.06",
        "7174": "M85.10",
        "7175": "M85.11",
        "7176": "M85.12",
        "7177": "M85.13",
        "7178": "M85.14",
        "7179": "M85.15",
        "7180": "M85.16",
        "7181": "M85.17",
        "7182": "M85.2",
        "7183": "M85.30",
        "7184": "M85.31",
        "7185": "M85.32",
        "7186": "M85.33",
        "7187": "M85.34",
        "7188": "M85.35",
        "7189": "M85.36",
        "7190": "M85.37",
        "7191": "M85.38",
        "7192": "M85.40",
        "7193": "M85.41",
        "7194": "M85.42",
        "7195": "M85.43",
        "7196": "M85.44",
        "7197": "M85.45",
        "7198": "M85.46",
        "7199": "M85.47",
        "7200": "M85.51",
        "7201": "M85.52",
        "7202": "M85.53",
        "7203": "M85.54",
        "7204": "M85.55",
        "7205": "M85.56",
        "7206": "M85.57",
        "7207": "M85.58",
        "7208": "M85.60",
        "7209": "M85.61",
        "7210": "M85.62",
        "7211": "M85.63",
        "7212": "M85.64",
        "7213": "M85.65",
        "7214": "M85.66",
        "7215": "M85.67",
        "7216": "M85.68",
        "7217": "M85.69",
        "7218": "M85.80",
        "7219": "M85.82",
        "7220": "M85.83",
        "7221": "M85.84",
        "7222": "M85.85",
        "7223": "M85.86",
        "7224": "M85.87",
        "7225": "M85.88",
        "7226": "M86.00",
        "7227": "M86.01",
        "7228": "M86.02",
        "7229": "M86.03",
        "7230": "M86.04",
        "7231": "M86.05",
        "7232": "M86.06",
        "7233": "M86.07",
        "7234": "M86.10",
        "7235": "M86.11",
        "7236": "M86.12",
        "7237": "M86.13",
        "7238": "M86.14",
        "7239": "M86.15",
        "7240": "M86.16",
        "7241": "M86.17",
        "7242": "M86.18",
        "7243": "M86.21",
        "7244": "M86.22",
        "7245": "M86.23",
        "7246": "M86.24",
        "7247": "M86.25",
        "7248": "M86.26",
        "7249": "M86.27",
        "7250": "M86.29",
        "7251": "M86.30",
        "7252": "M86.31",
        "7253": "M86.32",
        "7254": "M86.33",
        "7255": "M86.34",
        "7256": "M86.35",
        "7257": "M86.36",
        "7258": "M86.37",
        "7259": "M86.38",
        "7260": "M86.39",
        "7261": "M86.40",
        "7262": "M86.41",
        "7263": "M86.42",
        "7264": "M86.43",
        "7265": "M86.44",
        "7266": "M86.45",
        "7267": "M86.46",
        "7268": "M86.47",
        "7269": "M86.48",
        "7270": "M86.50",
        "7271": "M86.51",
        "7272": "M86.53",
        "7273": "M86.54",
        "7274": "M86.55",
        "7275": "M86.56",
        "7276": "M86.57",
        "7277": "M86.58",
        "7278": "M86.60",
        "7279": "M86.61",
        "7280": "M86.62",
        "7281": "M86.63",
        "7282": "M86.64",
        "7283": "M86.65",
        "7284": "M86.66",
        "7285": "M86.67",
        "7286": "M86.68",
        "7287": "M86.8X",
        "7288": "M86.9",
        "7289": "M87.00",
        "7290": "M87.01",
        "7291": "M87.02",
        "7292": "M87.03",
        "7293": "M87.04",
        "7294": "M87.05",
        "7295": "M87.06",
        "7296": "M87.07",
        "7297": "M87.09",
        "7298": "M87.10",
        "7299": "M87.11",
        "7300": "M87.12",
        "7301": "M87.13",
        "7302": "M87.14",
        "7303": "M87.15",
        "7304": "M87.16",
        "7305": "M87.17",
        "7306": "M87.18",
        "7307": "M87.2",
        "7308": "M87.20",
        "7309": "M87.21",
        "7310": "M87.22",
        "7311": "M87.23",
        "7312": "M87.24",
        "7313": "M87.25",
        "7314": "M87.26",
        "7315": "M87.27",
        "7316": "M87.28",
        "7317": "M87.29",
        "7318": "M87.30",
        "7319": "M87.31",
        "7320": "M87.32",
        "7321": "M87.33",
        "7322": "M87.34",
        "7323": "M87.35",
        "7324": "M87.36",
        "7325": "M87.37",
        "7326": "M87.38",
        "7327": "M87.80",
        "7328": "M87.81",
        "7329": "M87.82",
        "7330": "M87.83",
        "7331": "M87.84",
        "7332": "M87.85",
        "7333": "M87.86",
        "7334": "M87.87",
        "7335": "M88.0",
        "7336": "M88.1",
        "7337": "M88.81",
        "7338": "M88.82",
        "7339": "M88.83",
        "7340": "M88.84",
        "7341": "M88.85",
        "7342": "M88.86",
        "7343": "M88.87",
        "7344": "M88.89",
        "7345": "M89.00",
        "7346": "M89.01",
        "7347": "M89.02",
        "7348": "M89.03",
        "7349": "M89.04",
        "7350": "M89.05",
        "7351": "M89.06",
        "7352": "M89.07",
        "7353": "M89.08",
        "7354": "M89.09",
        "7355": "M89.12",
        "7356": "M89.13",
        "7357": "M89.15",
        "7358": "M89.16",
        "7359": "M89.20",
        "7360": "M89.21",
        "7361": "M89.22",
        "7362": "M89.23",
        "7363": "M89.24",
        "7364": "M89.25",
        "7365": "M89.26",
        "7366": "M89.27",
        "7367": "M89.28",
        "7368": "M89.31",
        "7369": "M89.33",
        "7370": "M89.34",
        "7371": "M89.35",
        "7372": "M89.36",
        "7373": "M89.37",
        "7374": "M89.38",
        "7375": "M89.39",
        "7376": "M89.4",
        "7377": "M89.41",
        "7378": "M89.42",
        "7379": "M89.43",
        "7380": "M89.45",
        "7381": "M89.46",
        "7382": "M89.47",
        "7383": "M89.48",
        "7384": "M89.49",
        "7385": "M89.50",
        "7386": "M89.51",
        "7387": "M89.52",
        "7388": "M89.53",
        "7389": "M89.54",
        "7390": "M89.55",
        "7391": "M89.56",
        "7392": "M89.57",
        "7393": "M89.59",
        "7394": "M89.60",
        "7395": "M89.61",
        "7396": "M89.62",
        "7397": "M89.63",
        "7398": "M89.64",
        "7399": "M89.65",
        "7400": "M89.66",
        "7401": "M89.67",
        "7402": "M89.68",
        "7403": "M89.69",
        "7404": "M89.70",
        "7405": "M89.71",
        "7406": "M89.72",
        "7407": "M89.73",
        "7408": "M89.74",
        "7409": "M89.76",
        "7410": "M89.77",
        "7411": "M89.79",
        "7412": "M89.8",
        "7413": "M89.8X",
        "7414": "M89.9",
        "7415": "M90.50",
        "7416": "M90.51",
        "7417": "M90.52",
        "7418": "M90.53",
        "7419": "M90.54",
        "7420": "M90.55",
        "7421": "M90.56",
        "7422": "M90.57",
        "7423": "M90.58",
        "7424": "M90.59",
        "7425": "M90.60",
        "7426": "M90.61",
        "7427": "M90.62",
        "7428": "M90.63",
        "7429": "M90.64",
        "7430": "M90.65",
        "7431": "M90.66",
        "7432": "M90.68",
        "7433": "M90.69",
        "7434": "M90.80",
        "7435": "M90.81",
        "7436": "M90.82",
        "7437": "M90.83",
        "7438": "M90.84",
        "7439": "M90.85",
        "7440": "M90.87",
        "7441": "M90.88",
        "7442": "M90.89",
        "7443": "M91.10",
        "7444": "M91.20",
        "7445": "M91.21",
        "7446": "M91.22",
        "7447": "M91.30",
        "7448": "M91.31",
        "7449": "M91.80",
        "7450": "M91.81",
        "7451": "M91.82",
        "7452": "M91.90",
        "7453": "M91.91",
        "7454": "M92.00",
        "7455": "M92.02",
        "7456": "M92.10",
        "7457": "M92.11",
        "7458": "M92.12",
        "7459": "M92.20",
        "7460": "M92.21",
        "7461": "M92.22",
        "7462": "M92.30",
        "7463": "M92.31",
        "7464": "M92.32",
        "7465": "M92.40",
        "7466": "M92.41",
        "7467": "M92.42",
        "7468": "M92.50",
        "7469": "M92.51",
        "7470": "M92.52",
        "7471": "M92.61",
        "7472": "M92.70",
        "7473": "M92.71",
        "7474": "M92.72",
        "7475": "M93.00",
        "7476": "M93.01",
        "7477": "M93.02",
        "7478": "M93.03",
        "7479": "M93.1",
        "7480": "M93.2",
        "7481": "M93.20",
        "7482": "M93.21",
        "7483": "M93.22",
        "7484": "M93.23",
        "7485": "M93.24",
        "7486": "M93.25",
        "7487": "M93.26",
        "7488": "M93.27",
        "7489": "M93.28",
        "7490": "M93.29",
        "7491": "M93.81",
        "7492": "M93.82",
        "7493": "M93.83",
        "7494": "M93.84",
        "7495": "M93.85",
        "7496": "M93.86",
        "7497": "M93.87",
        "7498": "M93.88",
        "7499": "M93.89",
        "7500": "M93.91",
        "7501": "M93.92",
        "7502": "M93.93",
        "7503": "M93.94",
        "7504": "M93.95",
        "7505": "M93.96",
        "7506": "M93.97",
        "7507": "M93.99",
        "7508": "M94.0",
        "7509": "M94.1",
        "7510": "M94.20",
        "7511": "M94.21",
        "7512": "M94.22",
        "7513": "M94.23",
        "7514": "M94.24",
        "7515": "M94.25",
        "7516": "M94.26",
        "7517": "M94.27",
        "7518": "M94.28",
        "7519": "M94.29",
        "7520": "M94.35",
        "7521": "M94.8",
        "7522": "M94.8X",
        "7523": "M95.0",
        "7524": "M95.11",
        "7525": "M95.12",
        "7526": "M95.2",
        "7527": "M95.4",
        "7528": "M95.5",
        "7529": "M95.8",
        "7530": "M96.0",
        "7531": "M96.1",
        "7532": "M96.2",
        "7533": "M96.3",
        "7534": "M96.5",
        "7535": "M96.62",
        "7536": "M96.63",
        "7537": "M96.66",
        "7538": "M96.67",
        "7539": "M96.69",
        "7540": "M96.81",
        "7541": "M96.82",
        "7542": "M96.83",
        "7543": "M97.6",
        "7544": "M97.8",
        "7545": "M99.00",
        "7546": "M99.01",
        "7547": "M99.02",
        "7548": "M99.05",
        "7549": "M99.07",
        "7550": "M99.08",
        "7551": "M99.09",
        "7552": "M99.11",
        "7553": "M99.12",
        "7554": "M99.13",
        "7555": "M99.14",
        "7556": "M99.15",
        "7557": "M99.16",
        "7558": "M99.19",
        "7559": "M99.20",
        "7560": "M99.22",
        "7561": "M99.23",
        "7562": "M99.24",
        "7563": "M99.28",
        "7564": "M99.30",
        "7565": "M99.34",
        "7566": "M99.35",
        "7567": "M99.38",
        "7568": "M99.39",
        "7569": "M99.40",
        "7570": "M99.43",
        "7571": "M99.47",
        "7572": "M99.48",
        "7573": "M99.49",
        "7574": "M99.50",
        "7575": "M99.51",
        "7576": "M99.53",
        "7577": "M99.55",
        "7578": "M99.56",
        "7579": "M99.57",
        "7580": "M99.59",
        "7581": "M99.60",
        "7582": "M99.63",
        "7583": "M99.64",
        "7584": "M99.65",
        "7585": "M99.66",
        "7586": "M99.69",
        "7587": "M99.71",
        "7588": "M99.73",
        "7589": "M99.74",
        "7590": "M99.75",
        "7591": "M99.76",
        "7592": "M99.78",
        "7593": "M99.79",
        "7594": "M99.81",
        "7595": "M99.82",
        "7596": "M99.83",
        "7597": "M99.86",
        "7598": "M99.87",
        "7599": "M99.88",
        "7600": "M99.89",
        "7601": "N00.0",
        "7602": "N00.2",
        "7603": "N00.5",
        "7604": "N00.6",
        "7605": "N00.7",
        "7606": "N00.8",
        "7607": "N00.9",
        "7608": "N01.0",
        "7609": "N01.1",
        "7610": "N01.2",
        "7611": "N01.3",
        "7612": "N01.4",
        "7613": "N01.5",
        "7614": "N01.6",
        "7615": "N01.9",
        "7616": "N02.0",
        "7617": "N02.1",
        "7618": "N02.2",
        "7619": "N02.3",
        "7620": "N02.5",
        "7621": "N02.9",
        "7622": "N03.0",
        "7623": "N03.2",
        "7624": "N03.3",
        "7625": "N03.4",
        "7626": "N03.5",
        "7627": "N03.7",
        "7628": "N04.2",
        "7629": "N04.4",
        "7630": "N04.5",
        "7631": "N04.6",
        "7632": "N04.7",
        "7633": "N04.8",
        "7634": "N05.1",
        "7635": "N05.4",
        "7636": "N05.6",
        "7637": "N05.8",
        "7638": "N05.9",
        "7639": "N06.0",
        "7640": "N06.1",
        "7641": "N06.3",
        "7642": "N06.4",
        "7643": "N06.5",
        "7644": "N06.6",
        "7645": "N06.7",
        "7646": "N07.1",
        "7647": "N07.6",
        "7648": "N07.7",
        "7649": "N07.8",
        "7650": "N07.9",
        "7651": "N11.0",
        "7652": "N11.1",
        "7653": "N13.1",
        "7654": "N13.2",
        "7655": "N13.39",
        "7656": "N13.4",
        "7657": "N13.7",
        "7658": "N13.70",
        "7659": "N13.71",
        "7660": "N13.72",
        "7661": "N13.73",
        "7662": "N13.9",
        "7663": "N14.0",
        "7664": "N14.1",
        "7665": "N14.4",
        "7666": "N15.1",
        "7667": "N15.8",
        "7668": "N15.9",
        "7669": "N17.0",
        "7670": "N17.2",
        "7671": "N17.8",
        "7672": "N18.0",
        "7673": "N18.2",
        "7674": "N18.3",
        "7675": "N18.4",
        "7676": "N18.9",
        "7677": "N20.0",
        "7678": "N20.1",
        "7679": "N20.2",
        "7680": "N20.8",
        "7681": "N21.0",
        "7682": "N21.1",
        "7683": "N21.8",
        "7684": "N22.0",
        "7685": "N22.1",
        "7686": "N22.9",
        "7687": "N25.0",
        "7688": "N25.1",
        "7689": "N25.6",
        "7690": "N25.81",
        "7691": "N25.9",
        "7692": "N26.1",
        "7693": "N27.9",
        "7694": "N28.0",
        "7695": "N28.1",
        "7696": "N28.8",
        "7697": "N28.81",
        "7698": "N28.83",
        "7699": "N28.84",
        "7700": "N28.86",
        "7701": "N28.89",
        "7702": "N28.9",
        "7703": "N30.01",
        "7704": "N30.11",
        "7705": "N30.21",
        "7706": "N30.30",
        "7707": "N30.40",
        "7708": "N30.41",
        "7709": "N30.8",
        "7710": "N30.81",
        "7711": "N30.9",
        "7712": "N30.91",
        "7713": "N31.0",
        "7714": "N31.1",
        "7715": "N31.8",
        "7716": "N31.9",
        "7717": "N32.0",
        "7718": "N32.2",
        "7719": "N32.89",
        "7720": "N32.9",
        "7721": "N34.1",
        "7722": "N34.2",
        "7723": "N35.01",
        "7724": "N35.02",
        "7725": "N35.11",
        "7726": "N36.0",
        "7727": "N36.1",
        "7728": "N36.2",
        "7729": "N36.41",
        "7730": "N36.42",
        "7731": "N36.43",
        "7732": "N36.5",
        "7733": "N36.8",
        "7734": "N36.9",
        "7735": "N37.0",
        "7736": "N39.0",
        "7737": "N39.3",
        "7738": "N39.41",
        "7739": "N39.42",
        "7740": "N39.43",
        "7741": "N39.45",
        "7742": "N39.46",
        "7743": "N39.49",
        "7744": "N39.8",
        "7745": "N39.9",
        "7746": "N40.0",
        "7747": "N40.3",
        "7748": "N41.0",
        "7749": "N41.1",
        "7750": "N41.2",
        "7751": "N41.3",
        "7752": "N41.4",
        "7753": "N42.0",
        "7754": "N42.1",
        "7755": "N42.3",
        "7756": "N42.82",
        "7757": "N42.83",
        "7758": "N43.0",
        "7759": "N43.1",
        "7760": "N43.2",
        "7761": "N43.3",
        "7762": "N43.40",
        "7763": "N43.41",
        "7764": "N43.42",
        "7765": "N44.00",
        "7766": "N44.02",
        "7767": "N44.03",
        "7768": "N44.1",
        "7769": "N44.8",
        "7770": "N45.8",
        "7771": "N46.01",
        "7772": "N46.02",
        "7773": "N46.11",
        "7774": "N46.12",
        "7775": "N46.9",
        "7776": "N47.0",
        "7777": "N47.1",
        "7778": "N47.3",
        "7779": "N47.7",
        "7780": "N47.8",
        "7781": "N48.21",
        "7782": "N48.22",
        "7783": "N48.31",
        "7784": "N48.39",
        "7785": "N48.5",
        "7786": "N48.8",
        "7787": "N48.81",
        "7788": "N48.89",
        "7789": "N48.9",
        "7790": "N49.0",
        "7791": "N49.1",
        "7792": "N49.2",
        "7793": "N49.8",
        "7794": "N49.9",
        "7795": "N50.1",
        "7796": "N50.5",
        "7797": "N50.8",
        "7798": "N50.9",
        "7799": "N52.02",
        "7800": "N52.2",
        "7801": "N52.33",
        "7802": "N52.39",
        "7803": "N52.8",
        "7804": "N53.12",
        "7805": "N53.14",
        "7806": "N53.19",
        "7807": "N53.9",
        "7808": "N60.11",
        "7809": "N60.2",
        "7810": "N60.29",
        "7811": "N60.39",
        "7812": "N60.42",
        "7813": "N60.49",
        "7814": "N60.82",
        "7815": "N60.92",
        "7816": "N60.99",
        "7817": "N64.0",
        "7818": "N64.2",
        "7819": "N64.4",
        "7820": "N64.5",
        "7821": "N64.51",
        "7822": "N64.52",
        "7823": "N64.53",
        "7824": "N64.59",
        "7825": "N64.81",
        "7826": "N64.82",
        "7827": "N64.89",
        "7828": "N64.9",
        "7829": "N65.0",
        "7830": "N65.1",
        "7831": "N70.01",
        "7832": "N70.12",
        "7833": "N70.13",
        "7834": "N70.9",
        "7835": "N70.91",
        "7836": "N70.92",
        "7837": "N71.0",
        "7838": "N71.9",
        "7839": "N73.0",
        "7840": "N73.4",
        "7841": "N73.5",
        "7842": "N73.6",
        "7843": "N73.8",
        "7844": "N73.9",
        "7845": "N75.0",
        "7846": "N75.9",
        "7847": "N76.0",
        "7848": "N76.2",
        "7849": "N76.3",
        "7850": "N76.4",
        "7851": "N76.5",
        "7852": "N76.6",
        "7853": "N77.0",
        "7854": "N77.1",
        "7855": "N77.8",
        "7856": "N79.6",
        "7857": "N80.0",
        "7858": "N80.1",
        "7859": "N80.2",
        "7860": "N80.4",
        "7861": "N80.5",
        "7862": "N80.8",
        "7863": "N81.1",
        "7864": "N81.10",
        "7865": "N81.12",
        "7866": "N81.2",
        "7867": "N81.3",
        "7868": "N81.5",
        "7869": "N81.6",
        "7870": "N81.82",
        "7871": "N81.83",
        "7872": "N81.89",
        "7873": "N81.9",
        "7874": "N82.0",
        "7875": "N82.1",
        "7876": "N82.2",
        "7877": "N82.8",
        "7878": "N82.9",
        "7879": "N83.0",
        "7880": "N83.1",
        "7881": "N83.2",
        "7882": "N83.20",
        "7883": "N83.29",
        "7884": "N83.31",
        "7885": "N83.32",
        "7886": "N83.5",
        "7887": "N83.51",
        "7888": "N83.52",
        "7889": "N83.6",
        "7890": "N83.7",
        "7891": "N84.1",
        "7892": "N84.2",
        "7893": "N84.3",
        "7894": "N84.8",
        "7895": "N84.9",
        "7896": "N85.0",
        "7897": "N85.00",
        "7898": "N85.02",
        "7899": "N85.2",
        "7900": "N85.3",
        "7901": "N85.5",
        "7902": "N85.6",
        "7903": "N85.7",
        "7904": "N85.8",
        "7905": "N85.9",
        "7906": "N87.9",
        "7907": "N88.1",
        "7908": "N88.3",
        "7909": "N88.4",
        "7910": "N88.8",
        "7911": "N88.9",
        "7912": "N89.0",
        "7913": "N89.1",
        "7914": "N89.3",
        "7915": "N89.7",
        "7916": "N89.8",
        "7917": "N89.9",
        "7918": "N90.0",
        "7919": "N90.1",
        "7920": "N90.4",
        "7921": "N90.5",
        "7922": "N90.81",
        "7923": "N90.89",
        "7924": "N90.9",
        "7925": "N91.0",
        "7926": "N91.1",
        "7927": "N91.2",
        "7928": "N91.4",
        "7929": "N91.5",
        "7930": "N92.0",
        "7931": "N92.1",
        "7932": "N92.2",
        "7933": "N92.4",
        "7934": "N92.5",
        "7935": "N92.6",
        "7936": "N92.9",
        "7937": "N93.9",
        "7938": "N94.0",
        "7939": "N94.1",
        "7940": "N94.2",
        "7941": "N94.3",
        "7942": "N94.4",
        "7943": "N94.5",
        "7944": "N94.6",
        "7945": "N94.81",
        "7946": "N94.89",
        "7947": "N94.9",
        "7948": "N95.2",
        "7949": "N95.8",
        "7950": "N95.9",
        "7951": "N97.1",
        "7952": "N97.8",
        "7953": "N97.9",
        "7954": "N98.0",
        "7955": "N98.2",
        "7956": "N98.3",
        "7957": "N98.9",
        "7958": "N99.0",
        "7959": "N99.11",
        "7960": "N99.3",
        "7961": "N99.51",
        "7962": "N99.52",
        "7963": "N99.53",
        "7964": "N99.62",
        "7965": "N99.72",
        "7966": "N99.81",
        "7967": "N99.82",
        "7968": "N99.83",
        "7969": "O00.0",
        "7970": "O00.1",
        "7971": "O00.8",
        "7972": "O00.9",
        "7973": "O01.0",
        "7974": "O01.9",
        "7975": "O02.1",
        "7976": "O02.89",
        "7977": "O02.9",
        "7978": "O03.0",
        "7979": "O03.1",
        "7980": "O03.2",
        "7981": "O03.31",
        "7982": "O03.32",
        "7983": "O03.34",
        "7984": "O03.36",
        "7985": "O03.4",
        "7986": "O03.5",
        "7987": "O03.6",
        "7988": "O03.80",
        "7989": "O03.81",
        "7990": "O03.82",
        "7991": "O03.83",
        "7992": "O03.84",
        "7993": "O03.89",
        "7994": "O03.9",
        "7995": "O04.81",
        "7996": "O04.82",
        "7997": "O04.83",
        "7998": "O04.84",
        "7999": "O04.87",
        "8000": "O05.0",
        "8001": "O06.9",
        "8002": "O07.1",
        "8003": "O07.2",
        "8004": "O07.30",
        "8005": "O07.32",
        "8006": "O07.33",
        "8007": "O07.35",
        "8008": "O07.36",
        "8009": "O07.38",
        "8010": "O07.4",
        "8011": "O08.0",
        "8012": "O08.1",
        "8013": "O08.4",
        "8014": "O08.6",
        "8015": "O08.7",
        "8016": "O08.81",
        "8017": "O08.82",
        "8018": "O08.83",
        "8019": "O08.9",
        "8020": "O09.00",
        "8021": "O09.01",
        "8022": "O09.03",
        "8023": "O09.10",
        "8024": "O09.11",
        "8025": "O09.13",
        "8026": "O09.21",
        "8027": "O09.29",
        "8028": "O09.30",
        "8029": "O09.31",
        "8030": "O09.32",
        "8031": "O09.40",
        "8032": "O09.41",
        "8033": "O09.42",
        "8034": "O09.43",
        "8035": "O09.51",
        "8036": "O09.52",
        "8037": "O09.61",
        "8038": "O09.62",
        "8039": "O09.71",
        "8040": "O09.72",
        "8041": "O09.73",
        "8042": "O09.81",
        "8043": "O09.82",
        "8044": "O09.89",
        "8045": "O09.90",
        "8046": "O09.91",
        "8047": "O09.92",
        "8048": "O09.93",
        "8049": "O10.01",
        "8050": "O10.02",
        "8051": "O10.03",
        "8052": "O10.11",
        "8053": "O10.12",
        "8054": "O10.13",
        "8055": "O10.21",
        "8056": "O10.22",
        "8057": "O10.23",
        "8058": "O10.31",
        "8059": "O10.33",
        "8060": "O10.41",
        "8061": "O10.42",
        "8062": "O10.43",
        "8063": "O10.91",
        "8064": "O10.92",
        "8065": "O10.93",
        "8066": "O11.1",
        "8067": "O11.3",
        "8068": "O11.9",
        "8069": "O12.00",
        "8070": "O12.01",
        "8071": "O12.02",
        "8072": "O12.11",
        "8073": "O12.13",
        "8074": "O12.23",
        "8075": "O13.1",
        "8076": "O13.2",
        "8077": "O13.9",
        "8078": "O14.00",
        "8079": "O14.02",
        "8080": "O14.10",
        "8081": "O14.12",
        "8082": "O14.13",
        "8083": "O14.20",
        "8084": "O14.22",
        "8085": "O14.23",
        "8086": "O14.9",
        "8087": "O14.90",
        "8088": "O14.92",
        "8089": "O14.93",
        "8090": "O15.00",
        "8091": "O15.03",
        "8092": "O15.1",
        "8093": "O15.9",
        "8094": "O16.1",
        "8095": "O16.3",
        "8096": "O16.9",
        "8097": "O20.0",
        "8098": "O20.8",
        "8099": "O20.9",
        "8100": "O21.0",
        "8101": "O21.1",
        "8102": "O21.2",
        "8103": "O21.8",
        "8104": "O21.9",
        "8105": "O22.02",
        "8106": "O22.03",
        "8107": "O22.10",
        "8108": "O22.11",
        "8109": "O22.13",
        "8110": "O22.20",
        "8111": "O22.23",
        "8112": "O22.30",
        "8113": "O22.40",
        "8114": "O22.41",
        "8115": "O22.42",
        "8116": "O22.51",
        "8117": "O22.52",
        "8118": "O22.8X",
        "8119": "O22.90",
        "8120": "O22.91",
        "8121": "O22.93",
        "8122": "O23.00",
        "8123": "O23.11",
        "8124": "O23.12",
        "8125": "O23.20",
        "8126": "O23.21",
        "8127": "O23.22",
        "8128": "O23.30",
        "8129": "O23.31",
        "8130": "O23.32",
        "8131": "O23.40",
        "8132": "O23.41",
        "8133": "O23.51",
        "8134": "O23.52",
        "8135": "O23.59",
        "8136": "O23.91",
        "8137": "O23.93",
        "8138": "O24.01",
        "8139": "O24.03",
        "8140": "O24.11",
        "8141": "O24.13",
        "8142": "O24.31",
        "8143": "O24.41",
        "8144": "O24.42",
        "8145": "O24.43",
        "8146": "O24.81",
        "8147": "O24.9",
        "8148": "O24.91",
        "8149": "O24.92",
        "8150": "O24.93",
        "8151": "O25.11",
        "8152": "O25.12",
        "8153": "O25.3",
        "8154": "O26.00",
        "8155": "O26.01",
        "8156": "O26.03",
        "8157": "O26.10",
        "8158": "O26.12",
        "8159": "O26.20",
        "8160": "O26.21",
        "8161": "O26.22",
        "8162": "O26.23",
        "8163": "O26.30",
        "8164": "O26.31",
        "8165": "O26.32",
        "8166": "O26.33",
        "8167": "O26.4",
        "8168": "O26.43",
        "8169": "O26.51",
        "8170": "O26.61",
        "8171": "O26.62",
        "8172": "O26.71",
        "8173": "O26.72",
        "8174": "O26.73",
        "8175": "O26.81",
        "8176": "O26.82",
        "8177": "O26.83",
        "8178": "O26.84",
        "8179": "O26.85",
        "8180": "O26.86",
        "8181": "O26.87",
        "8182": "O26.89",
        "8183": "O26.9",
        "8184": "O26.91",
        "8185": "O26.93",
        "8186": "O28.0",
        "8187": "O28.1",
        "8188": "O28.2",
        "8189": "O28.3",
        "8190": "O28.4",
        "8191": "O28.5",
        "8192": "O28.8",
        "8193": "O28.9",
        "8194": "O29.01",
        "8195": "O29.02",
        "8196": "O29.09",
        "8197": "O29.11",
        "8198": "O29.12",
        "8199": "O29.19",
        "8200": "O29.21",
        "8201": "O29.29",
        "8202": "O29.3X",
        "8203": "O29.5X",
        "8204": "O29.61",
        "8205": "O29.62",
        "8206": "O29.63",
        "8207": "O29.8X",
        "8208": "O29.92",
        "8209": "O30.0",
        "8210": "O30.00",
        "8211": "O30.01",
        "8212": "O30.02",
        "8213": "O30.03",
        "8214": "O30.04",
        "8215": "O30.09",
        "8216": "O30.10",
        "8217": "O30.11",
        "8218": "O30.12",
        "8219": "O30.19",
        "8220": "O30.20",
        "8221": "O30.21",
        "8222": "O30.22",
        "8223": "O30.29",
        "8224": "O30.80",
        "8225": "O30.81",
        "8226": "O30.82",
        "8227": "O30.89",
        "8228": "O30.90",
        "8229": "O30.91",
        "8230": "O30.92",
        "8231": "O30.93",
        "8232": "O31.00",
        "8233": "O31.01",
        "8234": "O31.02",
        "8235": "O31.03",
        "8236": "O31.10",
        "8237": "O31.11",
        "8238": "O31.12",
        "8239": "O31.13",
        "8240": "O31.20",
        "8241": "O31.21",
        "8242": "O31.22",
        "8243": "O31.23",
        "8244": "O31.30",
        "8245": "O31.31",
        "8246": "O31.32",
        "8247": "O31.33",
        "8248": "O31.8X",
        "8249": "O32.0X",
        "8250": "O32.1",
        "8251": "O32.1X",
        "8252": "O32.2X",
        "8253": "O32.3X",
        "8254": "O32.4X",
        "8255": "O32.6X",
        "8256": "O32.8X",
        "8257": "O32.9X",
        "8258": "O33.1",
        "8259": "O33.3X",
        "8260": "O33.4X",
        "8261": "O33.5X",
        "8262": "O33.6X",
        "8263": "O33.7",
        "8264": "O33.9",
        "8265": "O34.00",
        "8266": "O34.02",
        "8267": "O34.03",
        "8268": "O34.10",
        "8269": "O34.11",
        "8270": "O34.13",
        "8271": "O34.2",
        "8272": "O34.21",
        "8273": "O34.29",
        "8274": "O34.30",
        "8275": "O34.33",
        "8276": "O34.40",
        "8277": "O34.51",
        "8278": "O34.52",
        "8279": "O34.53",
        "8280": "O34.59",
        "8281": "O34.61",
        "8282": "O34.71",
        "8283": "O34.73",
        "8284": "O34.82",
        "8285": "O34.83",
        "8286": "O34.90",
        "8287": "O34.92",
        "8288": "O34.93",
        "8289": "O35.0X",
        "8290": "O35.1X",
        "8291": "O35.2X",
        "8292": "O35.3X",
        "8293": "O35.4X",
        "8294": "O35.5X",
        "8295": "O35.6X",
        "8296": "O35.7X",
        "8297": "O35.8X",
        "8298": "O35.9X",
        "8299": "O36.01",
        "8300": "O36.09",
        "8301": "O36.11",
        "8302": "O36.19",
        "8303": "O36.20",
        "8304": "O36.21",
        "8305": "O36.22",
        "8306": "O36.23",
        "8307": "O36.4X",
        "8308": "O36.51",
        "8309": "O36.59",
        "8310": "O36.60",
        "8311": "O36.61",
        "8312": "O36.62",
        "8313": "O36.63",
        "8314": "O36.70",
        "8315": "O36.71",
        "8316": "O36.72",
        "8317": "O36.73",
        "8318": "O36.80",
        "8319": "O36.81",
        "8320": "O36.82",
        "8321": "O36.89",
        "8322": "O36.90",
        "8323": "O36.91",
        "8324": "O36.92",
        "8325": "O36.93",
        "8326": "O40.1X",
        "8327": "O40.2X",
        "8328": "O40.3X",
        "8329": "O40.9X",
        "8330": "O41.00",
        "8331": "O41.01",
        "8332": "O41.02",
        "8333": "O41.03",
        "8334": "O41.1",
        "8335": "O41.10",
        "8336": "O41.12",
        "8337": "O41.14",
        "8338": "O41.8X",
        "8339": "O41.90",
        "8340": "O41.91",
        "8341": "O41.92",
        "8342": "O41.93",
        "8343": "O42.01",
        "8344": "O42.02",
        "8345": "O42.11",
        "8346": "O42.91",
        "8347": "O42.92",
        "8348": "O43.01",
        "8349": "O43.02",
        "8350": "O43.10",
        "8351": "O43.11",
        "8352": "O43.12",
        "8353": "O43.19",
        "8354": "O43.21",
        "8355": "O43.22",
        "8356": "O43.23",
        "8357": "O43.81",
        "8358": "O43.89",
        "8359": "O43.91",
        "8360": "O43.92",
        "8361": "O44.03",
        "8362": "O44.1",
        "8363": "O44.10",
        "8364": "O44.11",
        "8365": "O45.00",
        "8366": "O45.01",
        "8367": "O45.02",
        "8368": "O45.09",
        "8369": "O45.8X",
        "8370": "O45.91",
        "8371": "O45.92",
        "8372": "O45.93",
        "8373": "O46.00",
        "8374": "O46.01",
        "8375": "O46.02",
        "8376": "O46.09",
        "8377": "O46.8X",
        "8378": "O46.90",
        "8379": "O46.92",
        "8380": "O47.00",
        "8381": "O47.02",
        "8382": "O47.03",
        "8383": "O48.0",
        "8384": "O48.1",
        "8385": "O60.02",
        "8386": "O60.03",
        "8387": "O60.10",
        "8388": "O60.12",
        "8389": "O60.13",
        "8390": "O60.14",
        "8391": "O60.20",
        "8392": "O60.22",
        "8393": "O60.23",
        "8394": "O61.1",
        "8395": "O61.8",
        "8396": "O61.9",
        "8397": "O62.1",
        "8398": "O62.2",
        "8399": "O62.8",
        "8400": "O62.9",
        "8401": "O63.0",
        "8402": "O63.2",
        "8403": "O63.9",
        "8404": "O64.0X",
        "8405": "O64.1X",
        "8406": "O64.2X",
        "8407": "O64.3X",
        "8408": "O64.4X",
        "8409": "O64.5X",
        "8410": "O64.8X",
        "8411": "O64.9X",
        "8412": "O65.1",
        "8413": "O65.3",
        "8414": "O65.4",
        "8415": "O65.8",
        "8416": "O65.9",
        "8417": "O66.1",
        "8418": "O66.3",
        "8419": "O66.41",
        "8420": "O66.5",
        "8421": "O66.6",
        "8422": "O66.8",
        "8423": "O67.0",
        "8424": "O69.0X",
        "8425": "O69.1X",
        "8426": "O69.2X",
        "8427": "O69.3X",
        "8428": "O69.4X",
        "8429": "O69.5X",
        "8430": "O69.81",
        "8431": "O69.82",
        "8432": "O69.89",
        "8433": "O69.9X",
        "8434": "O70.0",
        "8435": "O70.1",
        "8436": "O70.2",
        "8437": "O70.4",
        "8438": "O71.03",
        "8439": "O71.2",
        "8440": "O71.3",
        "8441": "O71.5",
        "8442": "O71.6",
        "8443": "O71.81",
        "8444": "O71.82",
        "8445": "O71.89",
        "8446": "O71.9",
        "8447": "O72.1",
        "8448": "O72.2",
        "8449": "O72.3",
        "8450": "O73.1",
        "8451": "O74.1",
        "8452": "O74.2",
        "8453": "O74.3",
        "8454": "O74.5",
        "8455": "O74.6",
        "8456": "O74.7",
        "8457": "O74.8",
        "8458": "O75.1",
        "8459": "O75.5",
        "8460": "O75.82",
        "8461": "O75.89",
        "8462": "O75.9",
        "8463": "O77.0",
        "8464": "O77.1",
        "8465": "O77.8",
        "8466": "O80.9",
        "8467": "O86.0",
        "8468": "O86.12",
        "8469": "O86.13",
        "8470": "O86.21",
        "8471": "O86.29",
        "8472": "O86.81",
        "8473": "O86.89",
        "8474": "O87.0",
        "8475": "O87.1",
        "8476": "O87.2",
        "8477": "O87.3",
        "8478": "O87.4",
        "8479": "O88.01",
        "8480": "O88.03",
        "8481": "O88.11",
        "8482": "O88.21",
        "8483": "O88.22",
        "8484": "O88.23",
        "8485": "O88.31",
        "8486": "O88.33",
        "8487": "O88.81",
        "8488": "O89.01",
        "8489": "O89.09",
        "8490": "O89.1",
        "8491": "O89.2",
        "8492": "O89.3",
        "8493": "O89.4",
        "8494": "O89.5",
        "8495": "O89.8",
        "8496": "O90.1",
        "8497": "O90.2",
        "8498": "O90.3",
        "8499": "O90.4",
        "8500": "O90.5",
        "8501": "O90.6",
        "8502": "O90.9",
        "8503": "O91.01",
        "8504": "O91.02",
        "8505": "O91.11",
        "8506": "O91.12",
        "8507": "O91.13",
        "8508": "O91.21",
        "8509": "O91.22",
        "8510": "O91.23",
        "8511": "O92.01",
        "8512": "O92.02",
        "8513": "O92.03",
        "8514": "O92.11",
        "8515": "O92.13",
        "8516": "O92.2",
        "8517": "O92.29",
        "8518": "O92.3",
        "8519": "O92.4",
        "8520": "O92.6",
        "8521": "O92.70",
        "8522": "O98.01",
        "8523": "O98.02",
        "8524": "O98.03",
        "8525": "O98.11",
        "8526": "O98.12",
        "8527": "O98.13",
        "8528": "O98.21",
        "8529": "O98.31",
        "8530": "O98.32",
        "8531": "O98.41",
        "8532": "O98.42",
        "8533": "O98.43",
        "8534": "O98.51",
        "8535": "O98.53",
        "8536": "O98.61",
        "8537": "O98.62",
        "8538": "O98.63",
        "8539": "O98.71",
        "8540": "O98.72",
        "8541": "O98.73",
        "8542": "O98.81",
        "8543": "O98.83",
        "8544": "O98.91",
        "8545": "O98.92",
        "8546": "O98.93",
        "8547": "O99.01",
        "8548": "O99.02",
        "8549": "O99.03",
        "8550": "O99.11",
        "8551": "O99.12",
        "8552": "O99.13",
        "8553": "O99.21",
        "8554": "O99.28",
        "8555": "O99.31",
        "8556": "O99.32",
        "8557": "O99.33",
        "8558": "O99.34",
        "8559": "O99.35",
        "8560": "O99.41",
        "8561": "O99.42",
        "8562": "O99.51",
        "8563": "O99.52",
        "8564": "O99.61",
        "8565": "O99.62",
        "8566": "O99.71",
        "8567": "O99.73",
        "8568": "O99.81",
        "8569": "O99.83",
        "8570": "O99.84",
        "8571": "O99.89",
        "8572": "O9A.11",
        "8573": "O9A.12",
        "8574": "O9A.13",
        "8575": "O9A.21",
        "8576": "O9A.31",
        "8577": "O9A.32",
        "8578": "O9A.33",
        "8579": "O9A.41",
        "8580": "O9A.42",
        "8581": "O9A.51",
        "8582": "O9A.52",
        "8583": "O9A.53",
        "8584": "P00.0",
        "8585": "P00.1",
        "8586": "P00.2",
        "8587": "P00.5",
        "8588": "P00.6",
        "8589": "P00.81",
        "8590": "P00.89",
        "8591": "P00.9",
        "8592": "P01.0",
        "8593": "P01.2",
        "8594": "P01.3",
        "8595": "P01.4",
        "8596": "P01.5",
        "8597": "P01.8",
        "8598": "P02.0",
        "8599": "P02.20",
        "8600": "P02.29",
        "8601": "P02.3",
        "8602": "P02.5",
        "8603": "P02.60",
        "8604": "P02.69",
        "8605": "P02.9",
        "8606": "P03.0",
        "8607": "P03.3",
        "8608": "P03.4",
        "8609": "P03.81",
        "8610": "P03.82",
        "8611": "P03.89",
        "8612": "P04.0",
        "8613": "P04.1",
        "8614": "P04.49",
        "8615": "P04.5",
        "8616": "P04.6",
        "8617": "P04.8",
        "8618": "P04.9",
        "8619": "P05.00",
        "8620": "P05.03",
        "8621": "P05.04",
        "8622": "P05.05",
        "8623": "P05.06",
        "8624": "P05.08",
        "8625": "P05.10",
        "8626": "P05.11",
        "8627": "P05.12",
        "8628": "P05.13",
        "8629": "P05.15",
        "8630": "P05.16",
        "8631": "P05.2",
        "8632": "P05.9",
        "8633": "P07.01",
        "8634": "P07.02",
        "8635": "P07.14",
        "8636": "P07.15",
        "8637": "P07.16",
        "8638": "P07.20",
        "8639": "P07.22",
        "8640": "P07.25",
        "8641": "P07.30",
        "8642": "P07.31",
        "8643": "P07.32",
        "8644": "P07.34",
        "8645": "P07.36",
        "8646": "P07.37",
        "8647": "P07.38",
        "8648": "P07.39",
        "8649": "P08.0",
        "8650": "P08.1",
        "8651": "P08.21",
        "8652": "P08.22",
        "8653": "P10.0",
        "8654": "P10.1",
        "8655": "P10.8",
        "8656": "P10.9",
        "8657": "P11.0",
        "8658": "P11.1",
        "8659": "P11.2",
        "8660": "P11.3",
        "8661": "P11.4",
        "8662": "P11.9",
        "8663": "P12.1",
        "8664": "P12.2",
        "8665": "P12.3",
        "8666": "P12.4",
        "8667": "P12.89",
        "8668": "P12.9",
        "8669": "P13.3",
        "8670": "P13.4",
        "8671": "P13.8",
        "8672": "P14.0",
        "8673": "P14.1",
        "8674": "P14.2",
        "8675": "P14.3",
        "8676": "P15.0",
        "8677": "P15.1",
        "8678": "P15.3",
        "8679": "P15.8",
        "8680": "P15.9",
        "8681": "P19.1",
        "8682": "P19.2",
        "8683": "P19.9",
        "8684": "P22.0",
        "8685": "P22.1",
        "8686": "P22.8",
        "8687": "P23.0",
        "8688": "P23.3",
        "8689": "P23.5",
        "8690": "P23.6",
        "8691": "P24.01",
        "8692": "P24.10",
        "8693": "P24.11",
        "8694": "P24.20",
        "8695": "P24.21",
        "8696": "P24.30",
        "8697": "P24.31",
        "8698": "P24.80",
        "8699": "P25.0",
        "8700": "P25.1",
        "8701": "P25.2",
        "8702": "P25.8",
        "8703": "P26.0",
        "8704": "P26.1",
        "8705": "P26.8",
        "8706": "P26.9",
        "8707": "P27.1",
        "8708": "P27.9",
        "8709": "P28.19",
        "8710": "P28.2",
        "8711": "P28.3",
        "8712": "P28.4",
        "8713": "P28.5",
        "8714": "P28.81",
        "8715": "P28.89",
        "8716": "P28.9",
        "8717": "P29.0",
        "8718": "P29.12",
        "8719": "P29.2",
        "8720": "P29.81",
        "8721": "P35.0",
        "8722": "P35.1",
        "8723": "P35.2",
        "8724": "P35.3",
        "8725": "P35.9",
        "8726": "P36.2",
        "8727": "P36.30",
        "8728": "P36.4",
        "8729": "P36.5",
        "8730": "P36.8",
        "8731": "P36.9",
        "8732": "P37.0",
        "8733": "P37.2",
        "8734": "P37.3",
        "8735": "P37.5",
        "8736": "P37.8",
        "8737": "P37.9",
        "8738": "P38.9",
        "8739": "P39.0",
        "8740": "P39.1",
        "8741": "P39.2",
        "8742": "P39.3",
        "8743": "P39.9",
        "8744": "P50.0",
        "8745": "P50.1",
        "8746": "P50.2",
        "8747": "P50.3",
        "8748": "P50.4",
        "8749": "P50.5",
        "8750": "P51.0",
        "8751": "P51.8",
        "8752": "P52.0",
        "8753": "P52.1",
        "8754": "P52.21",
        "8755": "P52.22",
        "8756": "P52.3",
        "8757": "P52.4",
        "8758": "P52.6",
        "8759": "P52.8",
        "8760": "P54.0",
        "8761": "P54.3",
        "8762": "P54.6",
        "8763": "P55.8",
        "8764": "P55.9",
        "8765": "P56.90",
        "8766": "P56.99",
        "8767": "P57.9",
        "8768": "P58.3",
        "8769": "P58.42",
        "8770": "P58.8",
        "8771": "P58.9",
        "8772": "P59.1",
        "8773": "P59.3",
        "8774": "P61.0",
        "8775": "P61.1",
        "8776": "P61.2",
        "8777": "P61.4",
        "8778": "P61.9",
        "8779": "P70.1",
        "8780": "P70.2",
        "8781": "P70.4",
        "8782": "P70.8",
        "8783": "P70.9",
        "8784": "P71.1",
        "8785": "P71.2",
        "8786": "P71.3",
        "8787": "P72.1",
        "8788": "P72.2",
        "8789": "P72.8",
        "8790": "P72.9",
        "8791": "P74.1",
        "8792": "P74.2",
        "8793": "P74.3",
        "8794": "P74.4",
        "8795": "P74.5",
        "8796": "P74.6",
        "8797": "P74.8",
        "8798": "P76.0",
        "8799": "P76.1",
        "8800": "P76.2",
        "8801": "P76.8",
        "8802": "P76.9",
        "8803": "P77.9",
        "8804": "P78.0",
        "8805": "P78.3",
        "8806": "P78.9",
        "8807": "P80.0",
        "8808": "P80.8",
        "8809": "P80.9",
        "8810": "P83.0",
        "8811": "P83.2",
        "8812": "P83.30",
        "8813": "P83.39",
        "8814": "P83.4",
        "8815": "P83.5",
        "8816": "P83.8",
        "8817": "P83.9",
        "8818": "P91.0",
        "8819": "P91.2",
        "8820": "P91.60",
        "8821": "P91.61",
        "8822": "P91.63",
        "8823": "P91.8",
        "8824": "P91.9",
        "8825": "P92.09",
        "8826": "P92.1",
        "8827": "P92.3",
        "8828": "P92.4",
        "8829": "P92.5",
        "8830": "P92.6",
        "8831": "P92.8",
        "8832": "P92.9",
        "8833": "P93.8",
        "8834": "P94.1",
        "8835": "P94.2",
        "8836": "P94.8",
        "8837": "P96.2",
        "8838": "P96.5",
        "8839": "P96.83",
        "8840": "P96.9",
        "8841": "Q00.0",
        "8842": "Q00.1",
        "8843": "Q00.2",
        "8844": "Q01.8",
        "8845": "Q03.8",
        "8846": "Q03.9",
        "8847": "Q04.1",
        "8848": "Q04.3",
        "8849": "Q04.5",
        "8850": "Q04.6",
        "8851": "Q04.9",
        "8852": "Q05.4",
        "8853": "Q05.5",
        "8854": "Q05.8",
        "8855": "Q05.9",
        "8856": "Q06.0",
        "8857": "Q06.1",
        "8858": "Q06.2",
        "8859": "Q06.8",
        "8860": "Q06.9",
        "8861": "Q07.02",
        "8862": "Q07.03",
        "8863": "Q07.8",
        "8864": "Q10.0",
        "8865": "Q10.1",
        "8866": "Q10.2",
        "8867": "Q10.3",
        "8868": "Q10.4",
        "8869": "Q10.5",
        "8870": "Q10.6",
        "8871": "Q10.7",
        "8872": "Q11.2",
        "8873": "Q12.1",
        "8874": "Q12.2",
        "8875": "Q12.4",
        "8876": "Q12.8",
        "8877": "Q12.9",
        "8878": "Q13.0",
        "8879": "Q13.1",
        "8880": "Q13.2",
        "8881": "Q13.5",
        "8882": "Q13.81",
        "8883": "Q13.89",
        "8884": "Q14.0",
        "8885": "Q15.0",
        "8886": "Q15.8",
        "8887": "Q15.9",
        "8888": "Q16.4",
        "8889": "Q16.9",
        "8890": "Q17.1",
        "8891": "Q17.5",
        "8892": "Q17.9",
        "8893": "Q18.0",
        "8894": "Q18.1",
        "8895": "Q18.2",
        "8896": "Q18.4",
        "8897": "Q18.5",
        "8898": "Q18.8",
        "8899": "Q18.9",
        "8900": "Q20.0",
        "8901": "Q20.1",
        "8902": "Q20.2",
        "8903": "Q20.3",
        "8904": "Q20.8",
        "8905": "Q20.9",
        "8906": "Q21.0",
        "8907": "Q21.1",
        "8908": "Q21.2",
        "8909": "Q21.4",
        "8910": "Q21.8",
        "8911": "Q22.0",
        "8912": "Q22.2",
        "8913": "Q22.3",
        "8914": "Q22.5",
        "8915": "Q22.6",
        "8916": "Q22.8",
        "8917": "Q22.9",
        "8918": "Q23.0",
        "8919": "Q23.4",
        "8920": "Q23.8",
        "8921": "Q24.3",
        "8922": "Q24.4",
        "8923": "Q24.6",
        "8924": "Q24.8",
        "8925": "Q25.0",
        "8926": "Q25.2",
        "8927": "Q25.4",
        "8928": "Q25.5",
        "8929": "Q25.6",
        "8930": "Q25.71",
        "8931": "Q25.72",
        "8932": "Q25.79",
        "8933": "Q25.9",
        "8934": "Q26.0",
        "8935": "Q26.1",
        "8936": "Q26.3",
        "8937": "Q26.4",
        "8938": "Q26.8",
        "8939": "Q26.9",
        "8940": "Q27.1",
        "8941": "Q27.2",
        "8942": "Q27.30",
        "8943": "Q27.31",
        "8944": "Q27.32",
        "8945": "Q27.34",
        "8946": "Q27.4",
        "8947": "Q27.9",
        "8948": "Q28.0",
        "8949": "Q28.1",
        "8950": "Q28.2",
        "8951": "Q28.8",
        "8952": "Q30.1",
        "8953": "Q30.2",
        "8954": "Q30.8",
        "8955": "Q30.9",
        "8956": "Q31.2",
        "8957": "Q31.5",
        "8958": "Q31.8",
        "8959": "Q32.0",
        "8960": "Q32.1",
        "8961": "Q32.3",
        "8962": "Q32.4",
        "8963": "Q33.1",
        "8964": "Q33.3",
        "8965": "Q33.4",
        "8966": "Q33.5",
        "8967": "Q33.8",
        "8968": "Q33.9",
        "8969": "Q34.0",
        "8970": "Q34.8",
        "8971": "Q34.9",
        "8972": "Q35.1",
        "8973": "Q35.7",
        "8974": "Q35.9",
        "8975": "Q36.9",
        "8976": "Q37.0",
        "8977": "Q37.4",
        "8978": "Q37.5",
        "8979": "Q38.0",
        "8980": "Q38.1",
        "8981": "Q38.2",
        "8982": "Q38.3",
        "8983": "Q38.6",
        "8984": "Q38.8",
        "8985": "Q39.0",
        "8986": "Q39.1",
        "8987": "Q39.4",
        "8988": "Q39.6",
        "8989": "Q39.8",
        "8990": "Q40.0",
        "8991": "Q40.1",
        "8992": "Q40.2",
        "8993": "Q40.3",
        "8994": "Q40.9",
        "8995": "Q41.0",
        "8996": "Q41.1",
        "8997": "Q41.2",
        "8998": "Q42.2",
        "8999": "Q42.3",
        "9000": "Q42.8",
        "9001": "Q42.9",
        "9002": "Q43.1",
        "9003": "Q43.4",
        "9004": "Q43.5",
        "9005": "Q43.6",
        "9006": "Q43.7",
        "9007": "Q43.8",
        "9008": "Q43.9",
        "9009": "Q44.0",
        "9010": "Q44.1",
        "9011": "Q44.3",
        "9012": "Q44.5",
        "9013": "Q45.3",
        "9014": "Q45.9",
        "9015": "Q50.01",
        "9016": "Q50.32",
        "9017": "Q50.39",
        "9018": "Q50.4",
        "9019": "Q50.5",
        "9020": "Q50.6",
        "9021": "Q51.0",
        "9022": "Q51.10",
        "9023": "Q51.11",
        "9024": "Q51.2",
        "9025": "Q51.3",
        "9026": "Q51.4",
        "9027": "Q51.81",
        "9028": "Q51.82",
        "9029": "Q51.9",
        "9030": "Q52.0",
        "9031": "Q52.10",
        "9032": "Q52.11",
        "9033": "Q52.70",
        "9034": "Q52.8",
        "9035": "Q52.9",
        "9036": "Q53.00",
        "9037": "Q53.01",
        "9038": "Q53.11",
        "9039": "Q53.12",
        "9040": "Q53.20",
        "9041": "Q53.21",
        "9042": "Q53.22",
        "9043": "Q53.9",
        "9044": "Q54.2",
        "9045": "Q54.3",
        "9046": "Q54.9",
        "9047": "Q55.21",
        "9048": "Q55.22",
        "9049": "Q55.23",
        "9050": "Q55.29",
        "9051": "Q55.3",
        "9052": "Q55.4",
        "9053": "Q55.63",
        "9054": "Q55.64",
        "9055": "Q55.7",
        "9056": "Q55.8",
        "9057": "Q55.9",
        "9058": "Q56.0",
        "9059": "Q56.2",
        "9060": "Q60.0",
        "9061": "Q60.1",
        "9062": "Q60.2",
        "9063": "Q60.3",
        "9064": "Q60.6",
        "9065": "Q61.0",
        "9066": "Q61.00",
        "9067": "Q61.02",
        "9068": "Q61.11",
        "9069": "Q61.19",
        "9070": "Q61.2",
        "9071": "Q61.4",
        "9072": "Q61.5",
        "9073": "Q62.10",
        "9074": "Q62.11",
        "9075": "Q62.12",
        "9076": "Q62.2",
        "9077": "Q62.31",
        "9078": "Q62.39",
        "9079": "Q62.5",
        "9080": "Q62.60",
        "9081": "Q62.62",
        "9082": "Q62.63",
        "9083": "Q62.69",
        "9084": "Q62.7",
        "9085": "Q62.8",
        "9086": "Q63.0",
        "9087": "Q63.1",
        "9088": "Q63.2",
        "9089": "Q63.3",
        "9090": "Q63.8",
        "9091": "Q63.9",
        "9092": "Q64.11",
        "9093": "Q64.12",
        "9094": "Q64.19",
        "9095": "Q64.2",
        "9096": "Q64.32",
        "9097": "Q64.39",
        "9098": "Q64.4",
        "9099": "Q64.5",
        "9100": "Q64.6",
        "9101": "Q64.71",
        "9102": "Q64.72",
        "9103": "Q64.73",
        "9104": "Q64.75",
        "9105": "Q64.79",
        "9106": "Q65.00",
        "9107": "Q65.01",
        "9108": "Q65.2",
        "9109": "Q65.30",
        "9110": "Q65.31",
        "9111": "Q65.32",
        "9112": "Q65.4",
        "9113": "Q65.5",
        "9114": "Q65.82",
        "9115": "Q65.89",
        "9116": "Q65.9",
        "9117": "Q66.0",
        "9118": "Q66.2",
        "9119": "Q66.3",
        "9120": "Q66.50",
        "9121": "Q66.51",
        "9122": "Q66.6",
        "9123": "Q66.7",
        "9124": "Q66.80",
        "9125": "Q66.82",
        "9126": "Q66.89",
        "9127": "Q66.9",
        "9128": "Q67.0",
        "9129": "Q67.3",
        "9130": "Q67.4",
        "9131": "Q67.5",
        "9132": "Q67.6",
        "9133": "Q67.8",
        "9134": "Q68.4",
        "9135": "Q68.8",
        "9136": "Q69.2",
        "9137": "Q69.9",
        "9138": "Q70.00",
        "9139": "Q70.02",
        "9140": "Q70.12",
        "9141": "Q70.13",
        "9142": "Q70.20",
        "9143": "Q70.21",
        "9144": "Q70.22",
        "9145": "Q70.30",
        "9146": "Q70.31",
        "9147": "Q70.33",
        "9148": "Q71.00",
        "9149": "Q71.01",
        "9150": "Q71.02",
        "9151": "Q71.12",
        "9152": "Q71.13",
        "9153": "Q71.20",
        "9154": "Q71.21",
        "9155": "Q71.22",
        "9156": "Q71.23",
        "9157": "Q71.31",
        "9158": "Q71.32",
        "9159": "Q71.33",
        "9160": "Q71.40",
        "9161": "Q71.41",
        "9162": "Q71.42",
        "9163": "Q71.43",
        "9164": "Q71.50",
        "9165": "Q71.51",
        "9166": "Q71.62",
        "9167": "Q71.63",
        "9168": "Q71.81",
        "9169": "Q71.89",
        "9170": "Q71.91",
        "9171": "Q71.92",
        "9172": "Q71.93",
        "9173": "Q72.00",
        "9174": "Q72.02",
        "9175": "Q72.03",
        "9176": "Q72.10",
        "9177": "Q72.11",
        "9178": "Q72.12",
        "9179": "Q72.13",
        "9180": "Q72.21",
        "9181": "Q72.23",
        "9182": "Q72.30",
        "9183": "Q72.31",
        "9184": "Q72.33",
        "9185": "Q72.41",
        "9186": "Q72.42",
        "9187": "Q72.43",
        "9188": "Q72.51",
        "9189": "Q72.52",
        "9190": "Q72.53",
        "9191": "Q72.60",
        "9192": "Q72.62",
        "9193": "Q72.70",
        "9194": "Q72.71",
        "9195": "Q72.73",
        "9196": "Q72.81",
        "9197": "Q72.89",
        "9198": "Q72.90",
        "9199": "Q72.91",
        "9200": "Q72.92",
        "9201": "Q72.93",
        "9202": "Q73.8",
        "9203": "Q74.2",
        "9204": "Q74.3",
        "9205": "Q74.8",
        "9206": "Q74.9",
        "9207": "Q75.0",
        "9208": "Q75.2",
        "9209": "Q75.4",
        "9210": "Q75.8",
        "9211": "Q75.9",
        "9212": "Q76.0",
        "9213": "Q76.1",
        "9214": "Q76.41",
        "9215": "Q76.42",
        "9216": "Q76.49",
        "9217": "Q76.5",
        "9218": "Q76.7",
        "9219": "Q76.8",
        "9220": "Q76.9",
        "9221": "Q77.0",
        "9222": "Q77.1",
        "9223": "Q77.2",
        "9224": "Q77.3",
        "9225": "Q77.4",
        "9226": "Q77.5",
        "9227": "Q77.8",
        "9228": "Q78.0",
        "9229": "Q78.2",
        "9230": "Q78.3",
        "9231": "Q78.4",
        "9232": "Q78.5",
        "9233": "Q78.6",
        "9234": "Q78.9",
        "9235": "Q79.0",
        "9236": "Q79.2",
        "9237": "Q79.3",
        "9238": "Q79.4",
        "9239": "Q79.6",
        "9240": "Q79.8",
        "9241": "Q79.9",
        "9242": "Q80.0",
        "9243": "Q80.1",
        "9244": "Q80.4",
        "9245": "Q81.0",
        "9246": "Q81.1",
        "9247": "Q81.8",
        "9248": "Q81.9",
        "9249": "Q82.0",
        "9250": "Q82.1",
        "9251": "Q82.4",
        "9252": "Q82.5",
        "9253": "Q82.8",
        "9254": "Q83.0",
        "9255": "Q83.2",
        "9256": "Q84.0",
        "9257": "Q84.1",
        "9258": "Q84.4",
        "9259": "Q84.5",
        "9260": "Q84.6",
        "9261": "Q85.00",
        "9262": "Q85.02",
        "9263": "Q85.03",
        "9264": "Q85.1",
        "9265": "Q85.8",
        "9266": "Q85.9",
        "9267": "Q87.1",
        "9268": "Q87.40",
        "9269": "Q87.41",
        "9270": "Q87.42",
        "9271": "Q87.5",
        "9272": "Q87.81",
        "9273": "Q87.89",
        "9274": "Q89.09",
        "9275": "Q89.2",
        "9276": "Q89.3",
        "9277": "Q89.7",
        "9278": "Q89.8",
        "9279": "Q90.0",
        "9280": "Q90.1",
        "9281": "Q90.9",
        "9282": "Q91.1",
        "9283": "Q91.2",
        "9284": "Q91.3",
        "9285": "Q91.4",
        "9286": "Q91.5",
        "9287": "Q92.0",
        "9288": "Q92.1",
        "9289": "Q92.2",
        "9290": "Q92.5",
        "9291": "Q92.7",
        "9292": "Q92.8",
        "9293": "Q93.1",
        "9294": "Q93.2",
        "9295": "Q93.5",
        "9296": "Q93.88",
        "9297": "Q93.89",
        "9298": "Q95.0",
        "9299": "Q95.1",
        "9300": "Q95.2",
        "9301": "Q95.5",
        "9302": "Q95.9",
        "9303": "Q96.1",
        "9304": "Q96.2",
        "9305": "Q96.3",
        "9306": "Q96.4",
        "9307": "Q96.9",
        "9308": "Q97.1",
        "9309": "Q97.2",
        "9310": "Q97.3",
        "9311": "Q97.8",
        "9312": "Q97.9",
        "9313": "Q98.0",
        "9314": "Q98.1",
        "9315": "Q98.3",
        "9316": "Q98.4",
        "9317": "Q98.5",
        "9318": "Q98.6",
        "9319": "Q98.8",
        "9320": "Q98.9",
        "9321": "Q99.2",
        "9322": "Q99.8",
        "9323": "R00.0",
        "9324": "R00.1",
        "9325": "R00.2",
        "9326": "R00.8",
        "9327": "R00.9",
        "9328": "R01.1",
        "9329": "R01.2",
        "9330": "R03.0",
        "9331": "R04.0",
        "9332": "R04.1",
        "9333": "R04.2",
        "9334": "R04.81",
        "9335": "R04.9",
        "9336": "R05.2",
        "9337": "R06.0",
        "9338": "R06.01",
        "9339": "R06.02",
        "9340": "R06.09",
        "9341": "R06.1",
        "9342": "R06.2",
        "9343": "R06.3",
        "9344": "R06.4",
        "9345": "R06.5",
        "9346": "R06.7",
        "9347": "R06.8",
        "9348": "R06.82",
        "9349": "R06.83",
        "9350": "R06.89",
        "9351": "R07.0",
        "9352": "R07.1",
        "9353": "R07.3",
        "9354": "R07.4",
        "9355": "R07.82",
        "9356": "R07.9",
        "9357": "R09.0",
        "9358": "R09.01",
        "9359": "R09.1",
        "9360": "R09.3",
        "9361": "R10.0",
        "9362": "R10.1",
        "9363": "R10.11",
        "9364": "R10.12",
        "9365": "R10.13",
        "9366": "R10.2",
        "9367": "R10.3",
        "9368": "R10.31",
        "9369": "R10.32",
        "9370": "R10.33",
        "9371": "R10.4",
        "9372": "R10.81",
        "9373": "R10.82",
        "9374": "R10.9",
        "9375": "R11.0",
        "9376": "R11.11",
        "9377": "R11.13",
        "9378": "R11.2",
        "9379": "R13.10",
        "9380": "R13.11",
        "9381": "R13.12",
        "9382": "R13.14",
        "9383": "R14.0",
        "9384": "R14.2",
        "9385": "R14.3",
        "9386": "R16.0",
        "9387": "R16.1",
        "9388": "R18.0",
        "9389": "R18.8",
        "9390": "R19.0",
        "9391": "R19.00",
        "9392": "R19.01",
        "9393": "R19.02",
        "9394": "R19.03",
        "9395": "R19.05",
        "9396": "R19.07",
        "9397": "R19.09",
        "9398": "R19.1",
        "9399": "R19.12",
        "9400": "R19.15",
        "9401": "R19.2",
        "9402": "R19.3",
        "9403": "R19.31",
        "9404": "R19.32",
        "9405": "R19.33",
        "9406": "R19.35",
        "9407": "R19.36",
        "9408": "R19.37",
        "9409": "R19.5",
        "9410": "R19.6",
        "9411": "R19.7",
        "9412": "R19.8",
        "9413": "R20.0",
        "9414": "R20.1",
        "9415": "R20.2",
        "9416": "R20.5",
        "9417": "R20.8",
        "9418": "R20.9",
        "9419": "R22.0",
        "9420": "R22.1",
        "9421": "R22.2",
        "9422": "R22.3",
        "9423": "R22.4",
        "9424": "R22.42",
        "9425": "R22.43",
        "9426": "R22.9",
        "9427": "R23.0",
        "9428": "R23.2",
        "9429": "R23.3",
        "9430": "R23.4",
        "9431": "R23.8",
        "9432": "R25.0",
        "9433": "R25.1",
        "9434": "R25.2",
        "9435": "R25.3",
        "9436": "R25.9",
        "9437": "R26.0",
        "9438": "R26.1",
        "9439": "R26.2",
        "9440": "R26.8",
        "9441": "R26.89",
        "9442": "R27.0",
        "9443": "R27.9",
        "9444": "R29.0",
        "9445": "R29.1",
        "9446": "R29.2",
        "9447": "R29.3",
        "9448": "R29.4",
        "9449": "R29.5",
        "9450": "R29.6",
        "9451": "R29.81",
        "9452": "R29.89",
        "9453": "R29.90",
        "9454": "R29.91",
        "9455": "R30.0",
        "9456": "R30.1",
        "9457": "R30.9",
        "9458": "R31.0",
        "9459": "R31.2",
        "9460": "R31.9",
        "9461": "R33.0",
        "9462": "R33.8",
        "9463": "R33.9",
        "9464": "R35.1",
        "9465": "R35.8",
        "9466": "R36.0",
        "9467": "R36.1",
        "9468": "R39.0",
        "9469": "R39.1",
        "9470": "R39.11",
        "9471": "R39.13",
        "9472": "R39.81",
        "9473": "R39.89",
        "9474": "R39.9",
        "9475": "R40.0",
        "9476": "R40.2",
        "9477": "R40.21",
        "9478": "R40.22",
        "9479": "R40.23",
        "9480": "R40.24",
        "9481": "R40.4",
        "9482": "R41.0",
        "9483": "R41.1",
        "9484": "R41.82",
        "9485": "R41.83",
        "9486": "R41.84",
        "9487": "R41.9",
        "9488": "R43.0",
        "9489": "R43.1",
        "9490": "R43.2",
        "9491": "R44.0",
        "9492": "R44.2",
        "9493": "R44.3",
        "9494": "R44.8",
        "9495": "R44.9",
        "9496": "R45.0",
        "9497": "R45.1",
        "9498": "R45.2",
        "9499": "R45.4",
        "9500": "R45.5",
        "9501": "R45.6",
        "9502": "R45.7",
        "9503": "R45.83",
        "9504": "R45.85",
        "9505": "R45.86",
        "9506": "R46.0",
        "9507": "R46.2",
        "9508": "R46.3",
        "9509": "R46.4",
        "9510": "R46.89",
        "9511": "R47.0",
        "9512": "R47.02",
        "9513": "R47.1",
        "9514": "R47.82",
        "9515": "R47.89",
        "9516": "R47.9",
        "9517": "R48.0",
        "9518": "R48.1",
        "9519": "R48.2",
        "9520": "R48.8",
        "9521": "R49.0",
        "9522": "R49.1",
        "9523": "R49.21",
        "9524": "R49.8",
        "9525": "R50.0",
        "9526": "R50.2",
        "9527": "R50.82",
        "9528": "R50.9",
        "9529": "R52.0",
        "9530": "R52.8",
        "9531": "R52.9",
        "9532": "R53.1",
        "9533": "R53.2",
        "9534": "R53.81",
        "9535": "R53.83",
        "9536": "R56.01",
        "9537": "R56.1",
        "9538": "R56.8",
        "9539": "R56.9",
        "9540": "R57.0",
        "9541": "R57.8",
        "9542": "R59.0",
        "9543": "R59.1",
        "9544": "R59.9",
        "9545": "R60.0",
        "9546": "R60.1",
        "9547": "R60.8",
        "9548": "R60.9",
        "9549": "R61.0",
        "9550": "R61.9",
        "9551": "R62.0",
        "9552": "R62.50",
        "9553": "R62.51",
        "9554": "R62.52",
        "9555": "R62.7",
        "9556": "R62.8",
        "9557": "R63.0",
        "9558": "R63.1",
        "9559": "R63.2",
        "9560": "R63.3",
        "9561": "R63.4",
        "9562": "R63.5",
        "9563": "R63.6",
        "9564": "R65.11",
        "9565": "R65.21",
        "9566": "R68.0",
        "9567": "R68.12",
        "9568": "R68.13",
        "9569": "R68.19",
        "9570": "R68.2",
        "9571": "R68.3",
        "9572": "R68.8",
        "9573": "R68.84",
        "9574": "R68.89",
        "9575": "R70.0",
        "9576": "R70.1",
        "9577": "R71.0",
        "9578": "R73.0",
        "9579": "R73.01",
        "9580": "R73.02",
        "9581": "R73.09",
        "9582": "R73.9",
        "9583": "R74.8",
        "9584": "R76.0",
        "9585": "R76.11",
        "9586": "R76.12",
        "9587": "R76.8",
        "9588": "R76.9",
        "9589": "R77.0",
        "9590": "R77.2",
        "9591": "R77.9",
        "9592": "R78.0",
        "9593": "R78.1",
        "9594": "R78.2",
        "9595": "R78.3",
        "9596": "R78.81",
        "9597": "R78.89",
        "9598": "R78.9",
        "9599": "R79.0",
        "9600": "R79.81",
        "9601": "R79.82",
        "9602": "R80.0",
        "9603": "R80.3",
        "9604": "R80.8",
        "9605": "R80.9",
        "9606": "R82.2",
        "9607": "R82.3",
        "9608": "R82.5",
        "9609": "R82.6",
        "9610": "R82.7",
        "9611": "R82.8",
        "9612": "R82.90",
        "9613": "R82.91",
        "9614": "R83.1",
        "9615": "R83.2",
        "9616": "R83.3",
        "9617": "R83.4",
        "9618": "R83.8",
        "9619": "R84.0",
        "9620": "R84.1",
        "9621": "R84.2",
        "9622": "R84.4",
        "9623": "R84.6",
        "9624": "R84.7",
        "9625": "R84.9",
        "9626": "R85.0",
        "9627": "R85.2",
        "9628": "R85.5",
        "9629": "R85.61",
        "9630": "R85.69",
        "9631": "R85.7",
        "9632": "R85.82",
        "9633": "R85.89",
        "9634": "R85.9",
        "9635": "R86.1",
        "9636": "R86.2",
        "9637": "R86.4",
        "9638": "R86.6",
        "9639": "R86.9",
        "9640": "R87.0",
        "9641": "R87.1",
        "9642": "R87.3",
        "9643": "R87.4",
        "9644": "R87.61",
        "9645": "R87.62",
        "9646": "R87.7",
        "9647": "R87.81",
        "9648": "R87.82",
        "9649": "R87.89",
        "9650": "R88.0",
        "9651": "R88.8",
        "9652": "R89.0",
        "9653": "R89.1",
        "9654": "R89.2",
        "9655": "R89.3",
        "9656": "R89.4",
        "9657": "R89.5",
        "9658": "R89.6",
        "9659": "R89.9",
        "9660": "R90.81",
        "9661": "R90.82",
        "9662": "R92.1",
        "9663": "R92.2",
        "9664": "R93.1",
        "9665": "R93.2",
        "9666": "R93.3",
        "9667": "R93.5",
        "9668": "R93.6",
        "9669": "R93.8",
        "9670": "R94.01",
        "9671": "R94.02",
        "9672": "R94.09",
        "9673": "R94.11",
        "9674": "R94.12",
        "9675": "R94.13",
        "9676": "R94.30",
        "9677": "R94.31",
        "9678": "R94.39",
        "9679": "R94.4",
        "9680": "R94.5",
        "9681": "R94.6",
        "9682": "R94.7",
        "9683": "R94.8",
        "9684": "R97.1",
        "9685": "R97.8",
        "9686": "S00.00",
        "9687": "S00.01",
        "9688": "S00.02",
        "9689": "S00.03",
        "9690": "S00.04",
        "9691": "S00.05",
        "9692": "S00.06",
        "9693": "S00.07",
        "9694": "S00.1",
        "9695": "S00.10",
        "9696": "S00.11",
        "9697": "S00.12",
        "9698": "S00.20",
        "9699": "S00.21",
        "9700": "S00.22",
        "9701": "S00.24",
        "9702": "S00.25",
        "9703": "S00.26",
        "9704": "S00.27",
        "9705": "S00.3",
        "9706": "S00.30",
        "9707": "S00.31",
        "9708": "S00.32",
        "9709": "S00.33",
        "9710": "S00.34",
        "9711": "S00.35",
        "9712": "S00.36",
        "9713": "S00.37",
        "9714": "S00.40",
        "9715": "S00.41",
        "9716": "S00.42",
        "9717": "S00.43",
        "9718": "S00.44",
        "9719": "S00.45",
        "9720": "S00.46",
        "9721": "S00.47",
        "9722": "S00.50",
        "9723": "S00.51",
        "9724": "S00.52",
        "9725": "S00.53",
        "9726": "S00.54",
        "9727": "S00.55",
        "9728": "S00.56",
        "9729": "S00.57",
        "9730": "S00.82",
        "9731": "S00.83",
        "9732": "S00.84",
        "9733": "S00.85",
        "9734": "S00.86",
        "9735": "S00.87",
        "9736": "S00.9",
        "9737": "S00.90",
        "9738": "S00.91",
        "9739": "S00.92",
        "9740": "S00.93",
        "9741": "S00.94",
        "9742": "S00.95",
        "9743": "S00.97",
        "9744": "S01.01",
        "9745": "S01.02",
        "9746": "S01.04",
        "9747": "S01.05",
        "9748": "S01.1",
        "9749": "S01.10",
        "9750": "S01.11",
        "9751": "S01.12",
        "9752": "S01.13",
        "9753": "S01.14",
        "9754": "S01.15",
        "9755": "S01.2",
        "9756": "S01.20",
        "9757": "S01.21",
        "9758": "S01.22",
        "9759": "S01.23",
        "9760": "S01.24",
        "9761": "S01.25",
        "9762": "S01.3",
        "9763": "S01.30",
        "9764": "S01.31",
        "9765": "S01.32",
        "9766": "S01.33",
        "9767": "S01.34",
        "9768": "S01.35",
        "9769": "S01.40",
        "9770": "S01.41",
        "9771": "S01.42",
        "9772": "S01.43",
        "9773": "S01.44",
        "9774": "S01.45",
        "9775": "S01.5",
        "9776": "S01.50",
        "9777": "S01.51",
        "9778": "S01.52",
        "9779": "S01.53",
        "9780": "S01.54",
        "9781": "S01.55",
        "9782": "S01.7",
        "9783": "S01.8",
        "9784": "S01.80",
        "9785": "S01.81",
        "9786": "S01.82",
        "9787": "S01.83",
        "9788": "S01.84",
        "9789": "S01.85",
        "9790": "S01.9",
        "9791": "S01.90",
        "9792": "S01.91",
        "9793": "S01.92",
        "9794": "S01.93",
        "9795": "S01.94",
        "9796": "S01.95",
        "9797": "S02.0X",
        "9798": "S02.10",
        "9799": "S02.11",
        "9800": "S02.19",
        "9801": "S02.2",
        "9802": "S02.2X",
        "9803": "S02.3X",
        "9804": "S02.40",
        "9805": "S02.41",
        "9806": "S02.42",
        "9807": "S02.5",
        "9808": "S02.5X",
        "9809": "S02.60",
        "9810": "S02.61",
        "9811": "S02.62",
        "9812": "S02.63",
        "9813": "S02.64",
        "9814": "S02.65",
        "9815": "S02.66",
        "9816": "S02.67",
        "9817": "S02.69",
        "9818": "S02.8X",
        "9819": "S02.9",
        "9820": "S02.91",
        "9821": "S02.92",
        "9822": "S03.0",
        "9823": "S03.0X",
        "9824": "S03.1",
        "9825": "S03.1X",
        "9826": "S03.4",
        "9827": "S03.4X",
        "9828": "S03.8X",
        "9829": "S03.9X",
        "9830": "S04.01",
        "9831": "S04.02",
        "9832": "S04.03",
        "9833": "S04.04",
        "9834": "S04.10",
        "9835": "S04.11",
        "9836": "S04.12",
        "9837": "S04.20",
        "9838": "S04.21",
        "9839": "S04.22",
        "9840": "S04.30",
        "9841": "S04.31",
        "9842": "S04.32",
        "9843": "S04.40",
        "9844": "S04.41",
        "9845": "S04.42",
        "9846": "S04.50",
        "9847": "S04.51",
        "9848": "S04.52",
        "9849": "S04.60",
        "9850": "S04.61",
        "9851": "S04.62",
        "9852": "S04.70",
        "9853": "S04.71",
        "9854": "S04.81",
        "9855": "S04.89",
        "9856": "S04.9X",
        "9857": "S05.00",
        "9858": "S05.01",
        "9859": "S05.02",
        "9860": "S05.10",
        "9861": "S05.11",
        "9862": "S05.12",
        "9863": "S05.20",
        "9864": "S05.22",
        "9865": "S05.30",
        "9866": "S05.31",
        "9867": "S05.32",
        "9868": "S05.4",
        "9869": "S05.40",
        "9870": "S05.41",
        "9871": "S05.42",
        "9872": "S05.5",
        "9873": "S05.50",
        "9874": "S05.51",
        "9875": "S05.52",
        "9876": "S05.60",
        "9877": "S05.61",
        "9878": "S05.62",
        "9879": "S05.70",
        "9880": "S05.71",
        "9881": "S05.72",
        "9882": "S05.8X",
        "9883": "S05.9",
        "9884": "S05.90",
        "9885": "S05.91",
        "9886": "S05.92",
        "9887": "S06.0",
        "9888": "S06.0X",
        "9889": "S06.1X",
        "9890": "S06.2X",
        "9891": "S06.3",
        "9892": "S06.30",
        "9893": "S06.31",
        "9894": "S06.32",
        "9895": "S06.33",
        "9896": "S06.34",
        "9897": "S06.35",
        "9898": "S06.36",
        "9899": "S06.37",
        "9900": "S06.38",
        "9901": "S06.4X",
        "9902": "S06.5X",
        "9903": "S06.6X",
        "9904": "S06.81",
        "9905": "S06.82",
        "9906": "S06.89",
        "9907": "S06.9",
        "9908": "S06.9X",
        "9909": "S07.0X",
        "9910": "S07.1X",
        "9911": "S07.8X",
        "9912": "S07.9X",
        "9913": "S08.0X",
        "9914": "S08.11",
        "9915": "S08.12",
        "9916": "S08.81",
        "9917": "S08.89",
        "9918": "S09.0X",
        "9919": "S09.10",
        "9920": "S09.11",
        "9921": "S09.12",
        "9922": "S09.19",
        "9923": "S09.20",
        "9924": "S09.21",
        "9925": "S09.22",
        "9926": "S09.30",
        "9927": "S09.31",
        "9928": "S09.39",
        "9929": "S09.8X",
        "9930": "S09.9",
        "9931": "S09.90",
        "9932": "S09.91",
        "9933": "S09.92",
        "9934": "S09.93",
        "9935": "S10.0X",
        "9936": "S10.10",
        "9937": "S10.11",
        "9938": "S10.12",
        "9939": "S10.14",
        "9940": "S10.15",
        "9941": "S10.16",
        "9942": "S10.17",
        "9943": "S10.80",
        "9944": "S10.81",
        "9945": "S10.82",
        "9946": "S10.83",
        "9947": "S10.84",
        "9948": "S10.85",
        "9949": "S10.86",
        "9950": "S10.87",
        "9951": "S10.90",
        "9952": "S10.91",
        "9953": "S10.92",
        "9954": "S10.93",
        "9955": "S10.94",
        "9956": "S10.95",
        "9957": "S10.96",
        "9958": "S10.97",
        "9959": "S11.01",
        "9960": "S11.02",
        "9961": "S11.03",
        "9962": "S11.10",
        "9963": "S11.11",
        "9964": "S11.12",
        "9965": "S11.13",
        "9966": "S11.14",
        "9967": "S11.15",
        "9968": "S11.20",
        "9969": "S11.21",
        "9970": "S11.22",
        "9971": "S11.23",
        "9972": "S11.25",
        "9973": "S11.80",
        "9974": "S11.81",
        "9975": "S11.82",
        "9976": "S11.83",
        "9977": "S11.84",
        "9978": "S11.85",
        "9979": "S11.89",
        "9980": "S11.91",
        "9981": "S11.92",
        "9982": "S11.93",
        "9983": "S11.94",
        "9984": "S11.95",
        "9985": "S12.00",
        "9986": "S12.01",
        "9987": "S12.02",
        "9988": "S12.03",
        "9989": "S12.04",
        "9990": "S12.09",
        "9991": "S12.10",
        "9992": "S12.11",
        "9993": "S12.12",
        "9994": "S12.13",
        "9995": "S12.14",
        "9996": "S12.15",
        "9997": "S12.19",
        "9998": "S12.20",
        "9999": "S12.23",
        "10000": "S12.24",
        "10001": "S12.25",
        "10002": "S12.29",
        "10003": "S12.30",
        "10004": "S12.33",
        "10005": "S12.34",
        "10006": "S12.35",
        "10007": "S12.39",
        "10008": "S12.40",
        "10009": "S12.43",
        "10010": "S12.44",
        "10011": "S12.45",
        "10012": "S12.49",
        "10013": "S12.50",
        "10014": "S12.53",
        "10015": "S12.54",
        "10016": "S12.55",
        "10017": "S12.59",
        "10018": "S12.60",
        "10019": "S12.63",
        "10020": "S12.64",
        "10021": "S12.65",
        "10022": "S12.69",
        "10023": "S12.8X",
        "10024": "S12.9X",
        "10025": "S13.0X",
        "10026": "S13.10",
        "10027": "S13.11",
        "10028": "S13.12",
        "10029": "S13.13",
        "10030": "S13.14",
        "10031": "S13.15",
        "10032": "S13.16",
        "10033": "S13.17",
        "10034": "S13.18",
        "10035": "S13.20",
        "10036": "S13.29",
        "10037": "S13.4",
        "10038": "S13.4X",
        "10039": "S13.5X",
        "10040": "S13.6",
        "10041": "S14.0X",
        "10042": "S14.10",
        "10043": "S14.11",
        "10044": "S14.12",
        "10045": "S14.13",
        "10046": "S14.14",
        "10047": "S14.15",
        "10048": "S14.2X",
        "10049": "S14.3X",
        "10050": "S14.4X",
        "10051": "S14.5X",
        "10052": "S14.8X",
        "10053": "S14.9X",
        "10054": "S15.00",
        "10055": "S15.01",
        "10056": "S15.02",
        "10057": "S15.09",
        "10058": "S15.10",
        "10059": "S15.11",
        "10060": "S15.12",
        "10061": "S15.19",
        "10062": "S15.20",
        "10063": "S15.21",
        "10064": "S15.22",
        "10065": "S15.29",
        "10066": "S15.30",
        "10067": "S15.31",
        "10068": "S15.32",
        "10069": "S15.39",
        "10070": "S15.9X",
        "10071": "S16.1X",
        "10072": "S16.8X",
        "10073": "S16.9X",
        "10074": "S17.0X",
        "10075": "S17.8X",
        "10076": "S17.9X",
        "10077": "S19.80",
        "10078": "S19.81",
        "10079": "S19.82",
        "10080": "S19.83",
        "10081": "S19.84",
        "10082": "S19.85",
        "10083": "S19.89",
        "10084": "S19.9",
        "10085": "S19.9X",
        "10086": "S20.00",
        "10087": "S20.02",
        "10088": "S20.10",
        "10089": "S20.11",
        "10090": "S20.12",
        "10091": "S20.14",
        "10092": "S20.15",
        "10093": "S20.16",
        "10094": "S20.17",
        "10095": "S20.20",
        "10096": "S20.21",
        "10097": "S20.22",
        "10098": "S20.30",
        "10099": "S20.31",
        "10100": "S20.32",
        "10101": "S20.34",
        "10102": "S20.35",
        "10103": "S20.36",
        "10104": "S20.37",
        "10105": "S20.40",
        "10106": "S20.41",
        "10107": "S20.42",
        "10108": "S20.44",
        "10109": "S20.45",
        "10110": "S20.46",
        "10111": "S20.47",
        "10112": "S20.91",
        "10113": "S20.92",
        "10114": "S20.94",
        "10115": "S20.95",
        "10116": "S20.96",
        "10117": "S20.97",
        "10118": "S21.00",
        "10119": "S21.01",
        "10120": "S21.02",
        "10121": "S21.03",
        "10122": "S21.04",
        "10123": "S21.05",
        "10124": "S21.10",
        "10125": "S21.11",
        "10126": "S21.12",
        "10127": "S21.13",
        "10128": "S21.14",
        "10129": "S21.15",
        "10130": "S21.20",
        "10131": "S21.21",
        "10132": "S21.22",
        "10133": "S21.23",
        "10134": "S21.24",
        "10135": "S21.25",
        "10136": "S21.30",
        "10137": "S21.31",
        "10138": "S21.32",
        "10139": "S21.33",
        "10140": "S21.34",
        "10141": "S21.35",
        "10142": "S21.40",
        "10143": "S21.41",
        "10144": "S21.42",
        "10145": "S21.43",
        "10146": "S21.44",
        "10147": "S21.45",
        "10148": "S21.90",
        "10149": "S21.91",
        "10150": "S21.92",
        "10151": "S21.93",
        "10152": "S21.94",
        "10153": "S21.95",
        "10154": "S22.00",
        "10155": "S22.01",
        "10156": "S22.02",
        "10157": "S22.03",
        "10158": "S22.04",
        "10159": "S22.05",
        "10160": "S22.06",
        "10161": "S22.07",
        "10162": "S22.08",
        "10163": "S22.1",
        "10164": "S22.20",
        "10165": "S22.21",
        "10166": "S22.22",
        "10167": "S22.23",
        "10168": "S22.24",
        "10169": "S22.3",
        "10170": "S22.31",
        "10171": "S22.32",
        "10172": "S22.39",
        "10173": "S22.41",
        "10174": "S22.42",
        "10175": "S22.43",
        "10176": "S22.49",
        "10177": "S22.5X",
        "10178": "S22.9X",
        "10179": "S23.0X",
        "10180": "S23.10",
        "10181": "S23.11",
        "10182": "S23.12",
        "10183": "S23.13",
        "10184": "S23.14",
        "10185": "S23.15",
        "10186": "S23.16",
        "10187": "S23.17",
        "10188": "S23.20",
        "10189": "S23.29",
        "10190": "S23.3X",
        "10191": "S23.41",
        "10192": "S23.42",
        "10193": "S23.9X",
        "10194": "S24.0X",
        "10195": "S24.10",
        "10196": "S24.11",
        "10197": "S24.13",
        "10198": "S24.14",
        "10199": "S24.15",
        "10200": "S24.2X",
        "10201": "S24.3X",
        "10202": "S24.4X",
        "10203": "S24.8X",
        "10204": "S24.9X",
        "10205": "S25.00",
        "10206": "S25.01",
        "10207": "S25.02",
        "10208": "S25.10",
        "10209": "S25.11",
        "10210": "S25.12",
        "10211": "S25.19",
        "10212": "S25.20",
        "10213": "S25.21",
        "10214": "S25.22",
        "10215": "S25.29",
        "10216": "S25.30",
        "10217": "S25.31",
        "10218": "S25.32",
        "10219": "S25.39",
        "10220": "S25.40",
        "10221": "S25.41",
        "10222": "S25.42",
        "10223": "S25.49",
        "10224": "S25.50",
        "10225": "S25.51",
        "10226": "S25.59",
        "10227": "S25.80",
        "10228": "S25.81",
        "10229": "S25.89",
        "10230": "S25.90",
        "10231": "S25.91",
        "10232": "S25.99",
        "10233": "S26.00",
        "10234": "S26.01",
        "10235": "S26.02",
        "10236": "S26.10",
        "10237": "S26.11",
        "10238": "S26.12",
        "10239": "S26.19",
        "10240": "S26.90",
        "10241": "S26.91",
        "10242": "S26.99",
        "10243": "S27.0X",
        "10244": "S27.1X",
        "10245": "S27.2X",
        "10246": "S27.30",
        "10247": "S27.31",
        "10248": "S27.32",
        "10249": "S27.33",
        "10250": "S27.39",
        "10251": "S27.40",
        "10252": "S27.41",
        "10253": "S27.42",
        "10254": "S27.43",
        "10255": "S27.49",
        "10256": "S27.50",
        "10257": "S27.51",
        "10258": "S27.52",
        "10259": "S27.53",
        "10260": "S27.59",
        "10261": "S27.60",
        "10262": "S27.63",
        "10263": "S27.69",
        "10264": "S27.80",
        "10265": "S27.81",
        "10266": "S27.89",
        "10267": "S27.9X",
        "10268": "S28.0X",
        "10269": "S28.1X",
        "10270": "S28.21",
        "10271": "S28.22",
        "10272": "S29.00",
        "10273": "S29.01",
        "10274": "S29.02",
        "10275": "S29.09",
        "10276": "S29.8X",
        "10277": "S29.9",
        "10278": "S29.9X",
        "10279": "S30.0X",
        "10280": "S30.1X",
        "10281": "S30.20",
        "10282": "S30.21",
        "10283": "S30.22",
        "10284": "S30.23",
        "10285": "S30.3X",
        "10286": "S30.81",
        "10287": "S30.82",
        "10288": "S30.84",
        "10289": "S30.85",
        "10290": "S30.86",
        "10291": "S30.87",
        "10292": "S30.91",
        "10293": "S30.92",
        "10294": "S30.94",
        "10295": "S30.95",
        "10296": "S30.96",
        "10297": "S30.98",
        "10298": "S31.00",
        "10299": "S31.01",
        "10300": "S31.02",
        "10301": "S31.03",
        "10302": "S31.04",
        "10303": "S31.05",
        "10304": "S31.10",
        "10305": "S31.11",
        "10306": "S31.12",
        "10307": "S31.13",
        "10308": "S31.14",
        "10309": "S31.15",
        "10310": "S31.20",
        "10311": "S31.21",
        "10312": "S31.22",
        "10313": "S31.23",
        "10314": "S31.24",
        "10315": "S31.25",
        "10316": "S31.30",
        "10317": "S31.31",
        "10318": "S31.32",
        "10319": "S31.33",
        "10320": "S31.34",
        "10321": "S31.40",
        "10322": "S31.41",
        "10323": "S31.42",
        "10324": "S31.43",
        "10325": "S31.44",
        "10326": "S31.45",
        "10327": "S31.50",
        "10328": "S31.51",
        "10329": "S31.52",
        "10330": "S31.53",
        "10331": "S31.54",
        "10332": "S31.55",
        "10333": "S31.60",
        "10334": "S31.61",
        "10335": "S31.62",
        "10336": "S31.63",
        "10337": "S31.64",
        "10338": "S31.65",
        "10339": "S31.8",
        "10340": "S31.80",
        "10341": "S31.81",
        "10342": "S31.82",
        "10343": "S31.83",
        "10344": "S32.00",
        "10345": "S32.01",
        "10346": "S32.02",
        "10347": "S32.03",
        "10348": "S32.04",
        "10349": "S32.05",
        "10350": "S32.10",
        "10351": "S32.11",
        "10352": "S32.12",
        "10353": "S32.13",
        "10354": "S32.14",
        "10355": "S32.15",
        "10356": "S32.16",
        "10357": "S32.17",
        "10358": "S32.19",
        "10359": "S32.2X",
        "10360": "S32.30",
        "10361": "S32.31",
        "10362": "S32.39",
        "10363": "S32.40",
        "10364": "S32.41",
        "10365": "S32.42",
        "10366": "S32.43",
        "10367": "S32.44",
        "10368": "S32.45",
        "10369": "S32.46",
        "10370": "S32.47",
        "10371": "S32.48",
        "10372": "S32.49",
        "10373": "S32.50",
        "10374": "S32.51",
        "10375": "S32.59",
        "10376": "S32.60",
        "10377": "S32.61",
        "10378": "S32.69",
        "10379": "S32.81",
        "10380": "S32.82",
        "10381": "S32.89",
        "10382": "S32.9X",
        "10383": "S33.0X",
        "10384": "S33.10",
        "10385": "S33.11",
        "10386": "S33.12",
        "10387": "S33.13",
        "10388": "S33.14",
        "10389": "S33.2X",
        "10390": "S33.30",
        "10391": "S33.39",
        "10392": "S33.4X",
        "10393": "S33.5X",
        "10394": "S33.6X",
        "10395": "S33.8X",
        "10396": "S33.9X",
        "10397": "S34.01",
        "10398": "S34.02",
        "10399": "S34.1",
        "10400": "S34.10",
        "10401": "S34.11",
        "10402": "S34.12",
        "10403": "S34.13",
        "10404": "S34.21",
        "10405": "S34.22",
        "10406": "S34.3X",
        "10407": "S34.4X",
        "10408": "S34.5X",
        "10409": "S34.6X",
        "10410": "S34.8X",
        "10411": "S34.9X",
        "10412": "S35.00",
        "10413": "S35.01",
        "10414": "S35.02",
        "10415": "S35.09",
        "10416": "S35.10",
        "10417": "S35.11",
        "10418": "S35.12",
        "10419": "S35.19",
        "10420": "S35.21",
        "10421": "S35.22",
        "10422": "S35.23",
        "10423": "S35.29",
        "10424": "S35.31",
        "10425": "S35.32",
        "10426": "S35.33",
        "10427": "S35.34",
        "10428": "S35.40",
        "10429": "S35.41",
        "10430": "S35.49",
        "10431": "S35.50",
        "10432": "S35.51",
        "10433": "S35.53",
        "10434": "S35.59",
        "10435": "S35.8X",
        "10436": "S35.90",
        "10437": "S35.91",
        "10438": "S35.99",
        "10439": "S36.00",
        "10440": "S36.02",
        "10441": "S36.03",
        "10442": "S36.09",
        "10443": "S36.11",
        "10444": "S36.12",
        "10445": "S36.13",
        "10446": "S36.20",
        "10447": "S36.22",
        "10448": "S36.23",
        "10449": "S36.24",
        "10450": "S36.25",
        "10451": "S36.26",
        "10452": "S36.29",
        "10453": "S36.32",
        "10454": "S36.33",
        "10455": "S36.39",
        "10456": "S36.40",
        "10457": "S36.41",
        "10458": "S36.42",
        "10459": "S36.43",
        "10460": "S36.49",
        "10461": "S36.50",
        "10462": "S36.51",
        "10463": "S36.52",
        "10464": "S36.53",
        "10465": "S36.59",
        "10466": "S36.60",
        "10467": "S36.61",
        "10468": "S36.62",
        "10469": "S36.63",
        "10470": "S36.69",
        "10471": "S36.81",
        "10472": "S36.89",
        "10473": "S36.9",
        "10474": "S36.90",
        "10475": "S36.92",
        "10476": "S36.93",
        "10477": "S36.99",
        "10478": "S37.0",
        "10479": "S37.00",
        "10480": "S37.01",
        "10481": "S37.02",
        "10482": "S37.03",
        "10483": "S37.04",
        "10484": "S37.05",
        "10485": "S37.06",
        "10486": "S37.09",
        "10487": "S37.10",
        "10488": "S37.12",
        "10489": "S37.13",
        "10490": "S37.19",
        "10491": "S37.20",
        "10492": "S37.22",
        "10493": "S37.23",
        "10494": "S37.29",
        "10495": "S37.30",
        "10496": "S37.32",
        "10497": "S37.33",
        "10498": "S37.39",
        "10499": "S37.40",
        "10500": "S37.42",
        "10501": "S37.43",
        "10502": "S37.49",
        "10503": "S37.50",
        "10504": "S37.51",
        "10505": "S37.52",
        "10506": "S37.53",
        "10507": "S37.59",
        "10508": "S37.60",
        "10509": "S37.62",
        "10510": "S37.63",
        "10511": "S37.69",
        "10512": "S37.81",
        "10513": "S37.82",
        "10514": "S37.89",
        "10515": "S37.90",
        "10516": "S37.92",
        "10517": "S37.93",
        "10518": "S37.99",
        "10519": "S38.00",
        "10520": "S38.01",
        "10521": "S38.02",
        "10522": "S38.03",
        "10523": "S38.1X",
        "10524": "S38.21",
        "10525": "S38.22",
        "10526": "S38.23",
        "10527": "S38.3X",
        "10528": "S39.00",
        "10529": "S39.01",
        "10530": "S39.02",
        "10531": "S39.09",
        "10532": "S39.81",
        "10533": "S39.82",
        "10534": "S39.83",
        "10535": "S39.84",
        "10536": "S39.9",
        "10537": "S39.91",
        "10538": "S39.92",
        "10539": "S39.94",
        "10540": "S40.01",
        "10541": "S40.02",
        "10542": "S40.21",
        "10543": "S40.22",
        "10544": "S40.24",
        "10545": "S40.25",
        "10546": "S40.26",
        "10547": "S40.27",
        "10548": "S40.81",
        "10549": "S40.82",
        "10550": "S40.84",
        "10551": "S40.85",
        "10552": "S40.86",
        "10553": "S40.87",
        "10554": "S40.91",
        "10555": "S40.92",
        "10556": "S41.00",
        "10557": "S41.01",
        "10558": "S41.02",
        "10559": "S41.03",
        "10560": "S41.04",
        "10561": "S41.05",
        "10562": "S41.10",
        "10563": "S41.11",
        "10564": "S41.12",
        "10565": "S41.13",
        "10566": "S41.14",
        "10567": "S41.15",
        "10568": "S42.0",
        "10569": "S42.00",
        "10570": "S42.01",
        "10571": "S42.02",
        "10572": "S42.03",
        "10573": "S42.10",
        "10574": "S42.11",
        "10575": "S42.12",
        "10576": "S42.13",
        "10577": "S42.14",
        "10578": "S42.15",
        "10579": "S42.19",
        "10580": "S42.20",
        "10581": "S42.21",
        "10582": "S42.22",
        "10583": "S42.23",
        "10584": "S42.24",
        "10585": "S42.25",
        "10586": "S42.26",
        "10587": "S42.27",
        "10588": "S42.29",
        "10589": "S42.3",
        "10590": "S42.30",
        "10591": "S42.31",
        "10592": "S42.32",
        "10593": "S42.33",
        "10594": "S42.34",
        "10595": "S42.35",
        "10596": "S42.36",
        "10597": "S42.39",
        "10598": "S42.40",
        "10599": "S42.41",
        "10600": "S42.42",
        "10601": "S42.43",
        "10602": "S42.44",
        "10603": "S42.45",
        "10604": "S42.46",
        "10605": "S42.47",
        "10606": "S42.48",
        "10607": "S42.49",
        "10608": "S42.90",
        "10609": "S42.91",
        "10610": "S42.92",
        "10611": "S43.0",
        "10612": "S43.00",
        "10613": "S43.01",
        "10614": "S43.02",
        "10615": "S43.03",
        "10616": "S43.08",
        "10617": "S43.10",
        "10618": "S43.11",
        "10619": "S43.12",
        "10620": "S43.13",
        "10621": "S43.14",
        "10622": "S43.15",
        "10623": "S43.20",
        "10624": "S43.21",
        "10625": "S43.22",
        "10626": "S43.3",
        "10627": "S43.30",
        "10628": "S43.31",
        "10629": "S43.39",
        "10630": "S43.40",
        "10631": "S43.41",
        "10632": "S43.42",
        "10633": "S43.43",
        "10634": "S43.49",
        "10635": "S43.51",
        "10636": "S43.52",
        "10637": "S43.60",
        "10638": "S43.61",
        "10639": "S43.62",
        "10640": "S43.7",
        "10641": "S43.80",
        "10642": "S43.81",
        "10643": "S43.82",
        "10644": "S43.90",
        "10645": "S43.91",
        "10646": "S43.92",
        "10647": "S44.00",
        "10648": "S44.01",
        "10649": "S44.02",
        "10650": "S44.10",
        "10651": "S44.11",
        "10652": "S44.12",
        "10653": "S44.20",
        "10654": "S44.21",
        "10655": "S44.30",
        "10656": "S44.31",
        "10657": "S44.32",
        "10658": "S44.40",
        "10659": "S44.41",
        "10660": "S44.42",
        "10661": "S44.50",
        "10662": "S44.51",
        "10663": "S44.52",
        "10664": "S44.8X",
        "10665": "S44.90",
        "10666": "S44.91",
        "10667": "S44.92",
        "10668": "S45.00",
        "10669": "S45.01",
        "10670": "S45.09",
        "10671": "S45.10",
        "10672": "S45.11",
        "10673": "S45.19",
        "10674": "S45.20",
        "10675": "S45.21",
        "10676": "S45.29",
        "10677": "S45.30",
        "10678": "S45.31",
        "10679": "S45.39",
        "10680": "S45.80",
        "10681": "S45.81",
        "10682": "S45.89",
        "10683": "S45.90",
        "10684": "S45.91",
        "10685": "S45.99",
        "10686": "S46.00",
        "10687": "S46.01",
        "10688": "S46.02",
        "10689": "S46.09",
        "10690": "S46.10",
        "10691": "S46.11",
        "10692": "S46.12",
        "10693": "S46.19",
        "10694": "S46.20",
        "10695": "S46.21",
        "10696": "S46.22",
        "10697": "S46.29",
        "10698": "S46.30",
        "10699": "S46.31",
        "10700": "S46.32",
        "10701": "S46.39",
        "10702": "S46.80",
        "10703": "S46.81",
        "10704": "S46.82",
        "10705": "S46.89",
        "10706": "S46.90",
        "10707": "S46.91",
        "10708": "S46.92",
        "10709": "S46.99",
        "10710": "S47.1X",
        "10711": "S47.2X",
        "10712": "S47.9X",
        "10713": "S48.01",
        "10714": "S48.02",
        "10715": "S48.11",
        "10716": "S48.12",
        "10717": "S48.91",
        "10718": "S48.92",
        "10719": "S49.00",
        "10720": "S49.01",
        "10721": "S49.02",
        "10722": "S49.03",
        "10723": "S49.04",
        "10724": "S49.09",
        "10725": "S49.10",
        "10726": "S49.11",
        "10727": "S49.12",
        "10728": "S49.13",
        "10729": "S49.14",
        "10730": "S49.19",
        "10731": "S49.80",
        "10732": "S49.81",
        "10733": "S49.82",
        "10734": "S49.9",
        "10735": "S49.91",
        "10736": "S49.92",
        "10737": "S50.00",
        "10738": "S50.01",
        "10739": "S50.02",
        "10740": "S50.10",
        "10741": "S50.11",
        "10742": "S50.12",
        "10743": "S50.31",
        "10744": "S50.32",
        "10745": "S50.34",
        "10746": "S50.35",
        "10747": "S50.36",
        "10748": "S50.37",
        "10749": "S50.81",
        "10750": "S50.82",
        "10751": "S50.84",
        "10752": "S50.85",
        "10753": "S50.86",
        "10754": "S50.87",
        "10755": "S50.90",
        "10756": "S50.91",
        "10757": "S51.00",
        "10758": "S51.01",
        "10759": "S51.02",
        "10760": "S51.03",
        "10761": "S51.04",
        "10762": "S51.05",
        "10763": "S51.80",
        "10764": "S51.81",
        "10765": "S51.82",
        "10766": "S51.83",
        "10767": "S51.84",
        "10768": "S51.85",
        "10769": "S51.9",
        "10770": "S52.0",
        "10771": "S52.00",
        "10772": "S52.01",
        "10773": "S52.02",
        "10774": "S52.03",
        "10775": "S52.04",
        "10776": "S52.09",
        "10777": "S52.10",
        "10778": "S52.11",
        "10779": "S52.12",
        "10780": "S52.13",
        "10781": "S52.18",
        "10782": "S52.20",
        "10783": "S52.21",
        "10784": "S52.22",
        "10785": "S52.23",
        "10786": "S52.24",
        "10787": "S52.25",
        "10788": "S52.26",
        "10789": "S52.27",
        "10790": "S52.28",
        "10791": "S52.29",
        "10792": "S52.30",
        "10793": "S52.31",
        "10794": "S52.32",
        "10795": "S52.33",
        "10796": "S52.34",
        "10797": "S52.35",
        "10798": "S52.36",
        "10799": "S52.37",
        "10800": "S52.38",
        "10801": "S52.39",
        "10802": "S52.50",
        "10803": "S52.51",
        "10804": "S52.52",
        "10805": "S52.53",
        "10806": "S52.54",
        "10807": "S52.55",
        "10808": "S52.56",
        "10809": "S52.57",
        "10810": "S52.59",
        "10811": "S52.60",
        "10812": "S52.61",
        "10813": "S52.62",
        "10814": "S52.69",
        "10815": "S52.8",
        "10816": "S52.9",
        "10817": "S52.90",
        "10818": "S52.91",
        "10819": "S52.92",
        "10820": "S53.00",
        "10821": "S53.01",
        "10822": "S53.02",
        "10823": "S53.03",
        "10824": "S53.09",
        "10825": "S53.10",
        "10826": "S53.11",
        "10827": "S53.12",
        "10828": "S53.13",
        "10829": "S53.14",
        "10830": "S53.19",
        "10831": "S53.2",
        "10832": "S53.20",
        "10833": "S53.21",
        "10834": "S53.22",
        "10835": "S53.30",
        "10836": "S53.31",
        "10837": "S53.32",
        "10838": "S53.40",
        "10839": "S53.41",
        "10840": "S53.42",
        "10841": "S53.43",
        "10842": "S53.44",
        "10843": "S53.49",
        "10844": "S54.00",
        "10845": "S54.01",
        "10846": "S54.02",
        "10847": "S54.10",
        "10848": "S54.11",
        "10849": "S54.12",
        "10850": "S54.20",
        "10851": "S54.21",
        "10852": "S54.22",
        "10853": "S54.30",
        "10854": "S54.31",
        "10855": "S54.32",
        "10856": "S54.8X",
        "10857": "S54.91",
        "10858": "S54.92",
        "10859": "S55.00",
        "10860": "S55.01",
        "10861": "S55.09",
        "10862": "S55.10",
        "10863": "S55.11",
        "10864": "S55.19",
        "10865": "S55.20",
        "10866": "S55.21",
        "10867": "S55.29",
        "10868": "S55.80",
        "10869": "S55.81",
        "10870": "S55.89",
        "10871": "S55.90",
        "10872": "S55.91",
        "10873": "S55.99",
        "10874": "S56.00",
        "10875": "S56.01",
        "10876": "S56.02",
        "10877": "S56.09",
        "10878": "S56.10",
        "10879": "S56.11",
        "10880": "S56.12",
        "10881": "S56.19",
        "10882": "S56.20",
        "10883": "S56.21",
        "10884": "S56.22",
        "10885": "S56.29",
        "10886": "S56.30",
        "10887": "S56.31",
        "10888": "S56.32",
        "10889": "S56.39",
        "10890": "S56.40",
        "10891": "S56.41",
        "10892": "S56.42",
        "10893": "S56.49",
        "10894": "S56.5",
        "10895": "S56.50",
        "10896": "S56.51",
        "10897": "S56.52",
        "10898": "S56.59",
        "10899": "S56.80",
        "10900": "S56.81",
        "10901": "S56.82",
        "10902": "S56.89",
        "10903": "S56.90",
        "10904": "S56.91",
        "10905": "S56.92",
        "10906": "S56.99",
        "10907": "S57.00",
        "10908": "S57.02",
        "10909": "S57.8",
        "10910": "S57.80",
        "10911": "S57.81",
        "10912": "S57.82",
        "10913": "S58.01",
        "10914": "S58.02",
        "10915": "S58.11",
        "10916": "S58.12",
        "10917": "S58.91",
        "10918": "S58.92",
        "10919": "S59.00",
        "10920": "S59.01",
        "10921": "S59.02",
        "10922": "S59.03",
        "10923": "S59.04",
        "10924": "S59.09",
        "10925": "S59.10",
        "10926": "S59.11",
        "10927": "S59.12",
        "10928": "S59.13",
        "10929": "S59.14",
        "10930": "S59.19",
        "10931": "S59.20",
        "10932": "S59.21",
        "10933": "S59.22",
        "10934": "S59.23",
        "10935": "S59.24",
        "10936": "S59.29",
        "10937": "S59.80",
        "10938": "S59.81",
        "10939": "S59.9",
        "10940": "S59.90",
        "10941": "S59.91",
        "10942": "S60.0",
        "10943": "S60.00",
        "10944": "S60.01",
        "10945": "S60.02",
        "10946": "S60.03",
        "10947": "S60.04",
        "10948": "S60.05",
        "10949": "S60.10",
        "10950": "S60.11",
        "10951": "S60.12",
        "10952": "S60.13",
        "10953": "S60.14",
        "10954": "S60.15",
        "10955": "S60.2",
        "10956": "S60.21",
        "10957": "S60.22",
        "10958": "S60.31",
        "10959": "S60.32",
        "10960": "S60.34",
        "10961": "S60.35",
        "10962": "S60.36",
        "10963": "S60.37",
        "10964": "S60.39",
        "10965": "S60.41",
        "10966": "S60.42",
        "10967": "S60.44",
        "10968": "S60.45",
        "10969": "S60.46",
        "10970": "S60.47",
        "10971": "S60.51",
        "10972": "S60.52",
        "10973": "S60.54",
        "10974": "S60.55",
        "10975": "S60.56",
        "10976": "S60.57",
        "10977": "S60.81",
        "10978": "S60.82",
        "10979": "S60.84",
        "10980": "S60.85",
        "10981": "S60.86",
        "10982": "S60.87",
        "10983": "S60.9",
        "10984": "S60.91",
        "10985": "S60.92",
        "10986": "S60.93",
        "10987": "S60.94",
        "10988": "S61.0",
        "10989": "S61.00",
        "10990": "S61.01",
        "10991": "S61.02",
        "10992": "S61.03",
        "10993": "S61.04",
        "10994": "S61.05",
        "10995": "S61.10",
        "10996": "S61.11",
        "10997": "S61.12",
        "10998": "S61.13",
        "10999": "S61.14",
        "11000": "S61.15",
        "11001": "S61.20",
        "11002": "S61.21",
        "11003": "S61.22",
        "11004": "S61.23",
        "11005": "S61.24",
        "11006": "S61.25",
        "11007": "S61.30",
        "11008": "S61.31",
        "11009": "S61.32",
        "11010": "S61.33",
        "11011": "S61.34",
        "11012": "S61.35",
        "11013": "S61.40",
        "11014": "S61.41",
        "11015": "S61.42",
        "11016": "S61.43",
        "11017": "S61.44",
        "11018": "S61.45",
        "11019": "S61.50",
        "11020": "S61.51",
        "11021": "S61.52",
        "11022": "S61.53",
        "11023": "S61.54",
        "11024": "S61.55",
        "11025": "S61.7",
        "11026": "S61.9",
        "11027": "S62.00",
        "11028": "S62.01",
        "11029": "S62.02",
        "11030": "S62.03",
        "11031": "S62.10",
        "11032": "S62.11",
        "11033": "S62.12",
        "11034": "S62.13",
        "11035": "S62.14",
        "11036": "S62.15",
        "11037": "S62.16",
        "11038": "S62.17",
        "11039": "S62.18",
        "11040": "S62.20",
        "11041": "S62.21",
        "11042": "S62.22",
        "11043": "S62.23",
        "11044": "S62.24",
        "11045": "S62.25",
        "11046": "S62.29",
        "11047": "S62.3",
        "11048": "S62.30",
        "11049": "S62.31",
        "11050": "S62.32",
        "11051": "S62.33",
        "11052": "S62.34",
        "11053": "S62.35",
        "11054": "S62.36",
        "11055": "S62.39",
        "11056": "S62.5",
        "11057": "S62.50",
        "11058": "S62.51",
        "11059": "S62.52",
        "11060": "S62.6",
        "11061": "S62.60",
        "11062": "S62.61",
        "11063": "S62.62",
        "11064": "S62.63",
        "11065": "S62.64",
        "11066": "S62.65",
        "11067": "S62.66",
        "11068": "S62.8",
        "11069": "S62.90",
        "11070": "S62.91",
        "11071": "S62.92",
        "11072": "S63.0",
        "11073": "S63.00",
        "11074": "S63.01",
        "11075": "S63.02",
        "11076": "S63.03",
        "11077": "S63.04",
        "11078": "S63.05",
        "11079": "S63.06",
        "11080": "S63.07",
        "11081": "S63.09",
        "11082": "S63.10",
        "11083": "S63.11",
        "11084": "S63.12",
        "11085": "S63.13",
        "11086": "S63.14",
        "11087": "S63.20",
        "11088": "S63.21",
        "11089": "S63.22",
        "11090": "S63.23",
        "11091": "S63.24",
        "11092": "S63.25",
        "11093": "S63.26",
        "11094": "S63.27",
        "11095": "S63.28",
        "11096": "S63.29",
        "11097": "S63.30",
        "11098": "S63.31",
        "11099": "S63.32",
        "11100": "S63.33",
        "11101": "S63.39",
        "11102": "S63.40",
        "11103": "S63.41",
        "11104": "S63.42",
        "11105": "S63.43",
        "11106": "S63.49",
        "11107": "S63.50",
        "11108": "S63.51",
        "11109": "S63.52",
        "11110": "S63.59",
        "11111": "S63.6",
        "11112": "S63.60",
        "11113": "S63.61",
        "11114": "S63.62",
        "11115": "S63.63",
        "11116": "S63.64",
        "11117": "S63.65",
        "11118": "S63.68",
        "11119": "S63.69",
        "11120": "S63.7",
        "11121": "S63.8X",
        "11122": "S63.90",
        "11123": "S63.91",
        "11124": "S63.92",
        "11125": "S64.02",
        "11126": "S64.10",
        "11127": "S64.11",
        "11128": "S64.12",
        "11129": "S64.2",
        "11130": "S64.20",
        "11131": "S64.21",
        "11132": "S64.22",
        "11133": "S64.31",
        "11134": "S64.32",
        "11135": "S64.40",
        "11136": "S64.49",
        "11137": "S64.8X",
        "11138": "S64.90",
        "11139": "S64.91",
        "11140": "S64.92",
        "11141": "S65.00",
        "11142": "S65.01",
        "11143": "S65.09",
        "11144": "S65.1",
        "11145": "S65.10",
        "11146": "S65.11",
        "11147": "S65.19",
        "11148": "S65.20",
        "11149": "S65.21",
        "11150": "S65.29",
        "11151": "S65.3",
        "11152": "S65.30",
        "11153": "S65.31",
        "11154": "S65.39",
        "11155": "S65.4",
        "11156": "S65.40",
        "11157": "S65.41",
        "11158": "S65.49",
        "11159": "S65.5",
        "11160": "S65.50",
        "11161": "S65.51",
        "11162": "S65.59",
        "11163": "S65.80",
        "11164": "S65.81",
        "11165": "S65.89",
        "11166": "S65.90",
        "11167": "S65.91",
        "11168": "S65.99",
        "11169": "S66.00",
        "11170": "S66.01",
        "11171": "S66.02",
        "11172": "S66.09",
        "11173": "S66.10",
        "11174": "S66.11",
        "11175": "S66.12",
        "11176": "S66.19",
        "11177": "S66.2",
        "11178": "S66.20",
        "11179": "S66.21",
        "11180": "S66.22",
        "11181": "S66.29",
        "11182": "S66.3",
        "11183": "S66.30",
        "11184": "S66.31",
        "11185": "S66.32",
        "11186": "S66.39",
        "11187": "S66.40",
        "11188": "S66.41",
        "11189": "S66.42",
        "11190": "S66.49",
        "11191": "S66.50",
        "11192": "S66.51",
        "11193": "S66.52",
        "11194": "S66.59",
        "11195": "S66.80",
        "11196": "S66.81",
        "11197": "S66.82",
        "11198": "S66.89",
        "11199": "S66.90",
        "11200": "S66.91",
        "11201": "S66.92",
        "11202": "S66.99",
        "11203": "S67.0",
        "11204": "S67.00",
        "11205": "S67.01",
        "11206": "S67.10",
        "11207": "S67.19",
        "11208": "S67.20",
        "11209": "S67.21",
        "11210": "S67.30",
        "11211": "S67.31",
        "11212": "S67.32",
        "11213": "S67.40",
        "11214": "S67.41",
        "11215": "S67.42",
        "11216": "S67.90",
        "11217": "S67.91",
        "11218": "S67.92",
        "11219": "S68.0",
        "11220": "S68.01",
        "11221": "S68.02",
        "11222": "S68.11",
        "11223": "S68.12",
        "11224": "S68.41",
        "11225": "S68.42",
        "11226": "S68.51",
        "11227": "S68.52",
        "11228": "S68.61",
        "11229": "S68.62",
        "11230": "S68.71",
        "11231": "S68.72",
        "11232": "S68.8",
        "11233": "S69.80",
        "11234": "S69.81",
        "11235": "S69.82",
        "11236": "S69.9",
        "11237": "S69.90",
        "11238": "S69.91",
        "11239": "S69.92",
        "11240": "S70.00",
        "11241": "S70.01",
        "11242": "S70.02",
        "11243": "S70.10",
        "11244": "S70.11",
        "11245": "S70.12",
        "11246": "S70.21",
        "11247": "S70.22",
        "11248": "S70.24",
        "11249": "S70.25",
        "11250": "S70.26",
        "11251": "S70.27",
        "11252": "S70.31",
        "11253": "S70.32",
        "11254": "S70.34",
        "11255": "S70.35",
        "11256": "S70.36",
        "11257": "S70.37",
        "11258": "S70.91",
        "11259": "S70.92",
        "11260": "S71.00",
        "11261": "S71.01",
        "11262": "S71.02",
        "11263": "S71.03",
        "11264": "S71.04",
        "11265": "S71.05",
        "11266": "S71.10",
        "11267": "S71.11",
        "11268": "S71.12",
        "11269": "S71.13",
        "11270": "S71.14",
        "11271": "S71.15",
        "11272": "S72.00",
        "11273": "S72.01",
        "11274": "S72.02",
        "11275": "S72.03",
        "11276": "S72.04",
        "11277": "S72.05",
        "11278": "S72.06",
        "11279": "S72.09",
        "11280": "S72.10",
        "11281": "S72.11",
        "11282": "S72.12",
        "11283": "S72.13",
        "11284": "S72.14",
        "11285": "S72.21",
        "11286": "S72.22",
        "11287": "S72.23",
        "11288": "S72.24",
        "11289": "S72.25",
        "11290": "S72.26",
        "11291": "S72.30",
        "11292": "S72.32",
        "11293": "S72.33",
        "11294": "S72.34",
        "11295": "S72.35",
        "11296": "S72.36",
        "11297": "S72.39",
        "11298": "S72.40",
        "11299": "S72.41",
        "11300": "S72.42",
        "11301": "S72.43",
        "11302": "S72.44",
        "11303": "S72.45",
        "11304": "S72.46",
        "11305": "S72.47",
        "11306": "S72.49",
        "11307": "S72.8X",
        "11308": "S72.9",
        "11309": "S72.90",
        "11310": "S72.91",
        "11311": "S72.92",
        "11312": "S73.00",
        "11313": "S73.01",
        "11314": "S73.02",
        "11315": "S73.03",
        "11316": "S73.04",
        "11317": "S73.1",
        "11318": "S73.10",
        "11319": "S73.11",
        "11320": "S73.12",
        "11321": "S73.19",
        "11322": "S74.00",
        "11323": "S74.01",
        "11324": "S74.02",
        "11325": "S74.10",
        "11326": "S74.11",
        "11327": "S74.12",
        "11328": "S74.21",
        "11329": "S74.22",
        "11330": "S74.8X",
        "11331": "S74.90",
        "11332": "S74.91",
        "11333": "S74.92",
        "11334": "S75.00",
        "11335": "S75.01",
        "11336": "S75.02",
        "11337": "S75.09",
        "11338": "S75.10",
        "11339": "S75.11",
        "11340": "S75.12",
        "11341": "S75.19",
        "11342": "S75.20",
        "11343": "S75.21",
        "11344": "S75.22",
        "11345": "S75.29",
        "11346": "S75.80",
        "11347": "S75.81",
        "11348": "S75.89",
        "11349": "S75.90",
        "11350": "S75.91",
        "11351": "S75.99",
        "11352": "S76.00",
        "11353": "S76.01",
        "11354": "S76.02",
        "11355": "S76.09",
        "11356": "S76.10",
        "11357": "S76.11",
        "11358": "S76.12",
        "11359": "S76.19",
        "11360": "S76.20",
        "11361": "S76.21",
        "11362": "S76.22",
        "11363": "S76.29",
        "11364": "S76.30",
        "11365": "S76.31",
        "11366": "S76.32",
        "11367": "S76.39",
        "11368": "S76.80",
        "11369": "S76.81",
        "11370": "S76.82",
        "11371": "S76.89",
        "11372": "S76.90",
        "11373": "S76.91",
        "11374": "S76.92",
        "11375": "S76.99",
        "11376": "S77.00",
        "11377": "S77.01",
        "11378": "S77.02",
        "11379": "S77.10",
        "11380": "S77.11",
        "11381": "S77.20",
        "11382": "S77.21",
        "11383": "S77.22",
        "11384": "S78.01",
        "11385": "S78.02",
        "11386": "S78.11",
        "11387": "S78.12",
        "11388": "S78.91",
        "11389": "S78.92",
        "11390": "S79.00",
        "11391": "S79.01",
        "11392": "S79.09",
        "11393": "S79.10",
        "11394": "S79.11",
        "11395": "S79.12",
        "11396": "S79.13",
        "11397": "S79.14",
        "11398": "S79.19",
        "11399": "S79.8",
        "11400": "S79.81",
        "11401": "S79.82",
        "11402": "S79.9",
        "11403": "S79.91",
        "11404": "S79.92",
        "11405": "S80.00",
        "11406": "S80.01",
        "11407": "S80.02",
        "11408": "S80.1",
        "11409": "S80.10",
        "11410": "S80.11",
        "11411": "S80.12",
        "11412": "S80.21",
        "11413": "S80.22",
        "11414": "S80.24",
        "11415": "S80.25",
        "11416": "S80.26",
        "11417": "S80.27",
        "11418": "S80.81",
        "11419": "S80.82",
        "11420": "S80.84",
        "11421": "S80.85",
        "11422": "S80.86",
        "11423": "S80.87",
        "11424": "S80.9",
        "11425": "S80.91",
        "11426": "S80.92",
        "11427": "S81.0",
        "11428": "S81.00",
        "11429": "S81.01",
        "11430": "S81.02",
        "11431": "S81.03",
        "11432": "S81.04",
        "11433": "S81.05",
        "11434": "S81.80",
        "11435": "S81.81",
        "11436": "S81.82",
        "11437": "S81.83",
        "11438": "S81.84",
        "11439": "S81.85",
        "11440": "S81.9",
        "11441": "S82.00",
        "11442": "S82.01",
        "11443": "S82.02",
        "11444": "S82.03",
        "11445": "S82.04",
        "11446": "S82.09",
        "11447": "S82.10",
        "11448": "S82.11",
        "11449": "S82.12",
        "11450": "S82.13",
        "11451": "S82.14",
        "11452": "S82.15",
        "11453": "S82.16",
        "11454": "S82.19",
        "11455": "S82.2",
        "11456": "S82.20",
        "11457": "S82.22",
        "11458": "S82.23",
        "11459": "S82.24",
        "11460": "S82.25",
        "11461": "S82.26",
        "11462": "S82.29",
        "11463": "S82.30",
        "11464": "S82.31",
        "11465": "S82.39",
        "11466": "S82.4",
        "11467": "S82.40",
        "11468": "S82.42",
        "11469": "S82.43",
        "11470": "S82.44",
        "11471": "S82.45",
        "11472": "S82.46",
        "11473": "S82.49",
        "11474": "S82.51",
        "11475": "S82.52",
        "11476": "S82.53",
        "11477": "S82.54",
        "11478": "S82.55",
        "11479": "S82.56",
        "11480": "S82.61",
        "11481": "S82.62",
        "11482": "S82.63",
        "11483": "S82.64",
        "11484": "S82.65",
        "11485": "S82.66",
        "11486": "S82.8",
        "11487": "S82.81",
        "11488": "S82.82",
        "11489": "S82.83",
        "11490": "S82.84",
        "11491": "S82.85",
        "11492": "S82.86",
        "11493": "S82.87",
        "11494": "S82.89",
        "11495": "S82.9",
        "11496": "S82.90",
        "11497": "S82.91",
        "11498": "S82.92",
        "11499": "S83.00",
        "11500": "S83.01",
        "11501": "S83.09",
        "11502": "S83.10",
        "11503": "S83.11",
        "11504": "S83.12",
        "11505": "S83.13",
        "11506": "S83.14",
        "11507": "S83.19",
        "11508": "S83.2",
        "11509": "S83.20",
        "11510": "S83.21",
        "11511": "S83.22",
        "11512": "S83.23",
        "11513": "S83.24",
        "11514": "S83.25",
        "11515": "S83.26",
        "11516": "S83.27",
        "11517": "S83.28",
        "11518": "S83.30",
        "11519": "S83.32",
        "11520": "S83.4",
        "11521": "S83.40",
        "11522": "S83.41",
        "11523": "S83.42",
        "11524": "S83.50",
        "11525": "S83.51",
        "11526": "S83.52",
        "11527": "S83.6",
        "11528": "S83.60",
        "11529": "S83.61",
        "11530": "S83.62",
        "11531": "S83.8X",
        "11532": "S83.90",
        "11533": "S83.91",
        "11534": "S83.92",
        "11535": "S84.00",
        "11536": "S84.01",
        "11537": "S84.02",
        "11538": "S84.10",
        "11539": "S84.11",
        "11540": "S84.12",
        "11541": "S84.20",
        "11542": "S84.21",
        "11543": "S84.22",
        "11544": "S84.80",
        "11545": "S84.90",
        "11546": "S84.91",
        "11547": "S84.92",
        "11548": "S85.00",
        "11549": "S85.01",
        "11550": "S85.09",
        "11551": "S85.10",
        "11552": "S85.11",
        "11553": "S85.12",
        "11554": "S85.13",
        "11555": "S85.14",
        "11556": "S85.15",
        "11557": "S85.16",
        "11558": "S85.17",
        "11559": "S85.18",
        "11560": "S85.20",
        "11561": "S85.21",
        "11562": "S85.29",
        "11563": "S85.30",
        "11564": "S85.31",
        "11565": "S85.39",
        "11566": "S85.40",
        "11567": "S85.41",
        "11568": "S85.49",
        "11569": "S85.50",
        "11570": "S85.51",
        "11571": "S85.59",
        "11572": "S85.80",
        "11573": "S85.81",
        "11574": "S85.89",
        "11575": "S85.90",
        "11576": "S85.91",
        "11577": "S85.99",
        "11578": "S86.0",
        "11579": "S86.00",
        "11580": "S86.01",
        "11581": "S86.02",
        "11582": "S86.09",
        "11583": "S86.10",
        "11584": "S86.11",
        "11585": "S86.12",
        "11586": "S86.19",
        "11587": "S86.20",
        "11588": "S86.21",
        "11589": "S86.22",
        "11590": "S86.29",
        "11591": "S86.30",
        "11592": "S86.31",
        "11593": "S86.32",
        "11594": "S86.39",
        "11595": "S86.7",
        "11596": "S86.80",
        "11597": "S86.81",
        "11598": "S86.82",
        "11599": "S86.89",
        "11600": "S86.90",
        "11601": "S86.91",
        "11602": "S86.92",
        "11603": "S86.99",
        "11604": "S87.00",
        "11605": "S87.01",
        "11606": "S87.02",
        "11607": "S87.80",
        "11608": "S87.81",
        "11609": "S87.82",
        "11610": "S88.01",
        "11611": "S88.02",
        "11612": "S88.11",
        "11613": "S88.12",
        "11614": "S88.91",
        "11615": "S88.92",
        "11616": "S89.0",
        "11617": "S89.00",
        "11618": "S89.01",
        "11619": "S89.02",
        "11620": "S89.03",
        "11621": "S89.04",
        "11622": "S89.09",
        "11623": "S89.10",
        "11624": "S89.11",
        "11625": "S89.12",
        "11626": "S89.13",
        "11627": "S89.14",
        "11628": "S89.19",
        "11629": "S89.20",
        "11630": "S89.21",
        "11631": "S89.22",
        "11632": "S89.29",
        "11633": "S89.30",
        "11634": "S89.31",
        "11635": "S89.32",
        "11636": "S89.39",
        "11637": "S89.80",
        "11638": "S89.81",
        "11639": "S89.9",
        "11640": "S89.90",
        "11641": "S89.91",
        "11642": "S89.92",
        "11643": "S90.00",
        "11644": "S90.01",
        "11645": "S90.02",
        "11646": "S90.11",
        "11647": "S90.12",
        "11648": "S90.21",
        "11649": "S90.22",
        "11650": "S90.30",
        "11651": "S90.31",
        "11652": "S90.32",
        "11653": "S90.41",
        "11654": "S90.42",
        "11655": "S90.44",
        "11656": "S90.45",
        "11657": "S90.46",
        "11658": "S90.47",
        "11659": "S90.51",
        "11660": "S90.52",
        "11661": "S90.54",
        "11662": "S90.55",
        "11663": "S90.56",
        "11664": "S90.57",
        "11665": "S90.81",
        "11666": "S90.82",
        "11667": "S90.84",
        "11668": "S90.85",
        "11669": "S90.86",
        "11670": "S90.87",
        "11671": "S90.91",
        "11672": "S90.92",
        "11673": "S90.93",
        "11674": "S91.0",
        "11675": "S91.00",
        "11676": "S91.01",
        "11677": "S91.02",
        "11678": "S91.03",
        "11679": "S91.04",
        "11680": "S91.05",
        "11681": "S91.1",
        "11682": "S91.10",
        "11683": "S91.11",
        "11684": "S91.12",
        "11685": "S91.13",
        "11686": "S91.14",
        "11687": "S91.15",
        "11688": "S91.2",
        "11689": "S91.20",
        "11690": "S91.21",
        "11691": "S91.22",
        "11692": "S91.23",
        "11693": "S91.24",
        "11694": "S91.25",
        "11695": "S91.30",
        "11696": "S91.31",
        "11697": "S91.32",
        "11698": "S91.33",
        "11699": "S91.34",
        "11700": "S91.35",
        "11701": "S91.7",
        "11702": "S92.00",
        "11703": "S92.01",
        "11704": "S92.02",
        "11705": "S92.03",
        "11706": "S92.04",
        "11707": "S92.05",
        "11708": "S92.06",
        "11709": "S92.10",
        "11710": "S92.11",
        "11711": "S92.12",
        "11712": "S92.13",
        "11713": "S92.14",
        "11714": "S92.15",
        "11715": "S92.19",
        "11716": "S92.20",
        "11717": "S92.21",
        "11718": "S92.22",
        "11719": "S92.23",
        "11720": "S92.24",
        "11721": "S92.25",
        "11722": "S92.30",
        "11723": "S92.31",
        "11724": "S92.32",
        "11725": "S92.33",
        "11726": "S92.34",
        "11727": "S92.35",
        "11728": "S92.4",
        "11729": "S92.40",
        "11730": "S92.41",
        "11731": "S92.42",
        "11732": "S92.49",
        "11733": "S92.50",
        "11734": "S92.51",
        "11735": "S92.52",
        "11736": "S92.53",
        "11737": "S92.59",
        "11738": "S92.9",
        "11739": "S92.90",
        "11740": "S92.91",
        "11741": "S93.0",
        "11742": "S93.01",
        "11743": "S93.02",
        "11744": "S93.03",
        "11745": "S93.04",
        "11746": "S93.05",
        "11747": "S93.06",
        "11748": "S93.1",
        "11749": "S93.10",
        "11750": "S93.11",
        "11751": "S93.12",
        "11752": "S93.13",
        "11753": "S93.14",
        "11754": "S93.30",
        "11755": "S93.31",
        "11756": "S93.32",
        "11757": "S93.33",
        "11758": "S93.4",
        "11759": "S93.40",
        "11760": "S93.41",
        "11761": "S93.42",
        "11762": "S93.43",
        "11763": "S93.49",
        "11764": "S93.5",
        "11765": "S93.50",
        "11766": "S93.51",
        "11767": "S93.52",
        "11768": "S93.6",
        "11769": "S93.60",
        "11770": "S93.61",
        "11771": "S93.62",
        "11772": "S93.69",
        "11773": "S94.00",
        "11774": "S94.01",
        "11775": "S94.02",
        "11776": "S94.10",
        "11777": "S94.11",
        "11778": "S94.12",
        "11779": "S94.20",
        "11780": "S94.21",
        "11781": "S94.22",
        "11782": "S94.30",
        "11783": "S94.31",
        "11784": "S94.32",
        "11785": "S94.8X",
        "11786": "S94.90",
        "11787": "S94.91",
        "11788": "S94.92",
        "11789": "S95.00",
        "11790": "S95.01",
        "11791": "S95.09",
        "11792": "S95.10",
        "11793": "S95.11",
        "11794": "S95.19",
        "11795": "S95.20",
        "11796": "S95.21",
        "11797": "S95.29",
        "11798": "S95.80",
        "11799": "S95.81",
        "11800": "S95.89",
        "11801": "S95.90",
        "11802": "S95.91",
        "11803": "S95.99",
        "11804": "S96.00",
        "11805": "S96.01",
        "11806": "S96.02",
        "11807": "S96.09",
        "11808": "S96.10",
        "11809": "S96.11",
        "11810": "S96.12",
        "11811": "S96.19",
        "11812": "S96.20",
        "11813": "S96.21",
        "11814": "S96.22",
        "11815": "S96.29",
        "11816": "S96.7",
        "11817": "S96.80",
        "11818": "S96.81",
        "11819": "S96.82",
        "11820": "S96.89",
        "11821": "S96.90",
        "11822": "S96.91",
        "11823": "S96.92",
        "11824": "S96.99",
        "11825": "S97.0",
        "11826": "S97.00",
        "11827": "S97.01",
        "11828": "S97.02",
        "11829": "S97.10",
        "11830": "S97.11",
        "11831": "S97.12",
        "11832": "S97.80",
        "11833": "S97.81",
        "11834": "S98.01",
        "11835": "S98.02",
        "11836": "S98.11",
        "11837": "S98.12",
        "11838": "S98.13",
        "11839": "S98.14",
        "11840": "S98.21",
        "11841": "S98.22",
        "11842": "S98.31",
        "11843": "S98.32",
        "11844": "S98.91",
        "11845": "S98.92",
        "11846": "S99.8",
        "11847": "S99.81",
        "11848": "S99.82",
        "11849": "S99.9",
        "11850": "S99.91",
        "11851": "S99.92",
        "11852": "T00.9",
        "11853": "T05.0",
        "11854": "T14.0",
        "11855": "T14.1",
        "11856": "T14.2",
        "11857": "T14.5",
        "11858": "T14.9",
        "11859": "T14.90",
        "11860": "T15.00",
        "11861": "T15.01",
        "11862": "T15.02",
        "11863": "T15.10",
        "11864": "T15.11",
        "11865": "T15.12",
        "11866": "T15.80",
        "11867": "T15.81",
        "11868": "T15.82",
        "11869": "T15.91",
        "11870": "T15.92",
        "11871": "T16.1X",
        "11872": "T16.2X",
        "11873": "T16.9X",
        "11874": "T17.0X",
        "11875": "T17.1X",
        "11876": "T17.20",
        "11877": "T17.21",
        "11878": "T17.22",
        "11879": "T17.29",
        "11880": "T17.30",
        "11881": "T17.31",
        "11882": "T17.32",
        "11883": "T17.39",
        "11884": "T17.40",
        "11885": "T17.41",
        "11886": "T17.42",
        "11887": "T17.49",
        "11888": "T17.5",
        "11889": "T17.50",
        "11890": "T17.51",
        "11891": "T17.52",
        "11892": "T17.59",
        "11893": "T17.80",
        "11894": "T17.81",
        "11895": "T17.82",
        "11896": "T17.89",
        "11897": "T17.90",
        "11898": "T17.91",
        "11899": "T17.92",
        "11900": "T17.99",
        "11901": "T18.0X",
        "11902": "T18.10",
        "11903": "T18.11",
        "11904": "T18.12",
        "11905": "T18.19",
        "11906": "T18.2X",
        "11907": "T18.3X",
        "11908": "T18.4X",
        "11909": "T18.5X",
        "11910": "T18.8X",
        "11911": "T18.9",
        "11912": "T18.9X",
        "11913": "T19.1X",
        "11914": "T19.2X",
        "11915": "T19.3X",
        "11916": "T19.4X",
        "11917": "T19.8X",
        "11918": "T19.9X",
        "11919": "T20.0",
        "11920": "T20.00",
        "11921": "T20.01",
        "11922": "T20.02",
        "11923": "T20.03",
        "11924": "T20.04",
        "11925": "T20.05",
        "11926": "T20.06",
        "11927": "T20.07",
        "11928": "T20.09",
        "11929": "T20.1",
        "11930": "T20.10",
        "11931": "T20.11",
        "11932": "T20.12",
        "11933": "T20.13",
        "11934": "T20.14",
        "11935": "T20.15",
        "11936": "T20.17",
        "11937": "T20.19",
        "11938": "T20.2",
        "11939": "T20.20",
        "11940": "T20.21",
        "11941": "T20.22",
        "11942": "T20.23",
        "11943": "T20.24",
        "11944": "T20.25",
        "11945": "T20.26",
        "11946": "T20.27",
        "11947": "T20.29",
        "11948": "T20.30",
        "11949": "T20.31",
        "11950": "T20.32",
        "11951": "T20.33",
        "11952": "T20.34",
        "11953": "T20.35",
        "11954": "T20.36",
        "11955": "T20.37",
        "11956": "T20.39",
        "11957": "T20.40",
        "11958": "T20.41",
        "11959": "T20.42",
        "11960": "T20.43",
        "11961": "T20.44",
        "11962": "T20.45",
        "11963": "T20.46",
        "11964": "T20.47",
        "11965": "T20.5",
        "11966": "T20.50",
        "11967": "T20.51",
        "11968": "T20.52",
        "11969": "T20.53",
        "11970": "T20.54",
        "11971": "T20.55",
        "11972": "T20.56",
        "11973": "T20.57",
        "11974": "T20.59",
        "11975": "T20.60",
        "11976": "T20.61",
        "11977": "T20.62",
        "11978": "T20.63",
        "11979": "T20.64",
        "11980": "T20.65",
        "11981": "T20.66",
        "11982": "T20.67",
        "11983": "T20.69",
        "11984": "T20.70",
        "11985": "T20.71",
        "11986": "T20.72",
        "11987": "T20.73",
        "11988": "T20.74",
        "11989": "T20.75",
        "11990": "T20.76",
        "11991": "T20.77",
        "11992": "T21.00",
        "11993": "T21.01",
        "11994": "T21.02",
        "11995": "T21.03",
        "11996": "T21.04",
        "11997": "T21.05",
        "11998": "T21.06",
        "11999": "T21.07",
        "12000": "T21.09",
        "12001": "T21.11",
        "12002": "T21.12",
        "12003": "T21.13",
        "12004": "T21.14",
        "12005": "T21.15",
        "12006": "T21.16",
        "12007": "T21.17",
        "12008": "T21.19",
        "12009": "T21.2",
        "12010": "T21.20",
        "12011": "T21.21",
        "12012": "T21.22",
        "12013": "T21.24",
        "12014": "T21.25",
        "12015": "T21.26",
        "12016": "T21.27",
        "12017": "T21.29",
        "12018": "T21.30",
        "12019": "T21.31",
        "12020": "T21.32",
        "12021": "T21.33",
        "12022": "T21.34",
        "12023": "T21.35",
        "12024": "T21.36",
        "12025": "T21.37",
        "12026": "T21.39",
        "12027": "T21.40",
        "12028": "T21.41",
        "12029": "T21.42",
        "12030": "T21.43",
        "12031": "T21.44",
        "12032": "T21.45",
        "12033": "T21.46",
        "12034": "T21.47",
        "12035": "T21.49",
        "12036": "T21.50",
        "12037": "T21.51",
        "12038": "T21.52",
        "12039": "T21.53",
        "12040": "T21.54",
        "12041": "T21.55",
        "12042": "T21.56",
        "12043": "T21.57",
        "12044": "T21.59",
        "12045": "T21.60",
        "12046": "T21.61",
        "12047": "T21.62",
        "12048": "T21.63",
        "12049": "T21.64",
        "12050": "T21.65",
        "12051": "T21.66",
        "12052": "T21.67",
        "12053": "T21.69",
        "12054": "T21.70",
        "12055": "T21.71",
        "12056": "T21.72",
        "12057": "T21.73",
        "12058": "T21.74",
        "12059": "T21.75",
        "12060": "T21.76",
        "12061": "T21.77",
        "12062": "T21.79",
        "12063": "T22.00",
        "12064": "T22.01",
        "12065": "T22.02",
        "12066": "T22.03",
        "12067": "T22.04",
        "12068": "T22.05",
        "12069": "T22.06",
        "12070": "T22.09",
        "12071": "T22.1",
        "12072": "T22.11",
        "12073": "T22.12",
        "12074": "T22.13",
        "12075": "T22.14",
        "12076": "T22.15",
        "12077": "T22.16",
        "12078": "T22.19",
        "12079": "T22.2",
        "12080": "T22.20",
        "12081": "T22.21",
        "12082": "T22.22",
        "12083": "T22.23",
        "12084": "T22.24",
        "12085": "T22.25",
        "12086": "T22.26",
        "12087": "T22.29",
        "12088": "T22.30",
        "12089": "T22.31",
        "12090": "T22.32",
        "12091": "T22.33",
        "12092": "T22.34",
        "12093": "T22.35",
        "12094": "T22.36",
        "12095": "T22.39",
        "12096": "T22.40",
        "12097": "T22.41",
        "12098": "T22.42",
        "12099": "T22.43",
        "12100": "T22.44",
        "12101": "T22.45",
        "12102": "T22.46",
        "12103": "T22.49",
        "12104": "T22.50",
        "12105": "T22.51",
        "12106": "T22.52",
        "12107": "T22.53",
        "12108": "T22.54",
        "12109": "T22.55",
        "12110": "T22.56",
        "12111": "T22.59",
        "12112": "T22.60",
        "12113": "T22.61",
        "12114": "T22.62",
        "12115": "T22.63",
        "12116": "T22.64",
        "12117": "T22.65",
        "12118": "T22.66",
        "12119": "T22.69",
        "12120": "T22.70",
        "12121": "T22.71",
        "12122": "T22.72",
        "12123": "T22.73",
        "12124": "T22.74",
        "12125": "T22.75",
        "12126": "T22.76",
        "12127": "T22.79",
        "12128": "T23.0",
        "12129": "T23.00",
        "12130": "T23.01",
        "12131": "T23.02",
        "12132": "T23.03",
        "12133": "T23.04",
        "12134": "T23.05",
        "12135": "T23.06",
        "12136": "T23.07",
        "12137": "T23.09",
        "12138": "T23.10",
        "12139": "T23.11",
        "12140": "T23.12",
        "12141": "T23.13",
        "12142": "T23.14",
        "12143": "T23.15",
        "12144": "T23.16",
        "12145": "T23.17",
        "12146": "T23.19",
        "12147": "T23.20",
        "12148": "T23.21",
        "12149": "T23.22",
        "12150": "T23.23",
        "12151": "T23.24",
        "12152": "T23.25",
        "12153": "T23.26",
        "12154": "T23.27",
        "12155": "T23.29",
        "12156": "T23.30",
        "12157": "T23.31",
        "12158": "T23.32",
        "12159": "T23.33",
        "12160": "T23.34",
        "12161": "T23.35",
        "12162": "T23.36",
        "12163": "T23.37",
        "12164": "T23.39",
        "12165": "T23.40",
        "12166": "T23.41",
        "12167": "T23.42",
        "12168": "T23.43",
        "12169": "T23.44",
        "12170": "T23.45",
        "12171": "T23.46",
        "12172": "T23.47",
        "12173": "T23.49",
        "12174": "T23.5",
        "12175": "T23.50",
        "12176": "T23.51",
        "12177": "T23.52",
        "12178": "T23.53",
        "12179": "T23.54",
        "12180": "T23.55",
        "12181": "T23.56",
        "12182": "T23.57",
        "12183": "T23.59",
        "12184": "T23.60",
        "12185": "T23.61",
        "12186": "T23.62",
        "12187": "T23.63",
        "12188": "T23.64",
        "12189": "T23.65",
        "12190": "T23.66",
        "12191": "T23.67",
        "12192": "T23.69",
        "12193": "T23.70",
        "12194": "T23.71",
        "12195": "T23.72",
        "12196": "T23.73",
        "12197": "T23.74",
        "12198": "T23.75",
        "12199": "T23.76",
        "12200": "T23.77",
        "12201": "T23.79",
        "12202": "T24.0",
        "12203": "T24.00",
        "12204": "T24.01",
        "12205": "T24.02",
        "12206": "T24.03",
        "12207": "T24.09",
        "12208": "T24.1",
        "12209": "T24.10",
        "12210": "T24.11",
        "12211": "T24.12",
        "12212": "T24.13",
        "12213": "T24.19",
        "12214": "T24.2",
        "12215": "T24.20",
        "12216": "T24.21",
        "12217": "T24.22",
        "12218": "T24.23",
        "12219": "T24.29",
        "12220": "T24.30",
        "12221": "T24.31",
        "12222": "T24.32",
        "12223": "T24.33",
        "12224": "T24.39",
        "12225": "T24.40",
        "12226": "T24.41",
        "12227": "T24.42",
        "12228": "T24.43",
        "12229": "T24.49",
        "12230": "T24.50",
        "12231": "T24.51",
        "12232": "T24.52",
        "12233": "T24.53",
        "12234": "T24.59",
        "12235": "T24.60",
        "12236": "T24.61",
        "12237": "T24.62",
        "12238": "T24.63",
        "12239": "T24.69",
        "12240": "T24.70",
        "12241": "T24.71",
        "12242": "T24.72",
        "12243": "T24.73",
        "12244": "T24.79",
        "12245": "T25.0",
        "12246": "T25.01",
        "12247": "T25.02",
        "12248": "T25.03",
        "12249": "T25.09",
        "12250": "T25.1",
        "12251": "T25.11",
        "12252": "T25.12",
        "12253": "T25.13",
        "12254": "T25.19",
        "12255": "T25.2",
        "12256": "T25.21",
        "12257": "T25.22",
        "12258": "T25.23",
        "12259": "T25.29",
        "12260": "T25.3",
        "12261": "T25.31",
        "12262": "T25.32",
        "12263": "T25.33",
        "12264": "T25.39",
        "12265": "T25.41",
        "12266": "T25.42",
        "12267": "T25.43",
        "12268": "T25.49",
        "12269": "T25.51",
        "12270": "T25.52",
        "12271": "T25.53",
        "12272": "T25.59",
        "12273": "T25.61",
        "12274": "T25.62",
        "12275": "T25.63",
        "12276": "T25.69",
        "12277": "T25.71",
        "12278": "T25.72",
        "12279": "T25.73",
        "12280": "T25.79",
        "12281": "T26.00",
        "12282": "T26.01",
        "12283": "T26.02",
        "12284": "T26.10",
        "12285": "T26.11",
        "12286": "T26.12",
        "12287": "T26.20",
        "12288": "T26.21",
        "12289": "T26.22",
        "12290": "T26.30",
        "12291": "T26.31",
        "12292": "T26.4",
        "12293": "T26.40",
        "12294": "T26.50",
        "12295": "T26.51",
        "12296": "T26.52",
        "12297": "T26.60",
        "12298": "T26.61",
        "12299": "T26.62",
        "12300": "T26.70",
        "12301": "T26.71",
        "12302": "T26.72",
        "12303": "T26.80",
        "12304": "T26.81",
        "12305": "T26.82",
        "12306": "T26.9",
        "12307": "T26.90",
        "12308": "T26.91",
        "12309": "T26.92",
        "12310": "T27.0X",
        "12311": "T27.1X",
        "12312": "T27.2X",
        "12313": "T27.3",
        "12314": "T27.3X",
        "12315": "T27.4X",
        "12316": "T27.5X",
        "12317": "T27.6X",
        "12318": "T27.7X",
        "12319": "T28.0X",
        "12320": "T28.1X",
        "12321": "T28.2X",
        "12322": "T28.3X",
        "12323": "T28.40",
        "12324": "T28.41",
        "12325": "T28.49",
        "12326": "T28.5X",
        "12327": "T28.6X",
        "12328": "T28.7X",
        "12329": "T28.8X",
        "12330": "T28.90",
        "12331": "T28.91",
        "12332": "T28.99",
        "12333": "T30.0",
        "12334": "T30.2",
        "12335": "T31.11",
        "12336": "T31.20",
        "12337": "T31.21",
        "12338": "T31.22",
        "12339": "T31.30",
        "12340": "T31.31",
        "12341": "T31.33",
        "12342": "T31.40",
        "12343": "T31.41",
        "12344": "T31.42",
        "12345": "T31.43",
        "12346": "T31.44",
        "12347": "T31.50",
        "12348": "T31.51",
        "12349": "T31.52",
        "12350": "T31.53",
        "12351": "T31.55",
        "12352": "T31.60",
        "12353": "T31.61",
        "12354": "T31.62",
        "12355": "T31.63",
        "12356": "T31.70",
        "12357": "T31.74",
        "12358": "T31.77",
        "12359": "T31.80",
        "12360": "T31.81",
        "12361": "T31.83",
        "12362": "T31.84",
        "12363": "T31.85",
        "12364": "T31.87",
        "12365": "T31.88",
        "12366": "T31.90",
        "12367": "T31.94",
        "12368": "T31.97",
        "12369": "T31.98",
        "12370": "T32.11",
        "12371": "T32.21",
        "12372": "T32.30",
        "12373": "T32.31",
        "12374": "T32.32",
        "12375": "T32.33",
        "12376": "T32.41",
        "12377": "T32.42",
        "12378": "T32.43",
        "12379": "T32.44",
        "12380": "T32.50",
        "12381": "T32.54",
        "12382": "T32.55",
        "12383": "T32.62",
        "12384": "T32.63",
        "12385": "T32.64",
        "12386": "T32.65",
        "12387": "T32.71",
        "12388": "T32.76",
        "12389": "T32.77",
        "12390": "T32.80",
        "12391": "T32.81",
        "12392": "T32.82",
        "12393": "T32.84",
        "12394": "T32.85",
        "12395": "T32.90",
        "12396": "T32.91",
        "12397": "T32.92",
        "12398": "T32.93",
        "12399": "T32.94",
        "12400": "T32.96",
        "12401": "T32.97",
        "12402": "T32.98",
        "12403": "T32.99",
        "12404": "T33.01",
        "12405": "T33.02",
        "12406": "T33.09",
        "12407": "T33.1X",
        "12408": "T33.2X",
        "12409": "T33.3X",
        "12410": "T33.40",
        "12411": "T33.41",
        "12412": "T33.42",
        "12413": "T33.51",
        "12414": "T33.52",
        "12415": "T33.53",
        "12416": "T33.60",
        "12417": "T33.61",
        "12418": "T33.62",
        "12419": "T33.70",
        "12420": "T33.71",
        "12421": "T33.72",
        "12422": "T33.81",
        "12423": "T33.82",
        "12424": "T33.83",
        "12425": "T33.90",
        "12426": "T33.99",
        "12427": "T34.01",
        "12428": "T34.02",
        "12429": "T34.09",
        "12430": "T34.1X",
        "12431": "T34.2X",
        "12432": "T34.3X",
        "12433": "T34.40",
        "12434": "T34.42",
        "12435": "T34.51",
        "12436": "T34.52",
        "12437": "T34.53",
        "12438": "T34.61",
        "12439": "T34.62",
        "12440": "T34.70",
        "12441": "T34.71",
        "12442": "T34.72",
        "12443": "T34.81",
        "12444": "T34.82",
        "12445": "T34.83",
        "12446": "T34.90",
        "12447": "T34.99",
        "12448": "T36.0X",
        "12449": "T36.1X",
        "12450": "T36.2X",
        "12451": "T36.3X",
        "12452": "T36.4X",
        "12453": "T36.5X",
        "12454": "T36.6X",
        "12455": "T36.7X",
        "12456": "T36.8X",
        "12457": "T36.91",
        "12458": "T36.93",
        "12459": "T36.94",
        "12460": "T36.95",
        "12461": "T36.96",
        "12462": "T37.0X",
        "12463": "T37.1X",
        "12464": "T37.2X",
        "12465": "T37.3X",
        "12466": "T37.4X",
        "12467": "T37.5X",
        "12468": "T37.8X",
        "12469": "T37.91",
        "12470": "T37.92",
        "12471": "T37.93",
        "12472": "T37.94",
        "12473": "T37.95",
        "12474": "T37.96",
        "12475": "T38.0X",
        "12476": "T38.1X",
        "12477": "T38.2X",
        "12478": "T38.3X",
        "12479": "T38.4X",
        "12480": "T38.5X",
        "12481": "T38.6X",
        "12482": "T38.7X",
        "12483": "T38.80",
        "12484": "T38.81",
        "12485": "T38.89",
        "12486": "T38.90",
        "12487": "T38.99",
        "12488": "T39.01",
        "12489": "T39.09",
        "12490": "T39.1",
        "12491": "T39.1X",
        "12492": "T39.2X",
        "12493": "T39.31",
        "12494": "T39.39",
        "12495": "T39.4X",
        "12496": "T39.8X",
        "12497": "T39.91",
        "12498": "T39.92",
        "12499": "T39.93",
        "12500": "T39.94",
        "12501": "T39.95",
        "12502": "T39.96",
        "12503": "T40.0X",
        "12504": "T40.1X",
        "12505": "T40.2X",
        "12506": "T40.3X",
        "12507": "T40.4X",
        "12508": "T40.5X",
        "12509": "T40.60",
        "12510": "T40.69",
        "12511": "T40.7X",
        "12512": "T40.8X",
        "12513": "T40.90",
        "12514": "T40.99",
        "12515": "T41.0X",
        "12516": "T41.1",
        "12517": "T41.1X",
        "12518": "T41.20",
        "12519": "T41.29",
        "12520": "T41.3X",
        "12521": "T41.41",
        "12522": "T41.42",
        "12523": "T41.43",
        "12524": "T41.44",
        "12525": "T41.45",
        "12526": "T41.46",
        "12527": "T41.5X",
        "12528": "T41.9",
        "12529": "T42.0X",
        "12530": "T42.1X",
        "12531": "T42.2X",
        "12532": "T42.3X",
        "12533": "T42.4X",
        "12534": "T42.5X",
        "12535": "T42.6X",
        "12536": "T42.71",
        "12537": "T42.72",
        "12538": "T42.73",
        "12539": "T42.74",
        "12540": "T42.76",
        "12541": "T42.8X",
        "12542": "T43.01",
        "12543": "T43.02",
        "12544": "T43.1X",
        "12545": "T43.20",
        "12546": "T43.21",
        "12547": "T43.22",
        "12548": "T43.29",
        "12549": "T43.3X",
        "12550": "T43.4X",
        "12551": "T43.50",
        "12552": "T43.59",
        "12553": "T43.60",
        "12554": "T43.61",
        "12555": "T43.62",
        "12556": "T43.63",
        "12557": "T43.69",
        "12558": "T43.8X",
        "12559": "T43.91",
        "12560": "T43.92",
        "12561": "T43.93",
        "12562": "T43.94",
        "12563": "T43.95",
        "12564": "T43.96",
        "12565": "T44.0X",
        "12566": "T44.1X",
        "12567": "T44.2X",
        "12568": "T44.3X",
        "12569": "T44.4X",
        "12570": "T44.5X",
        "12571": "T44.6X",
        "12572": "T44.7X",
        "12573": "T44.8X",
        "12574": "T44.90",
        "12575": "T44.99",
        "12576": "T45.0X",
        "12577": "T45.1X",
        "12578": "T45.2X",
        "12579": "T45.3X",
        "12580": "T45.4X",
        "12581": "T45.51",
        "12582": "T45.52",
        "12583": "T45.60",
        "12584": "T45.61",
        "12585": "T45.62",
        "12586": "T45.69",
        "12587": "T45.7X",
        "12588": "T45.8X",
        "12589": "T45.91",
        "12590": "T45.92",
        "12591": "T45.93",
        "12592": "T45.94",
        "12593": "T45.95",
        "12594": "T45.96",
        "12595": "T46.0X",
        "12596": "T46.1X",
        "12597": "T46.2X",
        "12598": "T46.3X",
        "12599": "T46.4X",
        "12600": "T46.5X",
        "12601": "T46.6X",
        "12602": "T46.7X",
        "12603": "T46.8X",
        "12604": "T46.90",
        "12605": "T46.99",
        "12606": "T47.0X",
        "12607": "T47.1X",
        "12608": "T47.2X",
        "12609": "T47.3X",
        "12610": "T47.4X",
        "12611": "T47.5X",
        "12612": "T47.6X",
        "12613": "T47.7X",
        "12614": "T47.8X",
        "12615": "T47.91",
        "12616": "T47.92",
        "12617": "T47.93",
        "12618": "T47.94",
        "12619": "T47.95",
        "12620": "T47.96",
        "12621": "T48.0X",
        "12622": "T48.1X",
        "12623": "T48.20",
        "12624": "T48.29",
        "12625": "T48.3X",
        "12626": "T48.4X",
        "12627": "T48.5",
        "12628": "T48.5X",
        "12629": "T48.6X",
        "12630": "T48.90",
        "12631": "T48.99",
        "12632": "T49.0X",
        "12633": "T49.1X",
        "12634": "T49.2X",
        "12635": "T49.3X",
        "12636": "T49.4X",
        "12637": "T49.5X",
        "12638": "T49.6X",
        "12639": "T49.7",
        "12640": "T49.7X",
        "12641": "T49.8X",
        "12642": "T49.91",
        "12643": "T49.92",
        "12644": "T49.93",
        "12645": "T49.94",
        "12646": "T49.95",
        "12647": "T49.96",
        "12648": "T50.0X",
        "12649": "T50.1X",
        "12650": "T50.2X",
        "12651": "T50.3X",
        "12652": "T50.4X",
        "12653": "T50.5X",
        "12654": "T50.6X",
        "12655": "T50.7X",
        "12656": "T50.8X",
        "12657": "T50.90",
        "12658": "T50.99",
        "12659": "T50.A1",
        "12660": "T50.A2",
        "12661": "T50.A9",
        "12662": "T50.B1",
        "12663": "T50.B9",
        "12664": "T50.Z1",
        "12665": "T50.Z9",
        "12666": "T51.0X",
        "12667": "T51.1X",
        "12668": "T51.2",
        "12669": "T51.2X",
        "12670": "T51.3X",
        "12671": "T51.8X",
        "12672": "T51.91",
        "12673": "T51.92",
        "12674": "T51.93",
        "12675": "T51.94",
        "12676": "T52.0X",
        "12677": "T52.1X",
        "12678": "T52.2X",
        "12679": "T52.3X",
        "12680": "T52.4X",
        "12681": "T52.8X",
        "12682": "T52.91",
        "12683": "T52.92",
        "12684": "T52.93",
        "12685": "T52.94",
        "12686": "T53.0X",
        "12687": "T53.1X",
        "12688": "T53.2X",
        "12689": "T53.3X",
        "12690": "T53.4X",
        "12691": "T53.5X",
        "12692": "T53.6X",
        "12693": "T53.7X",
        "12694": "T53.91",
        "12695": "T53.92",
        "12696": "T53.93",
        "12697": "T53.94",
        "12698": "T54.0X",
        "12699": "T54.1X",
        "12700": "T54.2X",
        "12701": "T54.3X",
        "12702": "T54.91",
        "12703": "T54.92",
        "12704": "T54.93",
        "12705": "T54.94",
        "12706": "T55.0X",
        "12707": "T55.1X",
        "12708": "T56.0X",
        "12709": "T56.1X",
        "12710": "T56.2X",
        "12711": "T56.3X",
        "12712": "T56.4X",
        "12713": "T56.5X",
        "12714": "T56.6X",
        "12715": "T56.7X",
        "12716": "T56.81",
        "12717": "T56.89",
        "12718": "T56.91",
        "12719": "T56.92",
        "12720": "T56.93",
        "12721": "T56.94",
        "12722": "T57.0X",
        "12723": "T57.1X",
        "12724": "T57.2X",
        "12725": "T57.3X",
        "12726": "T57.8X",
        "12727": "T57.92",
        "12728": "T57.93",
        "12729": "T57.94",
        "12730": "T58.01",
        "12731": "T58.02",
        "12732": "T58.03",
        "12733": "T58.04",
        "12734": "T58.11",
        "12735": "T58.12",
        "12736": "T58.13",
        "12737": "T58.14",
        "12738": "T58.2X",
        "12739": "T58.8X",
        "12740": "T58.91",
        "12741": "T58.92",
        "12742": "T58.93",
        "12743": "T58.94",
        "12744": "T59.0X",
        "12745": "T59.1X",
        "12746": "T59.2X",
        "12747": "T59.3X",
        "12748": "T59.4X",
        "12749": "T59.5X",
        "12750": "T59.6X",
        "12751": "T59.7X",
        "12752": "T59.81",
        "12753": "T59.89",
        "12754": "T59.91",
        "12755": "T59.92",
        "12756": "T59.93",
        "12757": "T59.94",
        "12758": "T60.0X",
        "12759": "T60.1X",
        "12760": "T60.2X",
        "12761": "T60.3X",
        "12762": "T60.4X",
        "12763": "T60.8X",
        "12764": "T60.91",
        "12765": "T60.92",
        "12766": "T60.94",
        "12767": "T61.01",
        "12768": "T61.02",
        "12769": "T61.03",
        "12770": "T61.04",
        "12771": "T61.11",
        "12772": "T61.12",
        "12773": "T61.13",
        "12774": "T61.14",
        "12775": "T61.77",
        "12776": "T61.78",
        "12777": "T61.8X",
        "12778": "T61.91",
        "12779": "T61.93",
        "12780": "T61.94",
        "12781": "T62.0X",
        "12782": "T62.1X",
        "12783": "T62.2X",
        "12784": "T62.6",
        "12785": "T62.8X",
        "12786": "T62.9",
        "12787": "T62.91",
        "12788": "T62.92",
        "12789": "T62.93",
        "12790": "T62.94",
        "12791": "T63.00",
        "12792": "T63.01",
        "12793": "T63.02",
        "12794": "T63.03",
        "12795": "T63.04",
        "12796": "T63.06",
        "12797": "T63.07",
        "12798": "T63.08",
        "12799": "T63.09",
        "12800": "T63.11",
        "12801": "T63.12",
        "12802": "T63.19",
        "12803": "T63.2",
        "12804": "T63.2X",
        "12805": "T63.30",
        "12806": "T63.31",
        "12807": "T63.32",
        "12808": "T63.33",
        "12809": "T63.39",
        "12810": "T63.4",
        "12811": "T63.41",
        "12812": "T63.42",
        "12813": "T63.43",
        "12814": "T63.44",
        "12815": "T63.45",
        "12816": "T63.46",
        "12817": "T63.48",
        "12818": "T63.51",
        "12819": "T63.59",
        "12820": "T63.61",
        "12821": "T63.62",
        "12822": "T63.63",
        "12823": "T63.69",
        "12824": "T63.71",
        "12825": "T63.79",
        "12826": "T63.8",
        "12827": "T63.81",
        "12828": "T63.82",
        "12829": "T63.83",
        "12830": "T63.89",
        "12831": "T63.9",
        "12832": "T63.91",
        "12833": "T63.92",
        "12834": "T63.93",
        "12835": "T63.94",
        "12836": "T64.01",
        "12837": "T64.02",
        "12838": "T64.03",
        "12839": "T64.04",
        "12840": "T64.81",
        "12841": "T64.82",
        "12842": "T64.83",
        "12843": "T65.0X",
        "12844": "T65.1X",
        "12845": "T65.21",
        "12846": "T65.22",
        "12847": "T65.29",
        "12848": "T65.3X",
        "12849": "T65.4X",
        "12850": "T65.5X",
        "12851": "T65.6X",
        "12852": "T65.81",
        "12853": "T65.82",
        "12854": "T65.83",
        "12855": "T65.89",
        "12856": "T65.91",
        "12857": "T65.92",
        "12858": "T65.93",
        "12859": "T65.94",
        "12860": "T66.XX",
        "12861": "T67.0",
        "12862": "T67.0X",
        "12863": "T67.1",
        "12864": "T67.1X",
        "12865": "T67.2X",
        "12866": "T67.3X",
        "12867": "T67.4X",
        "12868": "T67.5",
        "12869": "T67.5X",
        "12870": "T67.6X",
        "12871": "T67.7X",
        "12872": "T67.8X",
        "12873": "T67.9X",
        "12874": "T68.XX",
        "12875": "T69.01",
        "12876": "T69.02",
        "12877": "T69.1X",
        "12878": "T69.8X",
        "12879": "T69.9X",
        "12880": "T70.0",
        "12881": "T70.1",
        "12882": "T70.1X",
        "12883": "T70.20",
        "12884": "T70.29",
        "12885": "T70.3X",
        "12886": "T70.4X",
        "12887": "T70.8X",
        "12888": "T70.9X",
        "12889": "T71.11",
        "12890": "T71.12",
        "12891": "T71.13",
        "12892": "T71.14",
        "12893": "T71.15",
        "12894": "T71.16",
        "12895": "T71.19",
        "12896": "T71.20",
        "12897": "T71.21",
        "12898": "T71.22",
        "12899": "T71.23",
        "12900": "T71.29",
        "12901": "T71.9X",
        "12902": "T73.0X",
        "12903": "T73.1X",
        "12904": "T73.2X",
        "12905": "T73.3X",
        "12906": "T73.8X",
        "12907": "T73.9X",
        "12908": "T74.01",
        "12909": "T74.02",
        "12910": "T74.11",
        "12911": "T74.12",
        "12912": "T74.21",
        "12913": "T74.22",
        "12914": "T74.31",
        "12915": "T74.32",
        "12916": "T74.4X",
        "12917": "T74.91",
        "12918": "T74.92",
        "12919": "T75.00",
        "12920": "T75.01",
        "12921": "T75.09",
        "12922": "T75.20",
        "12923": "T75.21",
        "12924": "T75.22",
        "12925": "T75.23",
        "12926": "T75.29",
        "12927": "T75.3X",
        "12928": "T75.4",
        "12929": "T75.4X",
        "12930": "T75.81",
        "12931": "T75.82",
        "12932": "T75.89",
        "12933": "T76.01",
        "12934": "T76.02",
        "12935": "T76.11",
        "12936": "T76.12",
        "12937": "T76.21",
        "12938": "T76.22",
        "12939": "T76.31",
        "12940": "T76.32",
        "12941": "T76.91",
        "12942": "T76.92",
        "12943": "T78.00",
        "12944": "T78.01",
        "12945": "T78.02",
        "12946": "T78.03",
        "12947": "T78.04",
        "12948": "T78.05",
        "12949": "T78.06",
        "12950": "T78.07",
        "12951": "T78.08",
        "12952": "T78.09",
        "12953": "T78.1",
        "12954": "T78.1X",
        "12955": "T78.2X",
        "12956": "T78.3X",
        "12957": "T78.4",
        "12958": "T78.40",
        "12959": "T78.41",
        "12960": "T78.49",
        "12961": "T78.8X",
        "12962": "T79.0X",
        "12963": "T79.1X",
        "12964": "T79.2X",
        "12965": "T79.4X",
        "12966": "T79.5X",
        "12967": "T79.6X",
        "12968": "T79.7X",
        "12969": "T79.8",
        "12970": "T79.8X",
        "12971": "T79.9",
        "12972": "T79.9X",
        "12973": "T79.A0",
        "12974": "T79.A1",
        "12975": "T79.A2",
        "12976": "T79.A3",
        "12977": "T79.A9",
        "12978": "T80.0X",
        "12979": "T80.1X",
        "12980": "T80.21",
        "12981": "T80.22",
        "12982": "T80.29",
        "12983": "T80.30",
        "12984": "T80.31",
        "12985": "T80.39",
        "12986": "T80.40",
        "12987": "T80.41",
        "12988": "T80.49",
        "12989": "T80.51",
        "12990": "T80.52",
        "12991": "T80.59",
        "12992": "T80.61",
        "12993": "T80.62",
        "12994": "T80.69",
        "12995": "T80.81",
        "12996": "T80.89",
        "12997": "T80.90",
        "12998": "T80.91",
        "12999": "T80.92",
        "13000": "T80.A0",
        "13001": "T80.A1",
        "13002": "T80.A9",
        "13003": "T81.10",
        "13004": "T81.11",
        "13005": "T81.12",
        "13006": "T81.19",
        "13007": "T81.2",
        "13008": "T81.30",
        "13009": "T81.31",
        "13010": "T81.32",
        "13011": "T81.33",
        "13012": "T81.4",
        "13013": "T81.4X",
        "13014": "T81.50",
        "13015": "T81.51",
        "13016": "T81.52",
        "13017": "T81.53",
        "13018": "T81.59",
        "13019": "T81.60",
        "13020": "T81.61",
        "13021": "T81.69",
        "13022": "T81.71",
        "13023": "T81.72",
        "13024": "T81.8",
        "13025": "T81.81",
        "13026": "T81.82",
        "13027": "T81.83",
        "13028": "T81.89",
        "13029": "T81.9",
        "13030": "T81.9X",
        "13031": "T82.01",
        "13032": "T82.02",
        "13033": "T82.03",
        "13034": "T82.09",
        "13035": "T82.11",
        "13036": "T82.12",
        "13037": "T82.19",
        "13038": "T82.21",
        "13039": "T82.22",
        "13040": "T82.31",
        "13041": "T82.32",
        "13042": "T82.33",
        "13043": "T82.39",
        "13044": "T82.41",
        "13045": "T82.42",
        "13046": "T82.43",
        "13047": "T82.49",
        "13048": "T82.51",
        "13049": "T82.52",
        "13050": "T82.53",
        "13051": "T82.59",
        "13052": "T82.7X",
        "13053": "T82.81",
        "13054": "T82.82",
        "13055": "T82.83",
        "13056": "T82.84",
        "13057": "T82.85",
        "13058": "T82.86",
        "13059": "T82.89",
        "13060": "T82.9X",
        "13061": "T83.01",
        "13062": "T83.02",
        "13063": "T83.03",
        "13064": "T83.09",
        "13065": "T83.11",
        "13066": "T83.12",
        "13067": "T83.19",
        "13068": "T83.21",
        "13069": "T83.22",
        "13070": "T83.23",
        "13071": "T83.29",
        "13072": "T83.31",
        "13073": "T83.32",
        "13074": "T83.39",
        "13075": "T83.41",
        "13076": "T83.42",
        "13077": "T83.49",
        "13078": "T83.51",
        "13079": "T83.59",
        "13080": "T83.6X",
        "13081": "T83.71",
        "13082": "T83.72",
        "13083": "T83.8",
        "13084": "T83.81",
        "13085": "T83.82",
        "13086": "T83.83",
        "13087": "T83.84",
        "13088": "T83.85",
        "13089": "T83.86",
        "13090": "T83.89",
        "13091": "T83.9X",
        "13092": "T84.01",
        "13093": "T84.02",
        "13094": "T84.03",
        "13095": "T84.04",
        "13096": "T84.05",
        "13097": "T84.06",
        "13098": "T84.09",
        "13099": "T84.11",
        "13100": "T84.12",
        "13101": "T84.19",
        "13102": "T84.21",
        "13103": "T84.22",
        "13104": "T84.29",
        "13105": "T84.31",
        "13106": "T84.32",
        "13107": "T84.39",
        "13108": "T84.41",
        "13109": "T84.42",
        "13110": "T84.49",
        "13111": "T84.51",
        "13112": "T84.52",
        "13113": "T84.53",
        "13114": "T84.54",
        "13115": "T84.59",
        "13116": "T84.60",
        "13117": "T84.61",
        "13118": "T84.62",
        "13119": "T84.63",
        "13120": "T84.69",
        "13121": "T84.7X",
        "13122": "T84.81",
        "13123": "T84.82",
        "13124": "T84.83",
        "13125": "T84.84",
        "13126": "T84.85",
        "13127": "T84.86",
        "13128": "T84.89",
        "13129": "T84.9X",
        "13130": "T85.01",
        "13131": "T85.02",
        "13132": "T85.03",
        "13133": "T85.09",
        "13134": "T85.11",
        "13135": "T85.12",
        "13136": "T85.19",
        "13137": "T85.21",
        "13138": "T85.22",
        "13139": "T85.29",
        "13140": "T85.31",
        "13141": "T85.32",
        "13142": "T85.39",
        "13143": "T85.41",
        "13144": "T85.42",
        "13145": "T85.44",
        "13146": "T85.49",
        "13147": "T85.51",
        "13148": "T85.52",
        "13149": "T85.59",
        "13150": "T85.61",
        "13151": "T85.62",
        "13152": "T85.63",
        "13153": "T85.69",
        "13154": "T85.71",
        "13155": "T85.72",
        "13156": "T85.79",
        "13157": "T85.81",
        "13158": "T85.82",
        "13159": "T85.83",
        "13160": "T85.84",
        "13161": "T85.85",
        "13162": "T85.86",
        "13163": "T85.89",
        "13164": "T85.9X",
        "13165": "T86.00",
        "13166": "T86.01",
        "13167": "T86.03",
        "13168": "T86.12",
        "13169": "T86.19",
        "13170": "T86.20",
        "13171": "T86.22",
        "13172": "T86.29",
        "13173": "T86.31",
        "13174": "T86.32",
        "13175": "T86.33",
        "13176": "T86.39",
        "13177": "T86.42",
        "13178": "T86.43",
        "13179": "T86.49",
        "13180": "T86.81",
        "13181": "T86.82",
        "13182": "T86.83",
        "13183": "T86.84",
        "13184": "T86.85",
        "13185": "T86.89",
        "13186": "T86.91",
        "13187": "T87.0X",
        "13188": "T87.1X",
        "13189": "T87.31",
        "13190": "T87.33",
        "13191": "T87.43",
        "13192": "T87.44",
        "13193": "T87.50",
        "13194": "T87.52",
        "13195": "T87.53",
        "13196": "T87.81",
        "13197": "T87.89",
        "13198": "T87.9",
        "13199": "T88.0X",
        "13200": "T88.1",
        "13201": "T88.1X",
        "13202": "T88.2X",
        "13203": "T88.3X",
        "13204": "T88.4X",
        "13205": "T88.52",
        "13206": "T88.59",
        "13207": "T88.6X",
        "13208": "T88.7X",
        "13209": "T88.8X",
        "13210": "T88.9X",
        "13211": "V00.01",
        "13212": "V00.02",
        "13213": "V00.09",
        "13214": "V00.11",
        "13215": "V00.12",
        "13216": "V00.13",
        "13217": "V00.14",
        "13218": "V00.15",
        "13219": "V00.18",
        "13220": "V00.21",
        "13221": "V00.22",
        "13222": "V00.28",
        "13223": "V00.31",
        "13224": "V00.32",
        "13225": "V00.38",
        "13226": "V00.81",
        "13227": "V00.82",
        "13228": "V00.83",
        "13229": "V00.89",
        "13230": "V01.00",
        "13231": "V01.01",
        "13232": "V01.02",
        "13233": "V01.09",
        "13234": "V01.10",
        "13235": "V01.11",
        "13236": "V01.12",
        "13237": "V01.19",
        "13238": "V01.90",
        "13239": "V01.91",
        "13240": "V01.92",
        "13241": "V01.99",
        "13242": "V02.01",
        "13243": "V02.02",
        "13244": "V02.09",
        "13245": "V02.10",
        "13246": "V02.11",
        "13247": "V02.12",
        "13248": "V02.19",
        "13249": "V02.90",
        "13250": "V02.91",
        "13251": "V02.92",
        "13252": "V02.99",
        "13253": "V03.00",
        "13254": "V03.01",
        "13255": "V03.02",
        "13256": "V03.09",
        "13257": "V03.10",
        "13258": "V03.11",
        "13259": "V03.12",
        "13260": "V03.19",
        "13261": "V03.90",
        "13262": "V03.91",
        "13263": "V03.92",
        "13264": "V03.99",
        "13265": "V04.00",
        "13266": "V04.01",
        "13267": "V04.02",
        "13268": "V04.09",
        "13269": "V04.10",
        "13270": "V04.11",
        "13271": "V04.12",
        "13272": "V04.19",
        "13273": "V04.90",
        "13274": "V04.91",
        "13275": "V04.92",
        "13276": "V04.99",
        "13277": "V05.00",
        "13278": "V05.01",
        "13279": "V05.02",
        "13280": "V05.09",
        "13281": "V05.10",
        "13282": "V05.11",
        "13283": "V05.12",
        "13284": "V05.19",
        "13285": "V05.90",
        "13286": "V05.91",
        "13287": "V05.92",
        "13288": "V05.99",
        "13289": "V06.00",
        "13290": "V06.01",
        "13291": "V06.02",
        "13292": "V06.09",
        "13293": "V06.10",
        "13294": "V06.11",
        "13295": "V06.12",
        "13296": "V06.19",
        "13297": "V06.90",
        "13298": "V06.91",
        "13299": "V06.92",
        "13300": "V06.99",
        "13301": "V09.00",
        "13302": "V09.01",
        "13303": "V09.09",
        "13304": "V09.1X",
        "13305": "V09.20",
        "13306": "V09.21",
        "13307": "V09.29",
        "13308": "V09.3X",
        "13309": "V09.9X",
        "13310": "V10.0X",
        "13311": "V10.1X",
        "13312": "V10.2X",
        "13313": "V10.3X",
        "13314": "V10.4X",
        "13315": "V10.5X",
        "13316": "V10.9X",
        "13317": "V11.0X",
        "13318": "V11.1X",
        "13319": "V11.2X",
        "13320": "V11.3X",
        "13321": "V11.4X",
        "13322": "V11.5X",
        "13323": "V11.9X",
        "13324": "V12.0X",
        "13325": "V12.1X",
        "13326": "V12.3X",
        "13327": "V12.4X",
        "13328": "V12.5X",
        "13329": "V12.9X",
        "13330": "V13.0X",
        "13331": "V13.1X",
        "13332": "V13.2X",
        "13333": "V13.3X",
        "13334": "V13.4X",
        "13335": "V13.5X",
        "13336": "V13.9X",
        "13337": "V14.0X",
        "13338": "V14.1X",
        "13339": "V14.2X",
        "13340": "V14.4X",
        "13341": "V14.5X",
        "13342": "V14.9X",
        "13343": "V15.0X",
        "13344": "V15.1X",
        "13345": "V15.2X",
        "13346": "V15.3X",
        "13347": "V15.4X",
        "13348": "V15.5X",
        "13349": "V15.9X",
        "13350": "V16.0X",
        "13351": "V16.1X",
        "13352": "V16.2X",
        "13353": "V16.3X",
        "13354": "V16.4X",
        "13355": "V16.5X",
        "13356": "V16.9X",
        "13357": "V17.0X",
        "13358": "V17.1X",
        "13359": "V17.2X",
        "13360": "V17.3X",
        "13361": "V17.4X",
        "13362": "V17.5X",
        "13363": "V17.9X",
        "13364": "V18.1X",
        "13365": "V18.2X",
        "13366": "V18.3X",
        "13367": "V18.4X",
        "13368": "V18.5X",
        "13369": "V18.9X",
        "13370": "V19.00",
        "13371": "V19.09",
        "13372": "V19.10",
        "13373": "V19.19",
        "13374": "V19.20",
        "13375": "V19.29",
        "13376": "V19.3X",
        "13377": "V19.40",
        "13378": "V19.49",
        "13379": "V19.50",
        "13380": "V19.59",
        "13381": "V19.60",
        "13382": "V19.69",
        "13383": "V19.81",
        "13384": "V19.88",
        "13385": "V19.9X",
        "13386": "V20.0X",
        "13387": "V20.1X",
        "13388": "V20.2X",
        "13389": "V20.3X",
        "13390": "V20.4X",
        "13391": "V20.5X",
        "13392": "V20.9X",
        "13393": "V21.0X",
        "13394": "V21.1X",
        "13395": "V21.2X",
        "13396": "V21.3X",
        "13397": "V21.4X",
        "13398": "V21.5X",
        "13399": "V21.9X",
        "13400": "V22.0X",
        "13401": "V22.1X",
        "13402": "V22.2X",
        "13403": "V22.3X",
        "13404": "V22.4X",
        "13405": "V22.5X",
        "13406": "V22.9X",
        "13407": "V23.0X",
        "13408": "V23.1X",
        "13409": "V23.2X",
        "13410": "V23.3X",
        "13411": "V23.4X",
        "13412": "V23.5X",
        "13413": "V23.9X",
        "13414": "V24.0X",
        "13415": "V24.1X",
        "13416": "V24.2X",
        "13417": "V24.3X",
        "13418": "V24.4X",
        "13419": "V24.5X",
        "13420": "V25.0X",
        "13421": "V25.1X",
        "13422": "V25.2X",
        "13423": "V25.3X",
        "13424": "V25.4X",
        "13425": "V25.5X",
        "13426": "V25.9X",
        "13427": "V26.0X",
        "13428": "V26.1X",
        "13429": "V26.2X",
        "13430": "V26.3X",
        "13431": "V26.4X",
        "13432": "V26.5X",
        "13433": "V26.9X",
        "13434": "V27.0X",
        "13435": "V27.1X",
        "13436": "V27.3X",
        "13437": "V27.5X",
        "13438": "V27.9X",
        "13439": "V28.0X",
        "13440": "V28.1X",
        "13441": "V28.2X",
        "13442": "V28.3X",
        "13443": "V28.4X",
        "13444": "V28.5X",
        "13445": "V28.9X",
        "13446": "V29.00",
        "13447": "V29.09",
        "13448": "V29.10",
        "13449": "V29.19",
        "13450": "V29.20",
        "13451": "V29.3X",
        "13452": "V29.40",
        "13453": "V29.50",
        "13454": "V29.59",
        "13455": "V29.60",
        "13456": "V29.69",
        "13457": "V29.81",
        "13458": "V29.88",
        "13459": "V29.9X",
        "13460": "V30.0X",
        "13461": "V30.1X",
        "13462": "V30.2X",
        "13463": "V30.3X",
        "13464": "V30.4X",
        "13465": "V30.5X",
        "13466": "V30.6X",
        "13467": "V30.7X",
        "13468": "V30.9X",
        "13469": "V31.0X",
        "13470": "V31.1X",
        "13471": "V31.2X",
        "13472": "V31.3X",
        "13473": "V31.4X",
        "13474": "V31.5X",
        "13475": "V31.6X",
        "13476": "V31.7X",
        "13477": "V31.9X",
        "13478": "V32.0X",
        "13479": "V32.1X",
        "13480": "V32.2X",
        "13481": "V32.3X",
        "13482": "V32.4X",
        "13483": "V32.5X",
        "13484": "V32.6X",
        "13485": "V32.7X",
        "13486": "V32.9X",
        "13487": "V33.0X",
        "13488": "V33.1X",
        "13489": "V33.2X",
        "13490": "V33.3X",
        "13491": "V33.4X",
        "13492": "V33.5X",
        "13493": "V33.6X",
        "13494": "V33.7X",
        "13495": "V33.9X",
        "13496": "V34.0X",
        "13497": "V34.1X",
        "13498": "V34.2X",
        "13499": "V34.3X",
        "13500": "V34.4X",
        "13501": "V34.6X",
        "13502": "V34.7X",
        "13503": "V35.0X",
        "13504": "V35.1X",
        "13505": "V35.2X",
        "13506": "V35.3X",
        "13507": "V35.4X",
        "13508": "V35.5X",
        "13509": "V35.6X",
        "13510": "V35.7X",
        "13511": "V35.9X",
        "13512": "V36.0X",
        "13513": "V36.1X",
        "13514": "V36.2X",
        "13515": "V36.4X",
        "13516": "V36.5X",
        "13517": "V36.6X",
        "13518": "V36.7X",
        "13519": "V36.9X",
        "13520": "V37.0X",
        "13521": "V37.1X",
        "13522": "V37.2X",
        "13523": "V37.3X",
        "13524": "V37.4X",
        "13525": "V37.5X",
        "13526": "V37.6X",
        "13527": "V37.7X",
        "13528": "V37.9X",
        "13529": "V38.0X",
        "13530": "V38.1X",
        "13531": "V38.2X",
        "13532": "V38.3X",
        "13533": "V38.4X",
        "13534": "V38.5X",
        "13535": "V38.6X",
        "13536": "V38.9X",
        "13537": "V39.00",
        "13538": "V39.09",
        "13539": "V39.10",
        "13540": "V39.19",
        "13541": "V39.20",
        "13542": "V39.29",
        "13543": "V39.3X",
        "13544": "V39.40",
        "13545": "V39.49",
        "13546": "V39.50",
        "13547": "V39.59",
        "13548": "V39.60",
        "13549": "V39.81",
        "13550": "V39.89",
        "13551": "V39.9X",
        "13552": "V40.0X",
        "13553": "V40.1X",
        "13554": "V40.2X",
        "13555": "V40.3X",
        "13556": "V40.4X",
        "13557": "V40.6X",
        "13558": "V40.7X",
        "13559": "V40.9X",
        "13560": "V41.0X",
        "13561": "V41.1X",
        "13562": "V41.2X",
        "13563": "V41.3X",
        "13564": "V41.4X",
        "13565": "V41.5X",
        "13566": "V41.6X",
        "13567": "V41.7X",
        "13568": "V41.9X",
        "13569": "V42.0X",
        "13570": "V42.1X",
        "13571": "V42.2X",
        "13572": "V42.3X",
        "13573": "V42.4X",
        "13574": "V42.5X",
        "13575": "V42.6X",
        "13576": "V42.9X",
        "13577": "V43.01",
        "13578": "V43.02",
        "13579": "V43.03",
        "13580": "V43.04",
        "13581": "V43.11",
        "13582": "V43.12",
        "13583": "V43.14",
        "13584": "V43.21",
        "13585": "V43.22",
        "13586": "V43.23",
        "13587": "V43.24",
        "13588": "V43.31",
        "13589": "V43.32",
        "13590": "V43.33",
        "13591": "V43.34",
        "13592": "V43.41",
        "13593": "V43.42",
        "13594": "V43.43",
        "13595": "V43.44",
        "13596": "V43.51",
        "13597": "V43.52",
        "13598": "V43.53",
        "13599": "V43.54",
        "13600": "V43.61",
        "13601": "V43.62",
        "13602": "V43.63",
        "13603": "V43.64",
        "13604": "V43.71",
        "13605": "V43.72",
        "13606": "V43.73",
        "13607": "V43.74",
        "13608": "V43.91",
        "13609": "V43.92",
        "13610": "V43.93",
        "13611": "V43.94",
        "13612": "V44.0X",
        "13613": "V44.1X",
        "13614": "V44.2X",
        "13615": "V44.3X",
        "13616": "V44.4X",
        "13617": "V44.5X",
        "13618": "V44.6X",
        "13619": "V44.7X",
        "13620": "V44.9X",
        "13621": "V45.0X",
        "13622": "V45.1X",
        "13623": "V45.2X",
        "13624": "V45.3X",
        "13625": "V45.4X",
        "13626": "V45.5X",
        "13627": "V45.6X",
        "13628": "V45.7X",
        "13629": "V45.9X",
        "13630": "V46.0X",
        "13631": "V46.1X",
        "13632": "V46.2X",
        "13633": "V46.4X",
        "13634": "V46.5X",
        "13635": "V46.6X",
        "13636": "V46.7X",
        "13637": "V46.9X",
        "13638": "V47.01",
        "13639": "V47.02",
        "13640": "V47.11",
        "13641": "V47.12",
        "13642": "V47.2X",
        "13643": "V47.31",
        "13644": "V47.32",
        "13645": "V47.4X",
        "13646": "V47.51",
        "13647": "V47.52",
        "13648": "V47.62",
        "13649": "V47.7X",
        "13650": "V47.91",
        "13651": "V47.92",
        "13652": "V48.0X",
        "13653": "V48.1X",
        "13654": "V48.2X",
        "13655": "V48.3X",
        "13656": "V48.4X",
        "13657": "V48.5X",
        "13658": "V48.6X",
        "13659": "V48.9X",
        "13660": "V49.00",
        "13661": "V49.09",
        "13662": "V49.19",
        "13663": "V49.20",
        "13664": "V49.29",
        "13665": "V49.3X",
        "13666": "V49.40",
        "13667": "V49.50",
        "13668": "V49.59",
        "13669": "V49.60",
        "13670": "V49.69",
        "13671": "V49.81",
        "13672": "V49.88",
        "13673": "V49.9X",
        "13674": "V50.0X",
        "13675": "V50.1X",
        "13676": "V50.2X",
        "13677": "V50.3X",
        "13678": "V50.4X",
        "13679": "V50.5X",
        "13680": "V50.6X",
        "13681": "V50.7X",
        "13682": "V50.9X",
        "13683": "V51.0X",
        "13684": "V51.2X",
        "13685": "V51.3X",
        "13686": "V51.4X",
        "13687": "V51.5X",
        "13688": "V51.6X",
        "13689": "V51.7X",
        "13690": "V51.9X",
        "13691": "V52.0X",
        "13692": "V52.1X",
        "13693": "V52.2X",
        "13694": "V52.3X",
        "13695": "V52.5X",
        "13696": "V52.6X",
        "13697": "V52.7X",
        "13698": "V52.9X",
        "13699": "V53.0X",
        "13700": "V53.1X",
        "13701": "V53.2X",
        "13702": "V53.3X",
        "13703": "V53.4X",
        "13704": "V53.5X",
        "13705": "V53.7X",
        "13706": "V53.9X",
        "13707": "V54.0X",
        "13708": "V54.1X",
        "13709": "V54.2X",
        "13710": "V54.3X",
        "13711": "V54.4X",
        "13712": "V54.5X",
        "13713": "V54.6X",
        "13714": "V54.7X",
        "13715": "V54.9X",
        "13716": "V55.0X",
        "13717": "V55.2X",
        "13718": "V55.3X",
        "13719": "V55.4X",
        "13720": "V55.5X",
        "13721": "V55.6X",
        "13722": "V55.7X",
        "13723": "V55.9X",
        "13724": "V56.0X",
        "13725": "V56.1X",
        "13726": "V56.2X",
        "13727": "V56.3X",
        "13728": "V56.4X",
        "13729": "V56.5X",
        "13730": "V56.6X",
        "13731": "V56.7X",
        "13732": "V56.9X",
        "13733": "V57.0X",
        "13734": "V57.1X",
        "13735": "V57.2X",
        "13736": "V57.3X",
        "13737": "V57.4X",
        "13738": "V57.5X",
        "13739": "V57.6X",
        "13740": "V57.7X",
        "13741": "V57.9X",
        "13742": "V58.0X",
        "13743": "V58.1X",
        "13744": "V58.2X",
        "13745": "V58.3X",
        "13746": "V58.4X",
        "13747": "V58.5X",
        "13748": "V58.6X",
        "13749": "V58.7X",
        "13750": "V58.9X",
        "13751": "V59.00",
        "13752": "V59.09",
        "13753": "V59.10",
        "13754": "V59.19",
        "13755": "V59.20",
        "13756": "V59.29",
        "13757": "V59.3X",
        "13758": "V59.40",
        "13759": "V59.49",
        "13760": "V59.50",
        "13761": "V59.59",
        "13762": "V59.60",
        "13763": "V59.69",
        "13764": "V59.81",
        "13765": "V59.88",
        "13766": "V59.9X",
        "13767": "V60.0X",
        "13768": "V60.1X",
        "13769": "V60.2X",
        "13770": "V60.3X",
        "13771": "V60.4X",
        "13772": "V60.5X",
        "13773": "V60.6X",
        "13774": "V60.7X",
        "13775": "V60.9X",
        "13776": "V61.0X",
        "13777": "V61.1X",
        "13778": "V61.2X",
        "13779": "V61.3X",
        "13780": "V61.4X",
        "13781": "V61.5X",
        "13782": "V61.6X",
        "13783": "V61.7X",
        "13784": "V61.9X",
        "13785": "V62.0X",
        "13786": "V62.1X",
        "13787": "V62.2X",
        "13788": "V62.3X",
        "13789": "V62.4X",
        "13790": "V62.5X",
        "13791": "V62.6X",
        "13792": "V62.7X",
        "13793": "V63.0X",
        "13794": "V63.1X",
        "13795": "V63.2X",
        "13796": "V63.3X",
        "13797": "V63.4X",
        "13798": "V63.5X",
        "13799": "V63.6X",
        "13800": "V63.7X",
        "13801": "V63.9X",
        "13802": "V64.0X",
        "13803": "V64.1X",
        "13804": "V64.2X",
        "13805": "V64.3X",
        "13806": "V64.4X",
        "13807": "V64.5X",
        "13808": "V64.6X",
        "13809": "V64.7X",
        "13810": "V64.9X",
        "13811": "V65.0X",
        "13812": "V65.1X",
        "13813": "V65.2X",
        "13814": "V65.3X",
        "13815": "V65.4X",
        "13816": "V65.6X",
        "13817": "V65.7X",
        "13818": "V65.9X",
        "13819": "V66.0X",
        "13820": "V66.1X",
        "13821": "V66.2X",
        "13822": "V66.3X",
        "13823": "V66.5X",
        "13824": "V66.6X",
        "13825": "V66.7X",
        "13826": "V66.9X",
        "13827": "V67.0X",
        "13828": "V67.1X",
        "13829": "V67.2X",
        "13830": "V67.3X",
        "13831": "V67.4X",
        "13832": "V67.5X",
        "13833": "V67.6X",
        "13834": "V67.7X",
        "13835": "V67.9X",
        "13836": "V68.0X",
        "13837": "V68.2X",
        "13838": "V68.3X",
        "13839": "V68.4X",
        "13840": "V68.5X",
        "13841": "V68.6X",
        "13842": "V68.7X",
        "13843": "V68.9X",
        "13844": "V69.00",
        "13845": "V69.09",
        "13846": "V69.10",
        "13847": "V69.19",
        "13848": "V69.20",
        "13849": "V69.29",
        "13850": "V69.3X",
        "13851": "V69.40",
        "13852": "V69.49",
        "13853": "V69.50",
        "13854": "V69.59",
        "13855": "V69.60",
        "13856": "V69.69",
        "13857": "V69.81",
        "13858": "V69.88",
        "13859": "V69.9X",
        "13860": "V70.0X",
        "13861": "V70.1X",
        "13862": "V70.2X",
        "13863": "V70.3X",
        "13864": "V70.4X",
        "13865": "V70.5X",
        "13866": "V70.6X",
        "13867": "V70.7X",
        "13868": "V70.9X",
        "13869": "V71.0X",
        "13870": "V71.1X",
        "13871": "V71.2X",
        "13872": "V71.3X",
        "13873": "V71.5X",
        "13874": "V71.6X",
        "13875": "V71.7X",
        "13876": "V71.9X",
        "13877": "V72.0X",
        "13878": "V72.1X",
        "13879": "V72.2X",
        "13880": "V72.3X",
        "13881": "V72.4X",
        "13882": "V72.5X",
        "13883": "V72.6X",
        "13884": "V72.7X",
        "13885": "V72.9X",
        "13886": "V73.0X",
        "13887": "V73.1X",
        "13888": "V73.2X",
        "13889": "V73.3X",
        "13890": "V73.4X",
        "13891": "V73.5X",
        "13892": "V73.6X",
        "13893": "V73.9X",
        "13894": "V74.0X",
        "13895": "V74.1X",
        "13896": "V74.2X",
        "13897": "V74.3X",
        "13898": "V74.4X",
        "13899": "V74.5X",
        "13900": "V74.7X",
        "13901": "V74.9X",
        "13902": "V75.0X",
        "13903": "V75.1X",
        "13904": "V75.2X",
        "13905": "V75.3X",
        "13906": "V75.4X",
        "13907": "V75.5X",
        "13908": "V75.6X",
        "13909": "V75.7X",
        "13910": "V75.9X",
        "13911": "V76.0X",
        "13912": "V76.1X",
        "13913": "V76.2X",
        "13914": "V76.3X",
        "13915": "V76.4X",
        "13916": "V76.6X",
        "13917": "V76.7X",
        "13918": "V76.9X",
        "13919": "V77.0X",
        "13920": "V77.1X",
        "13921": "V77.2X",
        "13922": "V77.3X",
        "13923": "V77.4X",
        "13924": "V77.5X",
        "13925": "V77.6X",
        "13926": "V77.7X",
        "13927": "V77.9X",
        "13928": "V78.0X",
        "13929": "V78.1X",
        "13930": "V78.2X",
        "13931": "V78.3X",
        "13932": "V78.4X",
        "13933": "V78.5X",
        "13934": "V78.6X",
        "13935": "V78.7X",
        "13936": "V78.9X",
        "13937": "V79.00",
        "13938": "V79.09",
        "13939": "V79.10",
        "13940": "V79.20",
        "13941": "V79.3X",
        "13942": "V79.40",
        "13943": "V79.49",
        "13944": "V79.50",
        "13945": "V79.59",
        "13946": "V79.69",
        "13947": "V79.81",
        "13948": "V79.88",
        "13949": "V79.9X",
        "13950": "V80.01",
        "13951": "V80.02",
        "13952": "V80.11",
        "13953": "V80.12",
        "13954": "V80.21",
        "13955": "V80.22",
        "13956": "V80.31",
        "13957": "V80.32",
        "13958": "V80.41",
        "13959": "V80.42",
        "13960": "V80.51",
        "13961": "V80.52",
        "13962": "V80.61",
        "13963": "V80.62",
        "13964": "V80.71",
        "13965": "V80.72",
        "13966": "V80.73",
        "13967": "V80.79",
        "13968": "V80.81",
        "13969": "V80.82",
        "13970": "V80.91",
        "13971": "V80.92",
        "13972": "V81.0X",
        "13973": "V81.1X",
        "13974": "V81.2X",
        "13975": "V81.3X",
        "13976": "V81.4X",
        "13977": "V81.5X",
        "13978": "V81.6X",
        "13979": "V81.7X",
        "13980": "V81.81",
        "13981": "V81.82",
        "13982": "V81.83",
        "13983": "V81.89",
        "13984": "V81.9X",
        "13985": "V82.0X",
        "13986": "V82.1X",
        "13987": "V82.2X",
        "13988": "V82.3X",
        "13989": "V82.4X",
        "13990": "V82.5X",
        "13991": "V82.6X",
        "13992": "V82.7X",
        "13993": "V82.8X",
        "13994": "V82.9X",
        "13995": "V83.0X",
        "13996": "V83.1X",
        "13997": "V83.2X",
        "13998": "V83.3X",
        "13999": "V83.4X",
        "14000": "V83.5X",
        "14001": "V83.6X",
        "14002": "V83.7X",
        "14003": "V83.9X",
        "14004": "V84.0X",
        "14005": "V84.1X",
        "14006": "V84.2X",
        "14007": "V84.3X",
        "14008": "V84.4X",
        "14009": "V84.5X",
        "14010": "V84.6X",
        "14011": "V84.7X",
        "14012": "V84.9X",
        "14013": "V85.0X",
        "14014": "V85.1X",
        "14015": "V85.2X",
        "14016": "V85.3X",
        "14017": "V85.4X",
        "14018": "V85.5X",
        "14019": "V85.7X",
        "14020": "V86.01",
        "14021": "V86.02",
        "14022": "V86.03",
        "14023": "V86.04",
        "14024": "V86.09",
        "14025": "V86.11",
        "14026": "V86.12",
        "14027": "V86.14",
        "14028": "V86.19",
        "14029": "V86.21",
        "14030": "V86.22",
        "14031": "V86.23",
        "14032": "V86.29",
        "14033": "V86.31",
        "14034": "V86.32",
        "14035": "V86.33",
        "14036": "V86.34",
        "14037": "V86.39",
        "14038": "V86.41",
        "14039": "V86.42",
        "14040": "V86.43",
        "14041": "V86.44",
        "14042": "V86.49",
        "14043": "V86.51",
        "14044": "V86.52",
        "14045": "V86.54",
        "14046": "V86.59",
        "14047": "V86.61",
        "14048": "V86.62",
        "14049": "V86.63",
        "14050": "V86.64",
        "14051": "V86.71",
        "14052": "V86.72",
        "14053": "V86.73",
        "14054": "V86.74",
        "14055": "V86.79",
        "14056": "V86.91",
        "14057": "V86.92",
        "14058": "V86.93",
        "14059": "V86.94",
        "14060": "V86.99",
        "14061": "V87.0X",
        "14062": "V87.1X",
        "14063": "V87.2X",
        "14064": "V87.3X",
        "14065": "V87.4X",
        "14066": "V87.6X",
        "14067": "V87.7X",
        "14068": "V87.8X",
        "14069": "V87.9X",
        "14070": "V88.0X",
        "14071": "V88.1X",
        "14072": "V88.3X",
        "14073": "V88.4X",
        "14074": "V88.5X",
        "14075": "V88.6X",
        "14076": "V88.7X",
        "14077": "V88.8X",
        "14078": "V88.9X",
        "14079": "V89.0X",
        "14080": "V89.1X",
        "14081": "V89.2X",
        "14082": "V89.3X",
        "14083": "V89.9X",
        "14084": "V90.00",
        "14085": "V90.01",
        "14086": "V90.02",
        "14087": "V90.04",
        "14088": "V90.05",
        "14089": "V90.06",
        "14090": "V90.08",
        "14091": "V90.09",
        "14092": "V90.10",
        "14093": "V90.11",
        "14094": "V90.12",
        "14095": "V90.13",
        "14096": "V90.14",
        "14097": "V90.15",
        "14098": "V90.16",
        "14099": "V90.18",
        "14100": "V90.19",
        "14101": "V90.20",
        "14102": "V90.21",
        "14103": "V90.22",
        "14104": "V90.23",
        "14105": "V90.24",
        "14106": "V90.25",
        "14107": "V90.26",
        "14108": "V90.28",
        "14109": "V90.29",
        "14110": "V90.30",
        "14111": "V90.31",
        "14112": "V90.32",
        "14113": "V90.33",
        "14114": "V90.34",
        "14115": "V90.35",
        "14116": "V90.36",
        "14117": "V90.37",
        "14118": "V90.38",
        "14119": "V90.39",
        "14120": "V90.80",
        "14121": "V90.81",
        "14122": "V90.82",
        "14123": "V90.83",
        "14124": "V90.84",
        "14125": "V90.85",
        "14126": "V90.86",
        "14127": "V90.87",
        "14128": "V90.89",
        "14129": "V91.00",
        "14130": "V91.01",
        "14131": "V91.02",
        "14132": "V91.03",
        "14133": "V91.04",
        "14134": "V91.05",
        "14135": "V91.06",
        "14136": "V91.07",
        "14137": "V91.09",
        "14138": "V91.10",
        "14139": "V91.11",
        "14140": "V91.12",
        "14141": "V91.13",
        "14142": "V91.14",
        "14143": "V91.15",
        "14144": "V91.16",
        "14145": "V91.18",
        "14146": "V91.19",
        "14147": "V91.20",
        "14148": "V91.21",
        "14149": "V91.22",
        "14150": "V91.23",
        "14151": "V91.24",
        "14152": "V91.25",
        "14153": "V91.26",
        "14154": "V91.29",
        "14155": "V91.30",
        "14156": "V91.31",
        "14157": "V91.32",
        "14158": "V91.33",
        "14159": "V91.34",
        "14160": "V91.35",
        "14161": "V91.36",
        "14162": "V91.37",
        "14163": "V91.39",
        "14164": "V91.80",
        "14165": "V91.81",
        "14166": "V91.82",
        "14167": "V91.83",
        "14168": "V91.84",
        "14169": "V91.85",
        "14170": "V91.86",
        "14171": "V91.87",
        "14172": "V91.89",
        "14173": "V92.00",
        "14174": "V92.01",
        "14175": "V92.02",
        "14176": "V92.03",
        "14177": "V92.04",
        "14178": "V92.05",
        "14179": "V92.06",
        "14180": "V92.07",
        "14181": "V92.08",
        "14182": "V92.09",
        "14183": "V92.10",
        "14184": "V92.11",
        "14185": "V92.12",
        "14186": "V92.13",
        "14187": "V92.14",
        "14188": "V92.16",
        "14189": "V92.19",
        "14190": "V92.20",
        "14191": "V92.21",
        "14192": "V92.22",
        "14193": "V92.23",
        "14194": "V92.24",
        "14195": "V92.25",
        "14196": "V92.26",
        "14197": "V92.27",
        "14198": "V92.28",
        "14199": "V92.29",
        "14200": "V93.00",
        "14201": "V93.01",
        "14202": "V93.02",
        "14203": "V93.03",
        "14204": "V93.04",
        "14205": "V93.09",
        "14206": "V93.10",
        "14207": "V93.11",
        "14208": "V93.12",
        "14209": "V93.13",
        "14210": "V93.14",
        "14211": "V93.19",
        "14212": "V93.20",
        "14213": "V93.21",
        "14214": "V93.22",
        "14215": "V93.23",
        "14216": "V93.24",
        "14217": "V93.29",
        "14218": "V93.30",
        "14219": "V93.31",
        "14220": "V93.32",
        "14221": "V93.33",
        "14222": "V93.34",
        "14223": "V93.35",
        "14224": "V93.36",
        "14225": "V93.38",
        "14226": "V93.39",
        "14227": "V93.40",
        "14228": "V93.41",
        "14229": "V93.42",
        "14230": "V93.43",
        "14231": "V93.44",
        "14232": "V93.49",
        "14233": "V93.50",
        "14234": "V93.51",
        "14235": "V93.52",
        "14236": "V93.53",
        "14237": "V93.54",
        "14238": "V93.59",
        "14239": "V93.60",
        "14240": "V93.61",
        "14241": "V93.62",
        "14242": "V93.63",
        "14243": "V93.64",
        "14244": "V93.69",
        "14245": "V93.80",
        "14246": "V93.81",
        "14247": "V93.82",
        "14248": "V93.83",
        "14249": "V93.84",
        "14250": "V93.85",
        "14251": "V93.86",
        "14252": "V93.87",
        "14253": "V93.89",
        "14254": "V94.0X",
        "14255": "V94.11",
        "14256": "V94.12",
        "14257": "V94.21",
        "14258": "V94.22",
        "14259": "V94.31",
        "14260": "V94.32",
        "14261": "V94.4X",
        "14262": "V94.81",
        "14263": "V94.89",
        "14264": "V94.9X",
        "14265": "V95.00",
        "14266": "V95.01",
        "14267": "V95.02",
        "14268": "V95.03",
        "14269": "V95.04",
        "14270": "V95.05",
        "14271": "V95.09",
        "14272": "V95.10",
        "14273": "V95.11",
        "14274": "V95.12",
        "14275": "V95.14",
        "14276": "V95.15",
        "14277": "V95.19",
        "14278": "V95.20",
        "14279": "V95.21",
        "14280": "V95.22",
        "14281": "V95.23",
        "14282": "V95.24",
        "14283": "V95.29",
        "14284": "V95.30",
        "14285": "V95.31",
        "14286": "V95.32",
        "14287": "V95.33",
        "14288": "V95.34",
        "14289": "V95.35",
        "14290": "V95.39",
        "14291": "V95.40",
        "14292": "V95.41",
        "14293": "V95.42",
        "14294": "V95.43",
        "14295": "V95.44",
        "14296": "V95.45",
        "14297": "V95.49",
        "14298": "V95.8X",
        "14299": "V95.9X",
        "14300": "V96.00",
        "14301": "V96.01",
        "14302": "V96.02",
        "14303": "V96.03",
        "14304": "V96.04",
        "14305": "V96.05",
        "14306": "V96.09",
        "14307": "V96.10",
        "14308": "V96.11",
        "14309": "V96.13",
        "14310": "V96.14",
        "14311": "V96.15",
        "14312": "V96.19",
        "14313": "V96.20",
        "14314": "V96.21",
        "14315": "V96.22",
        "14316": "V96.23",
        "14317": "V96.24",
        "14318": "V96.25",
        "14319": "V96.29",
        "14320": "V96.8X",
        "14321": "V96.9X",
        "14322": "V97.0X",
        "14323": "V97.1X",
        "14324": "V97.21",
        "14325": "V97.22",
        "14326": "V97.29",
        "14327": "V97.31",
        "14328": "V97.32",
        "14329": "V97.33",
        "14330": "V97.39",
        "14331": "V97.81",
        "14332": "V97.89",
        "14333": "V98.0X",
        "14334": "V98.1X",
        "14335": "V98.2X",
        "14336": "V98.3X",
        "14337": "W00.0X",
        "14338": "W00.1X",
        "14339": "W00.2X",
        "14340": "W00.9X",
        "14341": "W01.10",
        "14342": "W01.11",
        "14343": "W01.19",
        "14344": "W03.XX",
        "14345": "W04.XX",
        "14346": "W05.0X",
        "14347": "W05.1X",
        "14348": "W05.2X",
        "14349": "W06.XX",
        "14350": "W07.XX",
        "14351": "W08.XX",
        "14352": "W09.0X",
        "14353": "W09.2X",
        "14354": "W09.8X",
        "14355": "W10.0X",
        "14356": "W10.1X",
        "14357": "W10.2X",
        "14358": "W10.8X",
        "14359": "W10.9X",
        "14360": "W11.XX",
        "14361": "W12.XX",
        "14362": "W13.0X",
        "14363": "W13.1X",
        "14364": "W13.2X",
        "14365": "W13.3X",
        "14366": "W13.4X",
        "14367": "W13.8X",
        "14368": "W13.9X",
        "14369": "W14.XX",
        "14370": "W15.XX",
        "14371": "W16.01",
        "14372": "W16.02",
        "14373": "W16.03",
        "14374": "W16.11",
        "14375": "W16.12",
        "14376": "W16.13",
        "14377": "W16.21",
        "14378": "W16.22",
        "14379": "W16.31",
        "14380": "W16.32",
        "14381": "W16.33",
        "14382": "W16.41",
        "14383": "W16.42",
        "14384": "W16.51",
        "14385": "W16.52",
        "14386": "W16.53",
        "14387": "W16.61",
        "14388": "W16.62",
        "14389": "W16.71",
        "14390": "W16.72",
        "14391": "W16.81",
        "14392": "W16.82",
        "14393": "W16.83",
        "14394": "W16.91",
        "14395": "W16.92",
        "14396": "W17.1X",
        "14397": "W17.2X",
        "14398": "W17.3X",
        "14399": "W17.4X",
        "14400": "W17.81",
        "14401": "W17.82",
        "14402": "W17.89",
        "14403": "W18.00",
        "14404": "W18.01",
        "14405": "W18.02",
        "14406": "W18.09",
        "14407": "W18.11",
        "14408": "W18.12",
        "14409": "W18.2X",
        "14410": "W18.30",
        "14411": "W18.31",
        "14412": "W18.39",
        "14413": "W18.40",
        "14414": "W18.41",
        "14415": "W18.42",
        "14416": "W18.43",
        "14417": "W18.49",
        "14418": "W19.XX",
        "14419": "W20.0X",
        "14420": "W20.1X",
        "14421": "W20.8X",
        "14422": "W21.00",
        "14423": "W21.01",
        "14424": "W21.02",
        "14425": "W21.03",
        "14426": "W21.04",
        "14427": "W21.05",
        "14428": "W21.06",
        "14429": "W21.07",
        "14430": "W21.09",
        "14431": "W21.11",
        "14432": "W21.13",
        "14433": "W21.19",
        "14434": "W21.21",
        "14435": "W21.22",
        "14436": "W21.31",
        "14437": "W21.32",
        "14438": "W21.39",
        "14439": "W21.4X",
        "14440": "W21.81",
        "14441": "W21.89",
        "14442": "W21.9X",
        "14443": "W22.01",
        "14444": "W22.02",
        "14445": "W22.04",
        "14446": "W22.09",
        "14447": "W22.10",
        "14448": "W22.11",
        "14449": "W22.12",
        "14450": "W22.8X",
        "14451": "W23.0X",
        "14452": "W23.1X",
        "14453": "W24.0X",
        "14454": "W24.1X",
        "14455": "W25.XX",
        "14456": "W26.0X",
        "14457": "W26.1X",
        "14458": "W27.0X",
        "14459": "W27.1X",
        "14460": "W27.2X",
        "14461": "W27.3X",
        "14462": "W27.4X",
        "14463": "W27.5X",
        "14464": "W27.8X",
        "14465": "W28.XX",
        "14466": "W29.0X",
        "14467": "W29.1X",
        "14468": "W29.2X",
        "14469": "W29.3X",
        "14470": "W29.4X",
        "14471": "W29.8X",
        "14472": "W30.0X",
        "14473": "W30.1X",
        "14474": "W30.2X",
        "14475": "W30.3X",
        "14476": "W30.81",
        "14477": "W30.89",
        "14478": "W30.9X",
        "14479": "W31.0X",
        "14480": "W31.1X",
        "14481": "W31.2X",
        "14482": "W31.3X",
        "14483": "W31.81",
        "14484": "W31.82",
        "14485": "W31.83",
        "14486": "W31.89",
        "14487": "W31.9X",
        "14488": "W32.0X",
        "14489": "W32.1X",
        "14490": "W33.00",
        "14491": "W33.01",
        "14492": "W33.02",
        "14493": "W33.03",
        "14494": "W33.09",
        "14495": "W33.11",
        "14496": "W33.12",
        "14497": "W33.13",
        "14498": "W33.19",
        "14499": "W34.00",
        "14500": "W34.01",
        "14501": "W34.09",
        "14502": "W34.10",
        "14503": "W34.11",
        "14504": "W34.19",
        "14505": "W35.XX",
        "14506": "W36.1X",
        "14507": "W36.3X",
        "14508": "W36.8X",
        "14509": "W36.9X",
        "14510": "W37.0X",
        "14511": "W37.8X",
        "14512": "W38.XX",
        "14513": "W39.XX",
        "14514": "W40.0X",
        "14515": "W40.1X",
        "14516": "W40.8X",
        "14517": "W40.9X",
        "14518": "W42.0X",
        "14519": "W42.9X",
        "14520": "W45.0X",
        "14521": "W45.1X",
        "14522": "W45.2X",
        "14523": "W45.8X",
        "14524": "W46.0X",
        "14525": "W46.1X",
        "14526": "W49.01",
        "14527": "W49.02",
        "14528": "W49.03",
        "14529": "W49.04",
        "14530": "W49.09",
        "14531": "W49.9X",
        "14532": "W50.0X",
        "14533": "W50.1X",
        "14534": "W50.2X",
        "14535": "W50.3X",
        "14536": "W50.4X",
        "14537": "W51.XX",
        "14538": "W52.XX",
        "14539": "W53.01",
        "14540": "W53.09",
        "14541": "W53.11",
        "14542": "W53.19",
        "14543": "W53.21",
        "14544": "W53.29",
        "14545": "W53.81",
        "14546": "W53.89",
        "14547": "W54.0X",
        "14548": "W54.1X",
        "14549": "W54.8X",
        "14550": "W55.01",
        "14551": "W55.03",
        "14552": "W55.09",
        "14553": "W55.11",
        "14554": "W55.12",
        "14555": "W55.19",
        "14556": "W55.21",
        "14557": "W55.22",
        "14558": "W55.29",
        "14559": "W55.31",
        "14560": "W55.32",
        "14561": "W55.39",
        "14562": "W55.41",
        "14563": "W55.42",
        "14564": "W55.49",
        "14565": "W55.51",
        "14566": "W55.52",
        "14567": "W55.59",
        "14568": "W55.81",
        "14569": "W55.82",
        "14570": "W55.89",
        "14571": "W56.01",
        "14572": "W56.02",
        "14573": "W56.09",
        "14574": "W56.11",
        "14575": "W56.12",
        "14576": "W56.19",
        "14577": "W56.21",
        "14578": "W56.22",
        "14579": "W56.29",
        "14580": "W56.31",
        "14581": "W56.32",
        "14582": "W56.39",
        "14583": "W56.41",
        "14584": "W56.42",
        "14585": "W56.49",
        "14586": "W56.51",
        "14587": "W56.52",
        "14588": "W56.81",
        "14589": "W56.82",
        "14590": "W56.89",
        "14591": "W57.XX",
        "14592": "W58.01",
        "14593": "W58.02",
        "14594": "W58.03",
        "14595": "W58.09",
        "14596": "W58.11",
        "14597": "W58.12",
        "14598": "W58.13",
        "14599": "W58.19",
        "14600": "W59.01",
        "14601": "W59.02",
        "14602": "W59.09",
        "14603": "W59.11",
        "14604": "W59.12",
        "14605": "W59.13",
        "14606": "W59.19",
        "14607": "W59.21",
        "14608": "W59.22",
        "14609": "W59.29",
        "14610": "W59.81",
        "14611": "W59.82",
        "14612": "W59.83",
        "14613": "W59.89",
        "14614": "W60.XX",
        "14615": "W61.01",
        "14616": "W61.02",
        "14617": "W61.09",
        "14618": "W61.11",
        "14619": "W61.12",
        "14620": "W61.19",
        "14621": "W61.21",
        "14622": "W61.22",
        "14623": "W61.29",
        "14624": "W61.32",
        "14625": "W61.33",
        "14626": "W61.39",
        "14627": "W61.42",
        "14628": "W61.43",
        "14629": "W61.49",
        "14630": "W61.51",
        "14631": "W61.52",
        "14632": "W61.59",
        "14633": "W61.61",
        "14634": "W61.62",
        "14635": "W61.69",
        "14636": "W61.91",
        "14637": "W61.92",
        "14638": "W61.99",
        "14639": "W62.0X",
        "14640": "W62.1X",
        "14641": "W62.9X",
        "14642": "W64.XX",
        "14643": "W65.XX",
        "14644": "W67.XX",
        "14645": "W69.XX",
        "14646": "W73.XX",
        "14647": "W74.XX",
        "14648": "W85.XX",
        "14649": "W86.0X",
        "14650": "W86.1X",
        "14651": "W86.8X",
        "14652": "W88.0X",
        "14653": "W88.1X",
        "14654": "W88.8X",
        "14655": "W89.0X",
        "14656": "W89.1X",
        "14657": "W89.8X",
        "14658": "W89.9X",
        "14659": "W90.0X",
        "14660": "W90.1X",
        "14661": "W90.2X",
        "14662": "W90.8X",
        "14663": "W92.XX",
        "14664": "W93.01",
        "14665": "W93.02",
        "14666": "W93.11",
        "14667": "W93.12",
        "14668": "W93.2X",
        "14669": "W93.8X",
        "14670": "W94.0X",
        "14671": "W94.11",
        "14672": "W94.12",
        "14673": "W94.21",
        "14674": "W94.22",
        "14675": "W94.23",
        "14676": "W94.29",
        "14677": "W94.31",
        "14678": "W94.32",
        "14679": "W94.39",
        "14680": "W99.XX",
        "14681": "X00.0X",
        "14682": "X00.1X",
        "14683": "X00.2X",
        "14684": "X00.3X",
        "14685": "X00.4X",
        "14686": "X00.5X",
        "14687": "X00.8X",
        "14688": "X01.0X",
        "14689": "X01.1X",
        "14690": "X01.3X",
        "14691": "X01.4X",
        "14692": "X01.8X",
        "14693": "X02.0X",
        "14694": "X02.2X",
        "14695": "X02.4X",
        "14696": "X02.5X",
        "14697": "X02.8X",
        "14698": "X03.0X",
        "14699": "X03.1X",
        "14700": "X03.3X",
        "14701": "X03.4X",
        "14702": "X03.8X",
        "14703": "X04.XX",
        "14704": "X05.XX",
        "14705": "X06.0X",
        "14706": "X06.1X",
        "14707": "X06.2X",
        "14708": "X06.3X",
        "14709": "X08.00",
        "14710": "X08.01",
        "14711": "X08.09",
        "14712": "X08.10",
        "14713": "X08.11",
        "14714": "X08.19",
        "14715": "X08.20",
        "14716": "X08.21",
        "14717": "X08.29",
        "14718": "X08.8X",
        "14719": "X10.0X",
        "14720": "X10.1X",
        "14721": "X10.2X",
        "14722": "X11.0X",
        "14723": "X11.8X",
        "14724": "X12.XX",
        "14725": "X13.0X",
        "14726": "X13.1X",
        "14727": "X14.0X",
        "14728": "X14.1X",
        "14729": "X15.0X",
        "14730": "X15.1X",
        "14731": "X15.2X",
        "14732": "X15.3X",
        "14733": "X15.8X",
        "14734": "X16.XX",
        "14735": "X17.XX",
        "14736": "X18.XX",
        "14737": "X19.XX",
        "14738": "X30.XX",
        "14739": "X31.XX",
        "14740": "X32.XX",
        "14741": "X34.XX",
        "14742": "X35.XX",
        "14743": "X36.0X",
        "14744": "X36.1X",
        "14745": "X37.0X",
        "14746": "X37.1X",
        "14747": "X37.2X",
        "14748": "X37.3X",
        "14749": "X37.41",
        "14750": "X37.42",
        "14751": "X37.43",
        "14752": "X37.8X",
        "14753": "X37.9X",
        "14754": "X38.XX",
        "14755": "X39.01",
        "14756": "X39.08",
        "14757": "X39.8X",
        "14758": "X52.XX",
        "14759": "X58.XX",
        "14760": "X71.0X",
        "14761": "X71.1X",
        "14762": "X71.2X",
        "14763": "X71.3X",
        "14764": "X71.8X",
        "14765": "X72.XX",
        "14766": "X73.0X",
        "14767": "X73.1X",
        "14768": "X73.2X",
        "14769": "X73.8X",
        "14770": "X73.9X",
        "14771": "X74.01",
        "14772": "X74.02",
        "14773": "X74.09",
        "14774": "X74.8X",
        "14775": "X74.9X",
        "14776": "X75.XX",
        "14777": "X76.XX",
        "14778": "X77.0X",
        "14779": "X77.1X",
        "14780": "X77.2X",
        "14781": "X77.3X",
        "14782": "X77.8X",
        "14783": "X77.9X",
        "14784": "X78.0X",
        "14785": "X78.1X",
        "14786": "X78.2X",
        "14787": "X78.8X",
        "14788": "X78.9X",
        "14789": "X80.XX",
        "14790": "X81.0X",
        "14791": "X81.1X",
        "14792": "X81.8X",
        "14793": "X82.0X",
        "14794": "X82.1X",
        "14795": "X82.2X",
        "14796": "X82.8X",
        "14797": "X83.0X",
        "14798": "X83.1X",
        "14799": "X83.2X",
        "14800": "X83.8X",
        "14801": "X92.0X",
        "14802": "X92.1X",
        "14803": "X92.2X",
        "14804": "X92.3X",
        "14805": "X92.8X",
        "14806": "X92.9X",
        "14807": "X93.XX",
        "14808": "X94.0X",
        "14809": "X94.1X",
        "14810": "X94.2X",
        "14811": "X94.8X",
        "14812": "X94.9X",
        "14813": "X95.01",
        "14814": "X95.09",
        "14815": "X95.8X",
        "14816": "X95.9X",
        "14817": "X96.0X",
        "14818": "X96.1X",
        "14819": "X96.3X",
        "14820": "X96.4X",
        "14821": "X96.8X",
        "14822": "X96.9X",
        "14823": "X97.XX",
        "14824": "X98.0X",
        "14825": "X98.1X",
        "14826": "X98.2X",
        "14827": "X98.3X",
        "14828": "X98.8X",
        "14829": "X98.9X",
        "14830": "X99.0X",
        "14831": "X99.1X",
        "14832": "X99.2X",
        "14833": "X99.8X",
        "14834": "X99.9X",
        "14835": "Y00.XX",
        "14836": "Y01.XX",
        "14837": "Y02.0X",
        "14838": "Y02.1X",
        "14839": "Y02.8X",
        "14840": "Y03.0X",
        "14841": "Y03.8X",
        "14842": "Y04.0X",
        "14843": "Y04.1X",
        "14844": "Y04.2X",
        "14845": "Y04.8X",
        "14846": "Y07.03",
        "14847": "Y07.04",
        "14848": "Y07.11",
        "14849": "Y07.13",
        "14850": "Y07.42",
        "14851": "Y07.43",
        "14852": "Y07.49",
        "14853": "Y07.51",
        "14854": "Y07.52",
        "14855": "Y07.9",
        "14856": "Y08.01",
        "14857": "Y08.02",
        "14858": "Y08.09",
        "14859": "Y08.81",
        "14860": "Y08.89",
        "14861": "Y21.0X",
        "14862": "Y21.1X",
        "14863": "Y21.2X",
        "14864": "Y21.3X",
        "14865": "Y21.4X",
        "14866": "Y21.8X",
        "14867": "Y21.9X",
        "14868": "Y22.XX",
        "14869": "Y23.0X",
        "14870": "Y23.2X",
        "14871": "Y23.3X",
        "14872": "Y23.8X",
        "14873": "Y23.9X",
        "14874": "Y24.0X",
        "14875": "Y24.8X",
        "14876": "Y24.9X",
        "14877": "Y26.XX",
        "14878": "Y27.0X",
        "14879": "Y27.1X",
        "14880": "Y27.2X",
        "14881": "Y27.3X",
        "14882": "Y27.8X",
        "14883": "Y27.9X",
        "14884": "Y28.0X",
        "14885": "Y28.1X",
        "14886": "Y28.2X",
        "14887": "Y28.8X",
        "14888": "Y28.9X",
        "14889": "Y29.XX",
        "14890": "Y30.XX",
        "14891": "Y31.XX",
        "14892": "Y32.XX",
        "14893": "Y33.XX",
        "14894": "Y35.00",
        "14895": "Y35.01",
        "14896": "Y35.02",
        "14897": "Y35.03",
        "14898": "Y35.04",
        "14899": "Y35.09",
        "14900": "Y35.10",
        "14901": "Y35.11",
        "14902": "Y35.12",
        "14903": "Y35.19",
        "14904": "Y35.20",
        "14905": "Y35.21",
        "14906": "Y35.29",
        "14907": "Y35.30",
        "14908": "Y35.31",
        "14909": "Y35.39",
        "14910": "Y35.40",
        "14911": "Y35.41",
        "14912": "Y35.49",
        "14913": "Y35.81",
        "14914": "Y35.89",
        "14915": "Y35.91",
        "14916": "Y35.92",
        "14917": "Y35.93",
        "14918": "Y36.00",
        "14919": "Y36.01",
        "14920": "Y36.02",
        "14921": "Y36.03",
        "14922": "Y36.04",
        "14923": "Y36.05",
        "14924": "Y36.09",
        "14925": "Y36.10",
        "14926": "Y36.11",
        "14927": "Y36.12",
        "14928": "Y36.13",
        "14929": "Y36.14",
        "14930": "Y36.19",
        "14931": "Y36.20",
        "14932": "Y36.21",
        "14933": "Y36.22",
        "14934": "Y36.23",
        "14935": "Y36.24",
        "14936": "Y36.25",
        "14937": "Y36.26",
        "14938": "Y36.27",
        "14939": "Y36.29",
        "14940": "Y36.30",
        "14941": "Y36.31",
        "14942": "Y36.32",
        "14943": "Y36.33",
        "14944": "Y36.39",
        "14945": "Y36.41",
        "14946": "Y36.42",
        "14947": "Y36.43",
        "14948": "Y36.44",
        "14949": "Y36.45",
        "14950": "Y36.46",
        "14951": "Y36.47",
        "14952": "Y36.49",
        "14953": "Y36.50",
        "14954": "Y36.51",
        "14955": "Y36.52",
        "14956": "Y36.53",
        "14957": "Y36.54",
        "14958": "Y36.59",
        "14959": "Y36.6X",
        "14960": "Y36.7X",
        "14961": "Y36.81",
        "14962": "Y36.82",
        "14963": "Y36.88",
        "14964": "Y36.89",
        "14965": "Y36.90",
        "14966": "Y36.91",
        "14967": "Y36.92",
        "14968": "Y37.00",
        "14969": "Y37.01",
        "14970": "Y37.02",
        "14971": "Y37.03",
        "14972": "Y37.04",
        "14973": "Y37.05",
        "14974": "Y37.09",
        "14975": "Y37.10",
        "14976": "Y37.11",
        "14977": "Y37.12",
        "14978": "Y37.13",
        "14979": "Y37.14",
        "14980": "Y37.19",
        "14981": "Y37.20",
        "14982": "Y37.21",
        "14983": "Y37.22",
        "14984": "Y37.23",
        "14985": "Y37.24",
        "14986": "Y37.25",
        "14987": "Y37.26",
        "14988": "Y37.27",
        "14989": "Y37.29",
        "14990": "Y37.30",
        "14991": "Y37.31",
        "14992": "Y37.32",
        "14993": "Y37.33",
        "14994": "Y37.39",
        "14995": "Y37.41",
        "14996": "Y37.42",
        "14997": "Y37.43",
        "14998": "Y37.44",
        "14999": "Y37.45",
        "15000": "Y37.46",
        "15001": "Y37.47",
        "15002": "Y37.49",
        "15003": "Y37.50",
        "15004": "Y37.51",
        "15005": "Y37.52",
        "15006": "Y37.53",
        "15007": "Y37.54",
        "15008": "Y37.59",
        "15009": "Y37.6X",
        "15010": "Y37.7X",
        "15011": "Y37.90",
        "15012": "Y37.91",
        "15013": "Y37.92",
        "15014": "Y38.0X",
        "15015": "Y38.1X",
        "15016": "Y38.2X",
        "15017": "Y38.3X",
        "15018": "Y38.4X",
        "15019": "Y38.5X",
        "15020": "Y38.6X",
        "15021": "Y38.7X",
        "15022": "Y38.80",
        "15023": "Y38.81",
        "15024": "Y38.89",
        "15025": "Y38.9X",
        "15026": "Y42.3",
        "15027": "Y44.1",
        "15028": "Y49.9",
        "15029": "Y56.0",
        "15030": "Y57.7",
        "15031": "Y58.4",
        "15032": "Y58.9",
        "15033": "Y59.0",
        "15034": "Y62.2",
        "15035": "Y62.5",
        "15036": "Y62.9",
        "15037": "Y63.0",
        "15038": "Y63.1",
        "15039": "Y63.2",
        "15040": "Y63.3",
        "15041": "Y63.5",
        "15042": "Y63.6",
        "15043": "Y63.8",
        "15044": "Y63.9",
        "15045": "Y64.1",
        "15046": "Y64.9",
        "15047": "Y65.2",
        "15048": "Y65.3",
        "15049": "Y65.4",
        "15050": "Y65.51",
        "15051": "Y65.52",
        "15052": "Y65.53",
        "15053": "Y70.0",
        "15054": "Y70.1",
        "15055": "Y70.2",
        "15056": "Y70.8",
        "15057": "Y71.1",
        "15058": "Y71.2",
        "15059": "Y71.3",
        "15060": "Y71.8",
        "15061": "Y72.0",
        "15062": "Y72.3",
        "15063": "Y73.0",
        "15064": "Y73.1",
        "15065": "Y73.2",
        "15066": "Y73.8",
        "15067": "Y74.0",
        "15068": "Y74.2",
        "15069": "Y74.3",
        "15070": "Y75.0",
        "15071": "Y76.0",
        "15072": "Y76.1",
        "15073": "Y76.3",
        "15074": "Y76.8",
        "15075": "Y77.3",
        "15076": "Y78.0",
        "15077": "Y78.1",
        "15078": "Y78.2",
        "15079": "Y78.3",
        "15080": "Y78.8",
        "15081": "Y79.0",
        "15082": "Y79.1",
        "15083": "Y79.2",
        "15084": "Y79.3",
        "15085": "Y80.0",
        "15086": "Y80.3",
        "15087": "Y80.8",
        "15088": "Y81.0",
        "15089": "Y81.1",
        "15090": "Y81.3",
        "15091": "Y81.8",
        "15092": "Y82.8",
        "15093": "Y82.9",
        "15094": "Y83.0",
        "15095": "Y83.1",
        "15096": "Y83.2",
        "15097": "Y83.4",
        "15098": "Y83.5",
        "15099": "Y83.8",
        "15100": "Y83.9",
        "15101": "Y84.1",
        "15102": "Y84.2",
        "15103": "Y84.3",
        "15104": "Y84.5",
        "15105": "Y84.6",
        "15106": "Y84.7",
        "15107": "Y84.8",
        "15108": "Y84.9",
        "15109": "Y90.0",
        "15110": "Y90.2",
        "15111": "Y90.3",
        "15112": "Y90.5",
        "15113": "Y90.6",
        "15114": "Y90.9",
        "15115": "Y92.00",
        "15116": "Y92.01",
        "15117": "Y92.02",
        "15118": "Y92.03",
        "15119": "Y92.04",
        "15120": "Y92.09",
        "15121": "Y92.10",
        "15122": "Y92.11",
        "15123": "Y92.12",
        "15124": "Y92.13",
        "15125": "Y92.14",
        "15126": "Y92.15",
        "15127": "Y92.16",
        "15128": "Y92.19",
        "15129": "Y92.21",
        "15130": "Y92.22",
        "15131": "Y92.23",
        "15132": "Y92.24",
        "15133": "Y92.25",
        "15134": "Y92.26",
        "15135": "Y92.29",
        "15136": "Y92.31",
        "15137": "Y92.32",
        "15138": "Y92.33",
        "15139": "Y92.41",
        "15140": "Y92.48",
        "15141": "Y92.51",
        "15142": "Y92.52",
        "15143": "Y92.53",
        "15144": "Y92.59",
        "15145": "Y92.61",
        "15146": "Y92.62",
        "15147": "Y92.63",
        "15148": "Y92.65",
        "15149": "Y92.69",
        "15150": "Y92.72",
        "15151": "Y92.74",
        "15152": "Y92.81",
        "15153": "Y92.82",
        "15154": "Y92.83",
        "15155": "Y92.85",
        "15156": "Y92.86",
        "15157": "Y93.01",
        "15158": "Y93.02",
        "15159": "Y93.11",
        "15160": "Y93.12",
        "15161": "Y93.15",
        "15162": "Y93.17",
        "15163": "Y93.18",
        "15164": "Y93.19",
        "15165": "Y93.21",
        "15166": "Y93.22",
        "15167": "Y93.23",
        "15168": "Y93.29",
        "15169": "Y93.31",
        "15170": "Y93.33",
        "15171": "Y93.34",
        "15172": "Y93.35",
        "15173": "Y93.39",
        "15174": "Y93.42",
        "15175": "Y93.44",
        "15176": "Y93.45",
        "15177": "Y93.49",
        "15178": "Y93.51",
        "15179": "Y93.52",
        "15180": "Y93.54",
        "15181": "Y93.55",
        "15182": "Y93.56",
        "15183": "Y93.57",
        "15184": "Y93.59",
        "15185": "Y93.62",
        "15186": "Y93.65",
        "15187": "Y93.67",
        "15188": "Y93.68",
        "15189": "Y93.69",
        "15190": "Y93.73",
        "15191": "Y93.74",
        "15192": "Y93.75",
        "15193": "Y93.79",
        "15194": "Y93.82",
        "15195": "Y93.89",
        "15196": "Y93.9",
        "15197": "Y93.A1",
        "15198": "Y93.A3",
        "15199": "Y93.A4",
        "15200": "Y93.A6",
        "15201": "Y93.B4",
        "15202": "Y93.B9",
        "15203": "Y93.D1",
        "15204": "Y93.D2",
        "15205": "Y93.D3",
        "15206": "Y93.D9",
        "15207": "Y93.E3",
        "15208": "Y93.E5",
        "15209": "Y93.E6",
        "15210": "Y93.E9",
        "15211": "Y93.F2",
        "15212": "Y93.G1",
        "15213": "Y93.H1",
        "15214": "Y93.H2",
        "15215": "Y93.H3",
        "15216": "Y93.I1",
        "15217": "Y93.I9",
        "15218": "Y93.J1",
        "15219": "Y93.J4",
        "15220": "Y93.K1",
        "15221": "Y93.K2",
        "15222": "Y93.K3",
        "15223": "Y93.K9",
        "15224": "Y99.0",
        "15225": "Y99.1",
        "15226": "Y99.8",
        "15227": "Y99.9",
        "15228": "Z00.01",
        "15229": "Z00.1",
        "15230": "Z00.11",
        "15231": "Z00.12",
        "15232": "Z00.2",
        "15233": "Z00.3",
        "15234": "Z00.5",
        "15235": "Z00.6",
        "15236": "Z00.70",
        "15237": "Z01.0",
        "15238": "Z01.00",
        "15239": "Z01.01",
        "15240": "Z01.10",
        "15241": "Z01.11",
        "15242": "Z01.2",
        "15243": "Z01.21",
        "15244": "Z01.3",
        "15245": "Z01.30",
        "15246": "Z01.31",
        "15247": "Z01.4",
        "15248": "Z01.41",
        "15249": "Z01.42",
        "15250": "Z01.6",
        "15251": "Z01.7",
        "15252": "Z01.81",
        "15253": "Z01.82",
        "15254": "Z01.83",
        "15255": "Z01.89",
        "15256": "Z01.9",
        "15257": "Z02.1",
        "15258": "Z02.2",
        "15259": "Z02.3",
        "15260": "Z02.6",
        "15261": "Z02.71",
        "15262": "Z02.79",
        "15263": "Z02.81",
        "15264": "Z02.82",
        "15265": "Z02.83",
        "15266": "Z02.9",
        "15267": "Z03.6",
        "15268": "Z03.72",
        "15269": "Z03.73",
        "15270": "Z03.79",
        "15271": "Z03.89",
        "15272": "Z04.1",
        "15273": "Z04.2",
        "15274": "Z04.41",
        "15275": "Z04.42",
        "15276": "Z04.6",
        "15277": "Z04.71",
        "15278": "Z04.72",
        "15279": "Z04.8",
        "15280": "Z04.9",
        "15281": "Z08.2",
        "15282": "Z08.8",
        "15283": "Z09.0",
        "15284": "Z09.8",
        "15285": "Z09.9",
        "15286": "Z10.1",
        "15287": "Z10.8",
        "15288": "Z11.1",
        "15289": "Z11.3",
        "15290": "Z11.4",
        "15291": "Z11.5",
        "15292": "Z11.51",
        "15293": "Z11.59",
        "15294": "Z11.6",
        "15295": "Z11.8",
        "15296": "Z11.9",
        "15297": "Z12.0",
        "15298": "Z12.1",
        "15299": "Z12.10",
        "15300": "Z12.12",
        "15301": "Z12.13",
        "15302": "Z12.31",
        "15303": "Z12.39",
        "15304": "Z12.4",
        "15305": "Z12.5",
        "15306": "Z12.72",
        "15307": "Z12.81",
        "15308": "Z12.82",
        "15309": "Z12.89",
        "15310": "Z12.9",
        "15311": "Z13.0",
        "15312": "Z13.1",
        "15313": "Z13.5",
        "15314": "Z13.79",
        "15315": "Z13.81",
        "15316": "Z13.82",
        "15317": "Z13.83",
        "15318": "Z13.84",
        "15319": "Z13.85",
        "15320": "Z13.88",
        "15321": "Z13.89",
        "15322": "Z13.9",
        "15323": "Z14.1",
        "15324": "Z14.8",
        "15325": "Z15.02",
        "15326": "Z15.03",
        "15327": "Z15.04",
        "15328": "Z15.09",
        "15329": "Z15.81",
        "15330": "Z15.89",
        "15331": "Z16.11",
        "15332": "Z16.19",
        "15333": "Z16.20",
        "15334": "Z16.23",
        "15335": "Z16.24",
        "15336": "Z16.29",
        "15337": "Z16.31",
        "15338": "Z16.32",
        "15339": "Z16.34",
        "15340": "Z17.0",
        "15341": "Z17.1",
        "15342": "Z18.09",
        "15343": "Z18.12",
        "15344": "Z18.31",
        "15345": "Z18.32",
        "15346": "Z18.39",
        "15347": "Z18.83",
        "15348": "Z18.89",
        "15349": "Z18.9",
        "15350": "Z20.01",
        "15351": "Z20.1",
        "15352": "Z20.2",
        "15353": "Z20.3",
        "15354": "Z20.5",
        "15355": "Z20.6",
        "15356": "Z20.81",
        "15357": "Z20.82",
        "15358": "Z20.9",
        "15359": "Z22.0",
        "15360": "Z22.1",
        "15361": "Z22.2",
        "15362": "Z22.32",
        "15363": "Z22.33",
        "15364": "Z22.39",
        "15365": "Z22.4",
        "15366": "Z22.51",
        "15367": "Z22.52",
        "15368": "Z22.59",
        "15369": "Z22.6",
        "15370": "Z22.9",
        "15371": "Z23.1",
        "15372": "Z23.2",
        "15373": "Z23.8",
        "15374": "Z24.1",
        "15375": "Z24.4",
        "15376": "Z25.1",
        "15377": "Z27.3",
        "15378": "Z27.4",
        "15379": "Z28.04",
        "15380": "Z28.09",
        "15381": "Z28.1",
        "15382": "Z28.82",
        "15383": "Z29.2",
        "15384": "Z29.9",
        "15385": "Z30.01",
        "15386": "Z30.02",
        "15387": "Z30.09",
        "15388": "Z30.1",
        "15389": "Z30.2",
        "15390": "Z30.3",
        "15391": "Z30.4",
        "15392": "Z30.41",
        "15393": "Z30.42",
        "15394": "Z30.43",
        "15395": "Z30.49",
        "15396": "Z30.5",
        "15397": "Z30.9",
        "15398": "Z31.42",
        "15399": "Z31.43",
        "15400": "Z31.44",
        "15401": "Z31.49",
        "15402": "Z31.5",
        "15403": "Z31.62",
        "15404": "Z31.69",
        "15405": "Z31.83",
        "15406": "Z31.9",
        "15407": "Z32.01",
        "15408": "Z32.02",
        "15409": "Z32.2",
        "15410": "Z32.3",
        "15411": "Z33.1",
        "15412": "Z33.2",
        "15413": "Z34.0",
        "15414": "Z34.02",
        "15415": "Z34.03",
        "15416": "Z34.80",
        "15417": "Z34.82",
        "15418": "Z34.83",
        "15419": "Z34.9",
        "15420": "Z34.91",
        "15421": "Z34.92",
        "15422": "Z34.93",
        "15423": "Z35.0",
        "15424": "Z35.8",
        "15425": "Z36.9",
        "15426": "Z37.2",
        "15427": "Z37.3",
        "15428": "Z37.51",
        "15429": "Z37.52",
        "15430": "Z37.54",
        "15431": "Z37.59",
        "15432": "Z37.60",
        "15433": "Z37.61",
        "15434": "Z37.62",
        "15435": "Z37.63",
        "15436": "Z37.64",
        "15437": "Z37.69",
        "15438": "Z37.9",
        "15439": "Z38.00",
        "15440": "Z38.1",
        "15441": "Z38.2",
        "15442": "Z38.31",
        "15443": "Z38.4",
        "15444": "Z38.62",
        "15445": "Z38.63",
        "15446": "Z38.64",
        "15447": "Z38.65",
        "15448": "Z38.66",
        "15449": "Z38.68",
        "15450": "Z38.69",
        "15451": "Z38.7",
        "15452": "Z39.2",
        "15453": "Z3A.00",
        "15454": "Z3A.01",
        "15455": "Z3A.12",
        "15456": "Z3A.13",
        "15457": "Z3A.14",
        "15458": "Z3A.16",
        "15459": "Z3A.17",
        "15460": "Z3A.20",
        "15461": "Z3A.21",
        "15462": "Z3A.22",
        "15463": "Z3A.23",
        "15464": "Z3A.24",
        "15465": "Z3A.25",
        "15466": "Z3A.26",
        "15467": "Z3A.27",
        "15468": "Z3A.28",
        "15469": "Z3A.29",
        "15470": "Z3A.31",
        "15471": "Z3A.32",
        "15472": "Z3A.33",
        "15473": "Z3A.36",
        "15474": "Z3A.38",
        "15475": "Z3A.40",
        "15476": "Z3A.41",
        "15477": "Z3A.42",
        "15478": "Z40.02",
        "15479": "Z40.09",
        "15480": "Z40.8",
        "15481": "Z40.9",
        "15482": "Z41.1",
        "15483": "Z41.3",
        "15484": "Z41.8",
        "15485": "Z41.9",
        "15486": "Z42.1",
        "15487": "Z42.8",
        "15488": "Z43.0",
        "15489": "Z43.1",
        "15490": "Z43.3",
        "15491": "Z43.4",
        "15492": "Z43.5",
        "15493": "Z43.6",
        "15494": "Z43.7",
        "15495": "Z43.8",
        "15496": "Z43.9",
        "15497": "Z44.00",
        "15498": "Z44.02",
        "15499": "Z44.10",
        "15500": "Z44.11",
        "15501": "Z44.12",
        "15502": "Z44.21",
        "15503": "Z44.30",
        "15504": "Z44.31",
        "15505": "Z44.8",
        "15506": "Z44.9",
        "15507": "Z45.01",
        "15508": "Z45.09",
        "15509": "Z45.1",
        "15510": "Z45.31",
        "15511": "Z45.41",
        "15512": "Z45.42",
        "15513": "Z45.49",
        "15514": "Z45.81",
        "15515": "Z45.89",
        "15516": "Z45.9",
        "15517": "Z46.2",
        "15518": "Z46.3",
        "15519": "Z46.4",
        "15520": "Z46.51",
        "15521": "Z46.59",
        "15522": "Z46.81",
        "15523": "Z46.82",
        "15524": "Z46.89",
        "15525": "Z47.31",
        "15526": "Z47.33",
        "15527": "Z47.89",
        "15528": "Z47.9",
        "15529": "Z48.0",
        "15530": "Z48.00",
        "15531": "Z48.02",
        "15532": "Z48.1",
        "15533": "Z48.23",
        "15534": "Z48.24",
        "15535": "Z48.28",
        "15536": "Z48.81",
        "15537": "Z49.02",
        "15538": "Z50.4",
        "15539": "Z51.0",
        "15540": "Z51.1",
        "15541": "Z51.11",
        "15542": "Z51.12",
        "15543": "Z51.5",
        "15544": "Z51.81",
        "15545": "Z51.89",
        "15546": "Z51.9",
        "15547": "Z52.00",
        "15548": "Z52.01",
        "15549": "Z52.09",
        "15550": "Z52.10",
        "15551": "Z52.11",
        "15552": "Z52.19",
        "15553": "Z52.21",
        "15554": "Z52.29",
        "15555": "Z52.3",
        "15556": "Z52.4",
        "15557": "Z52.5",
        "15558": "Z52.6",
        "15559": "Z52.81",
        "15560": "Z52.9",
        "15561": "Z53.01",
        "15562": "Z53.09",
        "15563": "Z53.1",
        "15564": "Z53.20",
        "15565": "Z53.21",
        "15566": "Z53.29",
        "15567": "Z53.9",
        "15568": "Z55.0",
        "15569": "Z55.2",
        "15570": "Z55.3",
        "15571": "Z55.4",
        "15572": "Z55.9",
        "15573": "Z56.0",
        "15574": "Z56.2",
        "15575": "Z56.3",
        "15576": "Z56.5",
        "15577": "Z56.89",
        "15578": "Z56.9",
        "15579": "Z57.0",
        "15580": "Z57.1",
        "15581": "Z57.31",
        "15582": "Z57.5",
        "15583": "Z57.8",
        "15584": "Z59.1",
        "15585": "Z59.2",
        "15586": "Z59.7",
        "15587": "Z59.9",
        "15588": "Z60.0",
        "15589": "Z60.2",
        "15590": "Z60.3",
        "15591": "Z60.5",
        "15592": "Z60.8",
        "15593": "Z62.21",
        "15594": "Z62.22",
        "15595": "Z62.29",
        "15596": "Z62.3",
        "15597": "Z62.6",
        "15598": "Z62.81",
        "15599": "Z62.82",
        "15600": "Z62.89",
        "15601": "Z62.9",
        "15602": "Z63.32",
        "15603": "Z63.4",
        "15604": "Z63.5",
        "15605": "Z63.72",
        "15606": "Z63.8",
        "15607": "Z63.9",
        "15608": "Z64.1",
        "15609": "Z64.4",
        "15610": "Z65.2",
        "15611": "Z65.3",
        "15612": "Z65.4",
        "15613": "Z65.5",
        "15614": "Z67.10",
        "15615": "Z67.11",
        "15616": "Z67.30",
        "15617": "Z67.31",
        "15618": "Z67.40",
        "15619": "Z67.41",
        "15620": "Z67.90",
        "15621": "Z68.20",
        "15622": "Z68.24",
        "15623": "Z68.26",
        "15624": "Z68.27",
        "15625": "Z68.29",
        "15626": "Z68.30",
        "15627": "Z68.31",
        "15628": "Z68.32",
        "15629": "Z68.33",
        "15630": "Z68.35",
        "15631": "Z68.37",
        "15632": "Z68.39",
        "15633": "Z68.41",
        "15634": "Z68.43",
        "15635": "Z68.44",
        "15636": "Z68.45",
        "15637": "Z68.51",
        "15638": "Z68.52",
        "15639": "Z69.01",
        "15640": "Z69.02",
        "15641": "Z69.11",
        "15642": "Z69.12",
        "15643": "Z69.81",
        "15644": "Z69.82",
        "15645": "Z70.0",
        "15646": "Z70.2",
        "15647": "Z70.3",
        "15648": "Z70.8",
        "15649": "Z70.9",
        "15650": "Z71.0",
        "15651": "Z71.1",
        "15652": "Z71.2",
        "15653": "Z71.3",
        "15654": "Z71.42",
        "15655": "Z71.51",
        "15656": "Z71.52",
        "15657": "Z71.6",
        "15658": "Z71.7",
        "15659": "Z71.89",
        "15660": "Z71.9",
        "15661": "Z72.2",
        "15662": "Z72.4",
        "15663": "Z72.52",
        "15664": "Z72.6",
        "15665": "Z72.81",
        "15666": "Z72.82",
        "15667": "Z72.89",
        "15668": "Z73.1",
        "15669": "Z73.3",
        "15670": "Z73.4",
        "15671": "Z73.5",
        "15672": "Z73.6",
        "15673": "Z73.81",
        "15674": "Z73.82",
        "15675": "Z73.89",
        "15676": "Z73.9",
        "15677": "Z74.01",
        "15678": "Z74.09",
        "15679": "Z74.2",
        "15680": "Z74.8",
        "15681": "Z74.9",
        "15682": "Z75.2",
        "15683": "Z75.4",
        "15684": "Z75.9",
        "15685": "Z76.0",
        "15686": "Z76.1",
        "15687": "Z76.2",
        "15688": "Z76.3",
        "15689": "Z76.4",
        "15690": "Z76.5",
        "15691": "Z76.81",
        "15692": "Z76.89",
        "15693": "Z77.01",
        "15694": "Z77.02",
        "15695": "Z77.09",
        "15696": "Z77.11",
        "15697": "Z77.12",
        "15698": "Z77.29",
        "15699": "Z77.9",
        "15700": "Z78.0",
        "15701": "Z78.1",
        "15702": "Z78.9",
        "15703": "Z79.02",
        "15704": "Z79.1",
        "15705": "Z79.2",
        "15706": "Z79.3",
        "15707": "Z79.4",
        "15708": "Z79.51",
        "15709": "Z79.52",
        "15710": "Z79.81",
        "15711": "Z79.82",
        "15712": "Z79.83",
        "15713": "Z79.89",
        "15714": "Z80.0",
        "15715": "Z80.1",
        "15716": "Z80.49",
        "15717": "Z80.52",
        "15718": "Z80.59",
        "15719": "Z80.9",
        "15720": "Z81.1",
        "15721": "Z81.2",
        "15722": "Z81.4",
        "15723": "Z82.0",
        "15724": "Z82.41",
        "15725": "Z82.5",
        "15726": "Z82.69",
        "15727": "Z83.1",
        "15728": "Z83.49",
        "15729": "Z83.51",
        "15730": "Z83.52",
        "15731": "Z83.6",
        "15732": "Z83.79",
        "15733": "Z84.0",
        "15734": "Z84.1",
        "15735": "Z84.2",
        "15736": "Z84.3",
        "15737": "Z84.81",
        "15738": "Z85.00",
        "15739": "Z85.01",
        "15740": "Z85.03",
        "15741": "Z85.05",
        "15742": "Z85.06",
        "15743": "Z85.07",
        "15744": "Z85.11",
        "15745": "Z85.12",
        "15746": "Z85.20",
        "15747": "Z85.22",
        "15748": "Z85.23",
        "15749": "Z85.29",
        "15750": "Z85.3",
        "15751": "Z85.40",
        "15752": "Z85.41",
        "15753": "Z85.43",
        "15754": "Z85.44",
        "15755": "Z85.45",
        "15756": "Z85.46",
        "15757": "Z85.49",
        "15758": "Z85.50",
        "15759": "Z85.51",
        "15760": "Z85.52",
        "15761": "Z85.54",
        "15762": "Z85.6",
        "15763": "Z85.71",
        "15764": "Z85.72",
        "15765": "Z85.79",
        "15766": "Z85.81",
        "15767": "Z85.82",
        "15768": "Z85.84",
        "15769": "Z85.89",
        "15770": "Z85.9",
        "15771": "Z86.00",
        "15772": "Z86.01",
        "15773": "Z86.11",
        "15774": "Z86.13",
        "15775": "Z86.2",
        "15776": "Z86.32",
        "15777": "Z86.39",
        "15778": "Z86.51",
        "15779": "Z86.61",
        "15780": "Z86.71",
        "15781": "Z86.72",
        "15782": "Z86.74",
        "15783": "Z86.79",
        "15784": "Z87.09",
        "15785": "Z87.11",
        "15786": "Z87.19",
        "15787": "Z87.2",
        "15788": "Z87.31",
        "15789": "Z87.39",
        "15790": "Z87.41",
        "15791": "Z87.42",
        "15792": "Z87.43",
        "15793": "Z87.44",
        "15794": "Z87.51",
        "15795": "Z87.59",
        "15796": "Z87.71",
        "15797": "Z87.72",
        "15798": "Z87.73",
        "15799": "Z87.74",
        "15800": "Z87.75",
        "15801": "Z87.76",
        "15802": "Z87.79",
        "15803": "Z87.81",
        "15804": "Z87.89",
        "15805": "Z88.0",
        "15806": "Z88.1",
        "15807": "Z88.2",
        "15808": "Z88.3",
        "15809": "Z88.4",
        "15810": "Z88.7",
        "15811": "Z89.01",
        "15812": "Z89.02",
        "15813": "Z89.11",
        "15814": "Z89.12",
        "15815": "Z89.20",
        "15816": "Z89.21",
        "15817": "Z89.22",
        "15818": "Z89.23",
        "15819": "Z89.41",
        "15820": "Z89.42",
        "15821": "Z89.43",
        "15822": "Z89.44",
        "15823": "Z89.51",
        "15824": "Z89.52",
        "15825": "Z89.61",
        "15826": "Z89.62",
        "15827": "Z89.9",
        "15828": "Z90.01",
        "15829": "Z90.02",
        "15830": "Z90.09",
        "15831": "Z90.10",
        "15832": "Z90.12",
        "15833": "Z90.3",
        "15834": "Z90.41",
        "15835": "Z90.49",
        "15836": "Z90.5",
        "15837": "Z90.6",
        "15838": "Z90.71",
        "15839": "Z90.72",
        "15840": "Z90.89",
        "15841": "Z91.01",
        "15842": "Z91.03",
        "15843": "Z91.04",
        "15844": "Z91.09",
        "15845": "Z91.12",
        "15846": "Z91.13",
        "15847": "Z91.15",
        "15848": "Z91.19",
        "15849": "Z91.49",
        "15850": "Z91.81",
        "15851": "Z91.83",
        "15852": "Z91.89",
        "15853": "Z92.1",
        "15854": "Z92.21",
        "15855": "Z92.22",
        "15856": "Z92.23",
        "15857": "Z92.24",
        "15858": "Z92.25",
        "15859": "Z92.29",
        "15860": "Z92.3",
        "15861": "Z92.82",
        "15862": "Z92.83",
        "15863": "Z92.9",
        "15864": "Z93.0",
        "15865": "Z93.1",
        "15866": "Z93.2",
        "15867": "Z93.3",
        "15868": "Z93.50",
        "15869": "Z93.51",
        "15870": "Z93.52",
        "15871": "Z93.59",
        "15872": "Z93.8",
        "15873": "Z93.9",
        "15874": "Z94.0",
        "15875": "Z94.1",
        "15876": "Z94.2",
        "15877": "Z94.3",
        "15878": "Z94.5",
        "15879": "Z94.6",
        "15880": "Z94.7",
        "15881": "Z94.81",
        "15882": "Z94.84",
        "15883": "Z94.89",
        "15884": "Z95.0",
        "15885": "Z95.2",
        "15886": "Z95.3",
        "15887": "Z95.4",
        "15888": "Z95.5",
        "15889": "Z95.81",
        "15890": "Z95.82",
        "15891": "Z95.9",
        "15892": "Z96.0",
        "15893": "Z96.1",
        "15894": "Z96.20",
        "15895": "Z96.22",
        "15896": "Z96.3",
        "15897": "Z96.41",
        "15898": "Z96.49",
        "15899": "Z96.5",
        "15900": "Z96.61",
        "15901": "Z96.62",
        "15902": "Z96.63",
        "15903": "Z96.64",
        "15904": "Z96.65",
        "15905": "Z96.66",
        "15906": "Z96.69",
        "15907": "Z96.81",
        "15908": "Z97.0",
        "15909": "Z97.11",
        "15910": "Z97.16",
        "15911": "Z97.2",
        "15912": "Z97.3",
        "15913": "Z97.4",
        "15914": "Z97.5",
        "15915": "Z98.1",
        "15916": "Z98.2",
        "15917": "Z98.49",
        "15918": "Z98.52",
        "15919": "Z98.61",
        "15920": "Z98.62",
        "15921": "Z98.81",
        "15922": "Z98.82",
        "15923": "Z98.83",
        "15924": "Z98.84",
        "15925": "Z98.85",
        "15926": "Z98.87",
        "15927": "Z99.0",
        "15928": "Z99.11",
        "15929": "Z99.3",
        "15930": "Z99.81",
    }
    num_classes = 15931

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Adorkin_XlmRobertaEnRuEmoji(PetrainedTextClassifier):
    name = "adorkin/xlm-roberta-en-ru-emoji"
    id2label = {
        "0": "❤",
        "1": "😍",
        "10": "📷",
        "11": "🇺🇸",
        "12": "☀",
        "13": "💜",
        "14": "😉",
        "15": "💯",
        "16": "😁",
        "17": "🎄",
        "18": "📸",
        "19": "😜",
        "2": "😂",
        "3": "💕",
        "4": "🔥",
        "5": "😊",
        "6": "😎",
        "7": "✨",
        "8": "💙",
        "9": "😘",
    }
    num_classes = 20

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alekseykorshuk_Bert(PetrainedTextClassifier):
    name = "AlekseyKorshuk/bert"
    id2label = {"0": "0", "1": "1", "2": "2", "3": "3", "4": "4"}
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alireza1044_AlbertBaseV2Cola(PetrainedTextClassifier):
    name = "Alireza1044/albert-base-v2-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alireza1044_AlbertBaseV2Mnli(PetrainedTextClassifier):
    name = "Alireza1044/albert-base-v2-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alireza1044_AlbertBaseV2Mrpc(PetrainedTextClassifier):
    name = "Alireza1044/albert-base-v2-mrpc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alireza1044_AlbertBaseV2Qnli(PetrainedTextClassifier):
    name = "Alireza1044/albert-base-v2-qnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alireza1044_AlbertBaseV2Qqp(PetrainedTextClassifier):
    name = "Alireza1044/albert-base-v2-qqp"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alireza1044_AlbertBaseV2Rte(PetrainedTextClassifier):
    name = "Alireza1044/albert-base-v2-rte"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alireza1044_AlbertBaseV2Sst2(PetrainedTextClassifier):
    name = "Alireza1044/albert-base-v2-sst2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alireza1044_AlbertBaseV2Stsb(PetrainedTextClassifier):
    name = "Alireza1044/albert-base-v2-stsb"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alireza1044_AlbertBaseV2Wnli(PetrainedTextClassifier):
    name = "Alireza1044/albert-base-v2-wnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alireza1044_Bert_Classification_Lm(PetrainedTextClassifier):
    name = "Alireza1044/bert_classification_lm"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alstractor_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "Alstractor/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anamika_AutonlpFeedback1(PetrainedTextClassifier):
    name = "Anamika/autonlp-Feedback1-479512837"
    id2label = {
        "0": "Claim",
        "1": "Concluding Statement",
        "2": "Counterclaim",
        "3": "Evidence",
        "4": "Lead",
        "5": "Position",
        "6": "Rebuttal",
    }
    num_classes = 7

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anamika_AutonlpFa(PetrainedTextClassifier):
    name = "Anamika/autonlp-fa-473312409"
    id2label = {
        "0": "Claim",
        "1": "Concluding Statement",
        "2": "Counterclaim",
        "3": "Evidence",
        "4": "Lead",
        "5": "Position",
        "6": "Rebuttal",
    }
    num_classes = 7

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Andranik_Testpytorchclassification(PetrainedTextClassifier):
    name = "Andranik/TestPytorchClassification"
    id2label = {"0": "about", "1": "iot", "2": "ml", "3": "mobile", "4": "qa"}
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anirbanbhk_HateSpeechPretrainedMovies(PetrainedTextClassifier):
    name = "Anirbanbhk/Hate-speech-Pretrained-movies"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TensorTrek_DistilbertBaseUncasedFinetunedEmotion(PetrainedTextClassifier):
    name = "tensor-trek/distilbert-base-uncased-finetuned-emotion"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonarr_QqpBert(PetrainedTextClassifier):
    name = "AnonARR/qqp-bert"
    id2label = {"0": "not_duplicate", "1": "duplicate"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Emanuals_Bert_Copy_Wikiqa(PetrainedTextClassifier):
    name = "AnonymousSub/EManuals_BERT_copy_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Emanuals_Roberta_Wikiqa(PetrainedTextClassifier):
    name = "AnonymousSub/EManuals_RoBERTa_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_BertBaseUncased_Wikiqa(PetrainedTextClassifier):
    name = "AnonymousSub/bert-base-uncased_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_ClineEmanualsS10Ar(PetrainedTextClassifier):
    name = "AnonymousSub/cline-emanuals-s10-AR"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_ClineS10Ar(PetrainedTextClassifier):
    name = "AnonymousSub/cline-s10-AR"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Cline_Wikiqa(PetrainedTextClassifier):
    name = "AnonymousSub/cline_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_ConsertEmanualsS10Sr(PetrainedTextClassifier):
    name = "AnonymousSub/consert-emanuals-s10-SR"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_ConsertS10Ar(PetrainedTextClassifier):
    name = "AnonymousSub/consert-s10-AR"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_ConsertS10Sr(PetrainedTextClassifier):
    name = "AnonymousSub/consert-s10-SR"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_DeclutrEmanualsS10Ar(PetrainedTextClassifier):
    name = "AnonymousSub/declutr-emanuals-s10-AR"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_DeclutrEmanualsS10Sr(PetrainedTextClassifier):
    name = "AnonymousSub/declutr-emanuals-s10-SR"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_DeclutrModel_Wikiqa(PetrainedTextClassifier):
    name = "AnonymousSub/declutr-model_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_DeclutrS10Ar(PetrainedTextClassifier):
    name = "AnonymousSub/declutr-s10-AR"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_DeclutrS10Sr(PetrainedTextClassifier):
    name = "AnonymousSub/declutr-s10-SR"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Dummy_1(PetrainedTextClassifier):
    name = "AnonymousSub/dummy_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Dummy_2(PetrainedTextClassifier):
    name = "AnonymousSub/dummy_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_RobertaBase_Wikiqa(PetrainedTextClassifier):
    name = "AnonymousSub/roberta-base_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Bert_Quadruplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_bert_quadruplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Bert_Triplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_bert_triplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Hier_Quadruplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_hier_quadruplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Hier_Triplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_hier_triplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Only_Classfn_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_only_classfn_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Only_Classfn_Twostage_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_only_classfn_twostage_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Roberta_Bert_Quadruplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_roberta_bert_quadruplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Roberta_Bert_Triplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_roberta_bert_triplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Roberta_Hier_Quadruplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_roberta_hier_quadruplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Roberta_Hier_Triplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_roberta_hier_triplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Roberta_Only_Classfn_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_roberta_only_classfn_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Roberta_Only_Classfn_Twostage_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = (
        "AnonymousSub/rule_based_roberta_only_classfn_twostage_epochs_1_shard_1_wikiqa"
    )
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Roberta_Twostage_Quadruplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_roberta_twostage_quadruplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Roberta_Twostagequadruplet_Hier_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_roberta_twostagequadruplet_hier_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Roberta_Twostagetriplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_roberta_twostagetriplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Roberta_Twostagetriplet_Hier_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = (
        "AnonymousSub/rule_based_roberta_twostagetriplet_hier_epochs_1_shard_1_wikiqa"
    )
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Twostage_Quadruplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_twostage_quadruplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Twostagequadruplet_Hier_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_twostagequadruplet_hier_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Twostagetriplet_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_twostagetriplet_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_Rule_Based_Twostagetriplet_Hier_Epochs_1_Shard_1_Wikiqa(
    PetrainedTextClassifier
):
    name = "AnonymousSub/rule_based_twostagetriplet_hier_epochs_1_shard_1_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_SpecterBertModel_Copy_Wikiqa(PetrainedTextClassifier):
    name = "AnonymousSub/specter-bert-model_copy_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anonymoussub_UnsupConsertBase_Copy_Wikiqa(PetrainedTextClassifier):
    name = "AnonymousSub/unsup-consert-base_copy_wikiqa"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anthos23_FsDistilrobertaFineTuned(PetrainedTextClassifier):
    name = "Anthos23/FS-distilroberta-fine-tuned"
    id2label = {"0": "negative", "1": "neutral", "2": "positive"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anthos23_DistilbertBaseUncasedFinetunedSst2(PetrainedTextClassifier):
    name = "Anthos23/distilbert-base-uncased-finetuned-sst2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Anthos23_MyAwesomeModel(PetrainedTextClassifier):
    name = "Anthos23/my-awesome-model"
    id2label = {"0": "negative", "1": "neutral", "2": "positive"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Aron_DistilbertBaseUncasedFinetunedEmotion(PetrainedTextClassifier):
    name = "Aron/distilbert-base-uncased-finetuned-emotion"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ateeb_Emotiondetector(PetrainedTextClassifier):
    name = "Ateeb/EmotionDetector"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
        "23": "LABEL_23",
        "24": "LABEL_24",
        "25": "LABEL_25",
        "26": "LABEL_26",
    }
    num_classes = 27

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ateeb_Fullemotiondetector(PetrainedTextClassifier):
    name = "Ateeb/FullEmotionDetector"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
        "23": "LABEL_23",
        "24": "LABEL_24",
        "25": "LABEL_25",
        "26": "LABEL_26",
    }
    num_classes = 27

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Azaghast_DistilbertScpClassClassification(PetrainedTextClassifier):
    name = "Azaghast/DistilBERT-SCP-Class-Classification"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Bahija_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "BAHIJA/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Bearthreat_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "BearThreat/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Bhumika_RobertaBaseFinetunedSst2(PetrainedTextClassifier):
    name = "Bhumika/roberta-base-finetuned-sst2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class BlaineMason_HackmitFinetunedSst2(PetrainedTextClassifier):
    name = "Blaine-Mason/hackMIT-finetuned-sst2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Blindman820_SarcasticNewsHeadlines(PetrainedTextClassifier):
    name = "BlindMan820/Sarcastic-News-Headlines"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Brendan_Cse244BHw2Roberta(PetrainedTextClassifier):
    name = "Brendan/cse244b-hw2-roberta"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Thebritishlibrary_BlBooksGenre(PetrainedTextClassifier):
    name = "TheBritishLibrary/bl-books-genre"
    id2label = {"0": "Fiction", "1": "Non-fiction"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertCaPoetry(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-ca-poetry"
    id2label = {
        "0": "شعر حر",
        "1": "شعر التفعيلة",
        "2": "عامي",
        "3": "موشح",
        "4": "الرجز",
        "5": "الرمل",
        "6": "الهزج",
        "7": "البسيط",
        "8": "الخفيف",
        "9": "السريع",
        "10": "الطويل",
        "11": "الكامل",
        "12": "المجتث",
        "13": "المديد",
        "14": "الوافر",
        "15": "الدوبيت",
        "16": "السلسلة",
        "17": "المضارع",
        "18": "المقتضب",
        "19": "المنسرح",
        "20": "المتدارك",
        "21": "المتقارب",
        "22": "المواليا",
    }
    num_classes = 23

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertCaSentiment(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-ca-sentiment"
    id2label = {"0": "positive", "1": "negative", "2": "neutral"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertDaPoetry(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-da-poetry"
    id2label = {
        "0": "شعر حر",
        "1": "شعر التفعيلة",
        "2": "عامي",
        "3": "موشح",
        "4": "الرجز",
        "5": "الرمل",
        "6": "الهزج",
        "7": "البسيط",
        "8": "الخفيف",
        "9": "السريع",
        "10": "الطويل",
        "11": "الكامل",
        "12": "المجتث",
        "13": "المديد",
        "14": "الوافر",
        "15": "الدوبيت",
        "16": "السلسلة",
        "17": "المضارع",
        "18": "المقتضب",
        "19": "المنسرح",
        "20": "المتدارك",
        "21": "المتقارب",
        "22": "المواليا",
    }
    num_classes = 23

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertDaSentiment(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-da-sentiment"
    id2label = {"0": "positive", "1": "negative", "2": "neutral"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertMixDidMadarCorpus26(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-mix-did-madar-corpus26"
    id2label = {
        "0": "KHA",
        "1": "TUN",
        "10": "TRI",
        "11": "ALG",
        "12": "MSA",
        "13": "FES",
        "14": "BEN",
        "15": "SAL",
        "16": "JER",
        "17": "BEI",
        "18": "SFX",
        "19": "MUS",
        "2": "MOS",
        "20": "JED",
        "21": "RIY",
        "22": "RAB",
        "23": "DAM",
        "24": "ASW",
        "25": "AMM",
        "3": "CAI",
        "4": "BAG",
        "5": "ALE",
        "6": "DOH",
        "7": "ALX",
        "8": "SAN",
        "9": "BAS",
    }
    num_classes = 26

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertMixDidMadarCorpus6(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-mix-did-madar-corpus6"
    id2label = {"0": "TUN", "1": "CAI", "2": "DOH", "3": "MSA", "4": "BEI", "5": "RAB"}
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertMixDidNadi(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-mix-did-nadi"
    id2label = {
        "0": "Algeria",
        "1": "Bahrain",
        "10": "Morocco",
        "11": "Oman",
        "12": "Palestine",
        "13": "Qatar",
        "14": "Saudi_Arabia",
        "15": "Somalia",
        "16": "Sudan",
        "17": "Syria",
        "18": "Tunisia",
        "19": "United_Arab_Emirates",
        "2": "Djibouti",
        "20": "Yemen",
        "3": "Egypt",
        "4": "Iraq",
        "5": "Jordan",
        "6": "Kuwait",
        "7": "Lebanon",
        "8": "Libya",
        "9": "Mauritania",
    }
    num_classes = 21

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertMixPoetry(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-mix-poetry"
    id2label = {
        "0": "شعر حر",
        "1": "شعر التفعيلة",
        "2": "عامي",
        "3": "موشح",
        "4": "الرجز",
        "5": "الرمل",
        "6": "الهزج",
        "7": "البسيط",
        "8": "الخفيف",
        "9": "السريع",
        "10": "الطويل",
        "11": "الكامل",
        "12": "المجتث",
        "13": "المديد",
        "14": "الوافر",
        "15": "الدوبيت",
        "16": "السلسلة",
        "17": "المضارع",
        "18": "المقتضب",
        "19": "المنسرح",
        "20": "المتدارك",
        "21": "المتقارب",
        "22": "المواليا",
    }
    num_classes = 23

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertMixSentiment(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-mix-sentiment"
    id2label = {"0": "positive", "1": "negative", "2": "neutral"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertMsaDidMadarTwitter5(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-msa-did-madar-twitter5"
    id2label = {
        "0": "Algeria",
        "1": "Bahrain",
        "10": "Morocco",
        "11": "Oman",
        "12": "Palestine",
        "13": "Qatar",
        "14": "Saudi_Arabia",
        "15": "Somalia",
        "16": "Sudan",
        "17": "Syria",
        "18": "Tunisia",
        "19": "United_Arab_Emirates",
        "2": "Djibouti",
        "20": "Yemen",
        "3": "Egypt",
        "4": "Iraq",
        "5": "Jordan",
        "6": "Kuwait",
        "7": "Lebanon",
        "8": "Libya",
        "9": "Mauritania",
    }
    num_classes = 21

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertMsaDidNadi(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-msa-did-nadi"
    id2label = {
        "0": "Algeria",
        "1": "Bahrain",
        "10": "Morocco",
        "11": "Oman",
        "12": "Palestine",
        "13": "Qatar",
        "14": "Saudi_Arabia",
        "15": "Somalia",
        "16": "Sudan",
        "17": "Syria",
        "18": "Tunisia",
        "19": "United_Arab_Emirates",
        "2": "Djibouti",
        "20": "Yemen",
        "3": "Egypt",
        "4": "Iraq",
        "5": "Jordan",
        "6": "Kuwait",
        "7": "Lebanon",
        "8": "Libya",
        "9": "Mauritania",
    }
    num_classes = 21

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertMsaPoetry(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-msa-poetry"
    id2label = {
        "0": "شعر حر",
        "1": "شعر التفعيلة",
        "2": "عامي",
        "3": "موشح",
        "4": "الرجز",
        "5": "الرمل",
        "6": "الهزج",
        "7": "البسيط",
        "8": "الخفيف",
        "9": "السريع",
        "10": "الطويل",
        "11": "الكامل",
        "12": "المجتث",
        "13": "المديد",
        "14": "الوافر",
        "15": "الدوبيت",
        "16": "السلسلة",
        "17": "المضارع",
        "18": "المقتضب",
        "19": "المنسرح",
        "20": "المتدارك",
        "21": "المتقارب",
        "22": "المواليا",
    }
    num_classes = 23

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CamelLab_BertBaseArabicCamelbertMsaSentiment(PetrainedTextClassifier):
    name = "CAMeL-Lab/bert-base-arabic-camelbert-msa-sentiment"
    id2label = {"0": "positive", "1": "negative", "2": "neutral"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cltl_IcfDomains(PetrainedTextClassifier):
    name = "CLTL/icf-domains"
    id2label = {
        "0": "ADM",
        "1": "ATT",
        "2": "BER",
        "3": "ENR",
        "4": "ETN",
        "5": "FAC",
        "6": "INS",
        "7": "MBW",
        "8": "STM",
    }
    num_classes = 9

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cltl_IcfLevelsAdm(PetrainedTextClassifier):
    name = "CLTL/icf-levels-adm"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cltl_IcfLevelsAtt(PetrainedTextClassifier):
    name = "CLTL/icf-levels-att"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cltl_IcfLevelsBer(PetrainedTextClassifier):
    name = "CLTL/icf-levels-ber"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cltl_IcfLevelsEnr(PetrainedTextClassifier):
    name = "CLTL/icf-levels-enr"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cltl_IcfLevelsEtn(PetrainedTextClassifier):
    name = "CLTL/icf-levels-etn"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cltl_IcfLevelsFac(PetrainedTextClassifier):
    name = "CLTL/icf-levels-fac"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cltl_IcfLevelsIns(PetrainedTextClassifier):
    name = "CLTL/icf-levels-ins"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cltl_IcfLevelsMbw(PetrainedTextClassifier):
    name = "CLTL/icf-levels-mbw"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cltl_IcfLevelsStm(PetrainedTextClassifier):
    name = "CLTL/icf-levels-stm"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class CntUpenn_Bio_Clinicalbert_For_Seizurefreedom_Classification(
    PetrainedTextClassifier
):
    name = "CNT-UPenn/Bio_ClinicalBERT_for_seizureFreedom_classification"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cameron_BertJigsaw(PetrainedTextClassifier):
    name = "Cameron/BERT-Jigsaw"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cameron_BertSbicOffensive(PetrainedTextClassifier):
    name = "Cameron/BERT-SBIC-offensive"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cameron_BertSbicTargetcategory(PetrainedTextClassifier):
    name = "Cameron/BERT-SBIC-targetcategory"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
    }
    num_classes = 8

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cameron_BertEecEmotion(PetrainedTextClassifier):
    name = "Cameron/BERT-eec-emotion"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cameron_BertJigsawIdentityhate(PetrainedTextClassifier):
    name = "Cameron/BERT-jigsaw-identityhate"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cameron_BertJigsawSeveretoxic(PetrainedTextClassifier):
    name = "Cameron/BERT-jigsaw-severetoxic"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cameron_BertMdgenderConvaiBinary(PetrainedTextClassifier):
    name = "Cameron/BERT-mdgender-convai-binary"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cameron_BertMdgenderConvaiTernary(PetrainedTextClassifier):
    name = "Cameron/BERT-mdgender-convai-ternary"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cameron_BertMdgenderWizard(PetrainedTextClassifier):
    name = "Cameron/BERT-mdgender-wizard"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cameron_BertRtgenderOpgenderAnnotations(PetrainedTextClassifier):
    name = "Cameron/BERT-rtgender-opgender-annotations"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Capreolus_BertBaseMsmarco(PetrainedTextClassifier):
    name = "Capreolus/bert-base-msmarco"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Capreolus_ElectraBaseMsmarco(PetrainedTextClassifier):
    name = "Capreolus/electra-base-msmarco"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Captain_Crudebert(PetrainedTextClassifier):
    name = "Captain-1337/CrudeBERT"
    id2label = {"-1": "negative", "0": "neutral", "1": "positive"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cathy_Reranking_Model(PetrainedTextClassifier):
    name = "Cathy/reranking_model"
    id2label = {"0": "contradiction", "1": "neutral", "2": "entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertBaseSpanishFinetunedMldoc(PetrainedTextClassifier):
    name = "dccuchile/albert-base-spanish-finetuned-mldoc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertBaseSpanishFinetunedPawsx(PetrainedTextClassifier):
    name = "dccuchile/albert-base-spanish-finetuned-pawsx"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertBaseSpanishFinetunedXnli(PetrainedTextClassifier):
    name = "dccuchile/albert-base-spanish-finetuned-xnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertLargeSpanishFinetunedMldoc(PetrainedTextClassifier):
    name = "dccuchile/albert-large-spanish-finetuned-mldoc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertLargeSpanishFinetunedPawsx(PetrainedTextClassifier):
    name = "dccuchile/albert-large-spanish-finetuned-pawsx"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertLargeSpanishFinetunedXnli(PetrainedTextClassifier):
    name = "dccuchile/albert-large-spanish-finetuned-xnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertTinySpanishFinetunedMldoc(PetrainedTextClassifier):
    name = "dccuchile/albert-tiny-spanish-finetuned-mldoc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertTinySpanishFinetunedPawsx(PetrainedTextClassifier):
    name = "dccuchile/albert-tiny-spanish-finetuned-pawsx"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertTinySpanishFinetunedXnli(PetrainedTextClassifier):
    name = "dccuchile/albert-tiny-spanish-finetuned-xnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertXlargeSpanishFinetunedMldoc(PetrainedTextClassifier):
    name = "dccuchile/albert-xlarge-spanish-finetuned-mldoc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertXlargeSpanishFinetunedPawsx(PetrainedTextClassifier):
    name = "dccuchile/albert-xlarge-spanish-finetuned-pawsx"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertXlargeSpanishFinetunedXnli(PetrainedTextClassifier):
    name = "dccuchile/albert-xlarge-spanish-finetuned-xnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertXxlargeSpanishFinetunedMldoc(PetrainedTextClassifier):
    name = "dccuchile/albert-xxlarge-spanish-finetuned-mldoc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertXxlargeSpanishFinetunedPawsx(PetrainedTextClassifier):
    name = "dccuchile/albert-xxlarge-spanish-finetuned-pawsx"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_AlbertXxlargeSpanishFinetunedXnli(PetrainedTextClassifier):
    name = "dccuchile/albert-xxlarge-spanish-finetuned-xnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_BertBaseSpanishWwmCasedFinetunedMldoc(PetrainedTextClassifier):
    name = "dccuchile/bert-base-spanish-wwm-cased-finetuned-mldoc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_BertBaseSpanishWwmCasedFinetunedPawsx(PetrainedTextClassifier):
    name = "dccuchile/bert-base-spanish-wwm-cased-finetuned-pawsx"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_BertBaseSpanishWwmCasedFinetunedXnli(PetrainedTextClassifier):
    name = "dccuchile/bert-base-spanish-wwm-cased-finetuned-xnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_BertBaseSpanishWwmUncasedFinetunedMldoc(PetrainedTextClassifier):
    name = "dccuchile/bert-base-spanish-wwm-uncased-finetuned-mldoc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_BertBaseSpanishWwmUncasedFinetunedPawsx(PetrainedTextClassifier):
    name = "dccuchile/bert-base-spanish-wwm-uncased-finetuned-pawsx"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_BertBaseSpanishWwmUncasedFinetunedXnli(PetrainedTextClassifier):
    name = "dccuchile/bert-base-spanish-wwm-uncased-finetuned-xnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_DistilbertBaseSpanishUncasedFinetunedMldoc(PetrainedTextClassifier):
    name = "dccuchile/distilbert-base-spanish-uncased-finetuned-mldoc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_DistilbertBaseSpanishUncasedFinetunedPawsx(PetrainedTextClassifier):
    name = "dccuchile/distilbert-base-spanish-uncased-finetuned-pawsx"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dccuchile_DistilbertBaseSpanishUncasedFinetunedXnli(PetrainedTextClassifier):
    name = "dccuchile/distilbert-base-spanish-uncased-finetuned-xnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cheatham_XlmRobertaBaseFinetuned(PetrainedTextClassifier):
    name = "Cheatham/xlm-roberta-base-finetuned"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cheatham_XlmRobertaLargeFinetunedD1(PetrainedTextClassifier):
    name = "Cheatham/xlm-roberta-large-finetuned-d1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cheatham_XlmRobertaLargeFinetunedD12(PetrainedTextClassifier):
    name = "Cheatham/xlm-roberta-large-finetuned-d12"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cheatham_XlmRobertaLargeFinetunedD1R01(PetrainedTextClassifier):
    name = "Cheatham/xlm-roberta-large-finetuned-d1r01"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cheatham_XlmRobertaLargeFinetunedR01(PetrainedTextClassifier):
    name = "Cheatham/xlm-roberta-large-finetuned-r01"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cheatham_XlmRobertaLargeFinetuned(PetrainedTextClassifier):
    name = "Cheatham/xlm-roberta-large-finetuned"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cheatham_XlmRobertaLargeFinetuned3(PetrainedTextClassifier):
    name = "Cheatham/xlm-roberta-large-finetuned3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cheatham_XlmRobertaLargeFinetuned4(PetrainedTextClassifier):
    name = "Cheatham/xlm-roberta-large-finetuned4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Claudeyang_Awesome_Fb_Model(PetrainedTextClassifier):
    name = "ClaudeYang/awesome_fb_model"
    id2label = {"0": "contradiction", "1": "neutral", "2": "entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Clevegreen_Fieldclassifier(PetrainedTextClassifier):
    name = "CleveGreen/FieldClassifier"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
        "23": "LABEL_23",
        "24": "LABEL_24",
        "25": "LABEL_25",
    }
    num_classes = 26

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Clevegreen_Fieldclassifier_V2(PetrainedTextClassifier):
    name = "CleveGreen/FieldClassifier_v2"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
        "23": "LABEL_23",
        "24": "LABEL_24",
        "25": "LABEL_25",
    }
    num_classes = 26

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Clevegreen_Fieldclassifier_V2_Gpt(PetrainedTextClassifier):
    name = "CleveGreen/FieldClassifier_v2_gpt"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
        "23": "LABEL_23",
        "24": "LABEL_24",
        "25": "LABEL_25",
    }
    num_classes = 26

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Clevegreen_Jobclassifier(PetrainedTextClassifier):
    name = "CleveGreen/JobClassifier"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
        "23": "LABEL_23",
        "24": "LABEL_24",
        "25": "LABEL_25",
        "26": "LABEL_26",
        "27": "LABEL_27",
        "28": "LABEL_28",
        "29": "LABEL_29",
        "30": "LABEL_30",
        "31": "LABEL_31",
        "32": "LABEL_32",
        "33": "LABEL_33",
        "34": "LABEL_34",
        "35": "LABEL_35",
        "36": "LABEL_36",
        "37": "LABEL_37",
        "38": "LABEL_38",
        "39": "LABEL_39",
        "40": "LABEL_40",
        "41": "LABEL_41",
        "42": "LABEL_42",
        "43": "LABEL_43",
        "44": "LABEL_44",
        "45": "LABEL_45",
        "46": "LABEL_46",
        "47": "LABEL_47",
        "48": "LABEL_48",
        "49": "LABEL_49",
        "50": "LABEL_50",
        "51": "LABEL_51",
        "52": "LABEL_52",
        "53": "LABEL_53",
        "54": "LABEL_54",
        "55": "LABEL_55",
        "56": "LABEL_56",
        "57": "LABEL_57",
        "58": "LABEL_58",
        "59": "LABEL_59",
        "60": "LABEL_60",
        "61": "LABEL_61",
        "62": "LABEL_62",
        "63": "LABEL_63",
        "64": "LABEL_64",
        "65": "LABEL_65",
        "66": "LABEL_66",
        "67": "LABEL_67",
        "68": "LABEL_68",
        "69": "LABEL_69",
        "70": "LABEL_70",
        "71": "LABEL_71",
        "72": "LABEL_72",
        "73": "LABEL_73",
        "74": "LABEL_74",
        "75": "LABEL_75",
        "76": "LABEL_76",
        "77": "LABEL_77",
        "78": "LABEL_78",
        "79": "LABEL_79",
        "80": "LABEL_80",
        "81": "LABEL_81",
        "82": "LABEL_82",
        "83": "LABEL_83",
        "84": "LABEL_84",
        "85": "LABEL_85",
        "86": "LABEL_86",
        "87": "LABEL_87",
        "88": "LABEL_88",
        "89": "LABEL_89",
        "90": "LABEL_90",
        "91": "LABEL_91",
        "92": "LABEL_92",
        "93": "LABEL_93",
        "94": "LABEL_94",
        "95": "LABEL_95",
        "96": "LABEL_96",
        "97": "LABEL_97",
        "98": "LABEL_98",
        "99": "LABEL_99",
        "100": "LABEL_100",
        "101": "LABEL_101",
        "102": "LABEL_102",
        "103": "LABEL_103",
        "104": "LABEL_104",
        "105": "LABEL_105",
        "106": "LABEL_106",
        "107": "LABEL_107",
        "108": "LABEL_108",
        "109": "LABEL_109",
        "110": "LABEL_110",
        "111": "LABEL_111",
        "112": "LABEL_112",
        "113": "LABEL_113",
        "114": "LABEL_114",
        "115": "LABEL_115",
        "116": "LABEL_116",
        "117": "LABEL_117",
        "118": "LABEL_118",
        "119": "LABEL_119",
        "120": "LABEL_120",
        "121": "LABEL_121",
        "122": "LABEL_122",
        "123": "LABEL_123",
        "124": "LABEL_124",
        "125": "LABEL_125",
        "126": "LABEL_126",
        "127": "LABEL_127",
        "128": "LABEL_128",
        "129": "LABEL_129",
        "130": "LABEL_130",
        "131": "LABEL_131",
        "132": "LABEL_132",
        "133": "LABEL_133",
        "134": "LABEL_134",
        "135": "LABEL_135",
        "136": "LABEL_136",
        "137": "LABEL_137",
        "138": "LABEL_138",
        "139": "LABEL_139",
        "140": "LABEL_140",
        "141": "LABEL_141",
        "142": "LABEL_142",
        "143": "LABEL_143",
        "144": "LABEL_144",
        "145": "LABEL_145",
        "146": "LABEL_146",
        "147": "LABEL_147",
    }
    num_classes = 148

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Clevegreen_Jobclassifier_V2(PetrainedTextClassifier):
    name = "CleveGreen/JobClassifier_v2"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
        "23": "LABEL_23",
        "24": "LABEL_24",
        "25": "LABEL_25",
        "26": "LABEL_26",
        "27": "LABEL_27",
        "28": "LABEL_28",
        "29": "LABEL_29",
        "30": "LABEL_30",
        "31": "LABEL_31",
        "32": "LABEL_32",
        "33": "LABEL_33",
        "34": "LABEL_34",
        "35": "LABEL_35",
        "36": "LABEL_36",
        "37": "LABEL_37",
        "38": "LABEL_38",
        "39": "LABEL_39",
        "40": "LABEL_40",
        "41": "LABEL_41",
        "42": "LABEL_42",
        "43": "LABEL_43",
        "44": "LABEL_44",
        "45": "LABEL_45",
        "46": "LABEL_46",
        "47": "LABEL_47",
        "48": "LABEL_48",
        "49": "LABEL_49",
        "50": "LABEL_50",
        "51": "LABEL_51",
        "52": "LABEL_52",
        "53": "LABEL_53",
        "54": "LABEL_54",
        "55": "LABEL_55",
        "56": "LABEL_56",
        "57": "LABEL_57",
        "58": "LABEL_58",
        "59": "LABEL_59",
        "60": "LABEL_60",
        "61": "LABEL_61",
        "62": "LABEL_62",
        "63": "LABEL_63",
        "64": "LABEL_64",
        "65": "LABEL_65",
        "66": "LABEL_66",
        "67": "LABEL_67",
        "68": "LABEL_68",
        "69": "LABEL_69",
        "70": "LABEL_70",
        "71": "LABEL_71",
        "72": "LABEL_72",
        "73": "LABEL_73",
        "74": "LABEL_74",
        "75": "LABEL_75",
        "76": "LABEL_76",
        "77": "LABEL_77",
        "78": "LABEL_78",
        "79": "LABEL_79",
        "80": "LABEL_80",
        "81": "LABEL_81",
        "82": "LABEL_82",
        "83": "LABEL_83",
        "84": "LABEL_84",
        "85": "LABEL_85",
        "86": "LABEL_86",
        "87": "LABEL_87",
        "88": "LABEL_88",
        "89": "LABEL_89",
        "90": "LABEL_90",
        "91": "LABEL_91",
        "92": "LABEL_92",
        "93": "LABEL_93",
        "94": "LABEL_94",
        "95": "LABEL_95",
        "96": "LABEL_96",
        "97": "LABEL_97",
        "98": "LABEL_98",
        "99": "LABEL_99",
        "100": "LABEL_100",
        "101": "LABEL_101",
        "102": "LABEL_102",
        "103": "LABEL_103",
        "104": "LABEL_104",
        "105": "LABEL_105",
        "106": "LABEL_106",
        "107": "LABEL_107",
        "108": "LABEL_108",
        "109": "LABEL_109",
        "110": "LABEL_110",
        "111": "LABEL_111",
        "112": "LABEL_112",
        "113": "LABEL_113",
        "114": "LABEL_114",
        "115": "LABEL_115",
        "116": "LABEL_116",
        "117": "LABEL_117",
        "118": "LABEL_118",
        "119": "LABEL_119",
        "120": "LABEL_120",
        "121": "LABEL_121",
        "122": "LABEL_122",
        "123": "LABEL_123",
        "124": "LABEL_124",
        "125": "LABEL_125",
        "126": "LABEL_126",
        "127": "LABEL_127",
        "128": "LABEL_128",
        "129": "LABEL_129",
        "130": "LABEL_130",
        "131": "LABEL_131",
        "132": "LABEL_132",
        "133": "LABEL_133",
        "134": "LABEL_134",
        "135": "LABEL_135",
        "136": "LABEL_136",
        "137": "LABEL_137",
        "138": "LABEL_138",
        "139": "LABEL_139",
        "140": "LABEL_140",
        "141": "LABEL_141",
        "142": "LABEL_142",
        "143": "LABEL_143",
        "144": "LABEL_144",
        "145": "LABEL_145",
        "146": "LABEL_146",
        "147": "LABEL_147",
    }
    num_classes = 148

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Clevegreen_Jobclassifier_V2_Gpt(PetrainedTextClassifier):
    name = "CleveGreen/JobClassifier_v2_gpt"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
        "23": "LABEL_23",
        "24": "LABEL_24",
        "25": "LABEL_25",
        "26": "LABEL_26",
        "27": "LABEL_27",
        "28": "LABEL_28",
        "29": "LABEL_29",
        "30": "LABEL_30",
        "31": "LABEL_31",
        "32": "LABEL_32",
        "33": "LABEL_33",
        "34": "LABEL_34",
        "35": "LABEL_35",
        "36": "LABEL_36",
        "37": "LABEL_37",
        "38": "LABEL_38",
        "39": "LABEL_39",
        "40": "LABEL_40",
        "41": "LABEL_41",
        "42": "LABEL_42",
        "43": "LABEL_43",
        "44": "LABEL_44",
        "45": "LABEL_45",
        "46": "LABEL_46",
        "47": "LABEL_47",
        "48": "LABEL_48",
        "49": "LABEL_49",
        "50": "LABEL_50",
        "51": "LABEL_51",
        "52": "LABEL_52",
        "53": "LABEL_53",
        "54": "LABEL_54",
        "55": "LABEL_55",
        "56": "LABEL_56",
        "57": "LABEL_57",
        "58": "LABEL_58",
        "59": "LABEL_59",
        "60": "LABEL_60",
        "61": "LABEL_61",
        "62": "LABEL_62",
        "63": "LABEL_63",
        "64": "LABEL_64",
        "65": "LABEL_65",
        "66": "LABEL_66",
        "67": "LABEL_67",
        "68": "LABEL_68",
        "69": "LABEL_69",
        "70": "LABEL_70",
        "71": "LABEL_71",
        "72": "LABEL_72",
        "73": "LABEL_73",
        "74": "LABEL_74",
        "75": "LABEL_75",
        "76": "LABEL_76",
        "77": "LABEL_77",
        "78": "LABEL_78",
        "79": "LABEL_79",
        "80": "LABEL_80",
        "81": "LABEL_81",
        "82": "LABEL_82",
        "83": "LABEL_83",
        "84": "LABEL_84",
        "85": "LABEL_85",
        "86": "LABEL_86",
        "87": "LABEL_87",
        "88": "LABEL_88",
        "89": "LABEL_89",
        "90": "LABEL_90",
        "91": "LABEL_91",
        "92": "LABEL_92",
        "93": "LABEL_93",
        "94": "LABEL_94",
        "95": "LABEL_95",
        "96": "LABEL_96",
        "97": "LABEL_97",
        "98": "LABEL_98",
        "99": "LABEL_99",
        "100": "LABEL_100",
        "101": "LABEL_101",
        "102": "LABEL_102",
        "103": "LABEL_103",
        "104": "LABEL_104",
        "105": "LABEL_105",
        "106": "LABEL_106",
        "107": "LABEL_107",
        "108": "LABEL_108",
        "109": "LABEL_109",
        "110": "LABEL_110",
        "111": "LABEL_111",
        "112": "LABEL_112",
        "113": "LABEL_113",
        "114": "LABEL_114",
        "115": "LABEL_115",
        "116": "LABEL_116",
        "117": "LABEL_117",
        "118": "LABEL_118",
        "119": "LABEL_119",
        "120": "LABEL_120",
        "121": "LABEL_121",
        "122": "LABEL_122",
        "123": "LABEL_123",
        "124": "LABEL_124",
        "125": "LABEL_125",
        "126": "LABEL_126",
        "127": "LABEL_127",
        "128": "LABEL_128",
        "129": "LABEL_129",
        "130": "LABEL_130",
        "131": "LABEL_131",
        "132": "LABEL_132",
        "133": "LABEL_133",
        "134": "LABEL_134",
        "135": "LABEL_135",
        "136": "LABEL_136",
        "137": "LABEL_137",
        "138": "LABEL_138",
        "139": "LABEL_139",
        "140": "LABEL_140",
        "141": "LABEL_141",
        "142": "LABEL_142",
        "143": "LABEL_143",
        "144": "LABEL_144",
        "145": "LABEL_145",
        "146": "LABEL_146",
        "147": "LABEL_147",
    }
    num_classes = 148

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Codeninja1126_TestModel(PetrainedTextClassifier):
    name = "CodeNinja1126/test-model"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
        "23": "LABEL_23",
        "24": "LABEL_24",
        "25": "LABEL_25",
        "26": "LABEL_26",
        "27": "LABEL_27",
        "28": "LABEL_28",
        "29": "LABEL_29",
        "30": "LABEL_30",
        "31": "LABEL_31",
        "32": "LABEL_32",
        "33": "LABEL_33",
        "34": "LABEL_34",
        "35": "LABEL_35",
        "36": "LABEL_36",
        "37": "LABEL_37",
        "38": "LABEL_38",
        "39": "LABEL_39",
        "40": "LABEL_40",
        "41": "LABEL_41",
    }
    num_classes = 42

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Cogcomp_BartFaithfulSummaryDetector(PetrainedTextClassifier):
    name = "CogComp/bart-faithful-summary-detector"
    id2label = {"0": "HALLUCINATED", "1": "FAITHFUL"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class ConnorTech_Bert_Cn_Finetuning(PetrainedTextClassifier):
    name = "Connor-tech/bert_cn_finetuning"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Couchcat_Ma_Mlc_V7_Distil(PetrainedTextClassifier):
    name = "CouchCat/ma_mlc_v7_distil"
    id2label = {"0": "delivery", "1": "return", "2": "product", "3": "monetary"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Couchcat_Ma_Sa_V7_Distil(PetrainedTextClassifier):
    name = "CouchCat/ma_sa_v7_distil"
    id2label = {"0": "negative", "1": "neutral", "2": "positive"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Crasher222_KaggleCompTest(PetrainedTextClassifier):
    name = "Crasher222/kaggle-comp-test"
    id2label = {"0": "0", "1": "1", "2": "2", "3": "3", "4": "4"}
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Crives_DistilbertBaseUncasedFinetunedEmotion(PetrainedTextClassifier):
    name = "Crives/distilbert-base-uncased-finetuned-emotion"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class D3Xter1922_ElectraBaseDiscriminatorFinetunedCola(PetrainedTextClassifier):
    name = "D3xter1922/electra-base-discriminator-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dsi_Tweetbasedsa(PetrainedTextClassifier):
    name = "DSI/TweetBasedSA"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dsi_HumanDirectedSentiment(PetrainedTextClassifier):
    name = "DSI/human-directed-sentiment"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dsi_Personal_Sentiment(PetrainedTextClassifier):
    name = "DSI/personal_sentiment"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class DtaiKuleuven_MbertCoronaTweetsBelgiumCurfewSupport(PetrainedTextClassifier):
    name = "DTAI-KULeuven/mbert-corona-tweets-belgium-curfew-support"
    id2label = {
        "0": "too-strict\n",
        "1": "ok\n",
        "2": "too-loose\n",
        "3": "not-applicable\n",
    }
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class DtaiKuleuven_MbertCoronaTweetsBelgiumTopics(PetrainedTextClassifier):
    name = "DTAI-KULeuven/mbert-corona-tweets-belgium-topics"
    id2label = {
        "0": "other-measure",
        "1": "closing-horeca",
        "2": "testing",
        "3": "schools",
        "4": "lockdown",
        "5": "quarantine",
        "6": "curfew",
        "7": "masks",
        "8": "not-applicable",
        "9": "vaccine",
    }
    num_classes = 10

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alexandrainst_DaBinaryEmotionClassificationBase(PetrainedTextClassifier):
    name = "alexandrainst/da-binary-emotion-classification-base"
    id2label = {"0": "emotional", "1": "no emotion"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alexandrainst_DaEmotionClassificationBase(PetrainedTextClassifier):
    name = "alexandrainst/da-emotion-classification-base"
    id2label = {
        "0": "Glæde/Sindsro",
        "1": "Tillid/Accept",
        "2": "Forventning/Interrese",
        "3": "Overasket/Målløs",
        "4": "Vrede/Irritation",
        "5": "Foragt/Modvilje",
        "6": "Sorg/trist",
        "7": "Frygt/Bekymret",
    }
    num_classes = 8

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alexandrainst_DaHatespeechClassificationBase(PetrainedTextClassifier):
    name = "alexandrainst/da-hatespeech-classification-base"
    id2label = {
        "0": "Særlig opmærksomhed",
        "1": "Personangreb",
        "2": "Sprogbrug",
        "3": "Spam & indhold",
    }
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alexandrainst_DaHatespeechDetectionBase(PetrainedTextClassifier):
    name = "alexandrainst/da-hatespeech-detection-base"
    id2label = {"0": "not offensive", "1": "offensive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alexandrainst_DaSentimentBase(PetrainedTextClassifier):
    name = "alexandrainst/da-sentiment-base"
    id2label = {"0": "positive", "1": "neutral", "2": "negative"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alexandrainst_DaSubjectivivityClassificationBase(PetrainedTextClassifier):
    name = "alexandrainst/da-subjectivivity-classification-base"
    id2label = {"0": "objective", "1": "subjective"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alexandrainst_DaHatespeechDetectionSmall(PetrainedTextClassifier):
    name = "alexandrainst/da-hatespeech-detection-small"
    id2label = {"0": "not offensive", "1": "offensive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Alexandrainst_DaNedBase(PetrainedTextClassifier):
    name = "alexandrainst/da-ned-base"
    id2label = {"0": "not mentioned", "1": "mentioned"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Danl_ScientificChallengesAndDirections(PetrainedTextClassifier):
    name = "DanL/scientific-challenges-and-directions"
    id2label = {"0": "Challenge", "1": "Direction"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Dandara_BertimbauSocioambiental(PetrainedTextClassifier):
    name = "Dandara/bertimbau-socioambiental"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Darkrider_Covidbert_Medmarco(PetrainedTextClassifier):
    name = "Darkrider/covidbert_medmarco"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Davlan_NaijaTwitterSentimentAfribertaLarge(PetrainedTextClassifier):
    name = "Davlan/naija-twitter-sentiment-afriberta-large"
    id2label = {"0": "positive", "1": "neutral", "2": "negative"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Deadbeast_Emoberttamil(PetrainedTextClassifier):
    name = "DeadBeast/emoBERTTamil"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Deadbeast_KorscmMbert(PetrainedTextClassifier):
    name = "DeadBeast/korscm-mBERT"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Deadbeast_MbertBaseCasedFinetunedBengaliFakenews(PetrainedTextClassifier):
    name = "DeadBeast/mbert-base-cased-finetuned-bengali-fakenews"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Deeppavlov_RobertaLargeWinogrande(PetrainedTextClassifier):
    name = "DeepPavlov/roberta-large-winogrande"
    id2label = {"0": "False", "1": "True"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Deeppavlov_XlmRobertaLargeEnRuMnli(PetrainedTextClassifier):
    name = "DeepPavlov/xlm-roberta-large-en-ru-mnli"
    id2label = {"0": "CONTRADICTION", "1": "NEUTRAL", "2": "ENTAILMENT"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Demangejeremy_4SentimentsWithFlaubert(PetrainedTextClassifier):
    name = "DemangeJeremy/4-sentiments-with-flaubert"
    id2label = {"0": "MIXED", "1": "NEGATIVE", "2": "OBJECTIVE", "3": "POSITIVE"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Donghyounglee_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "DongHyoungLee/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Waynehillsdev_Waynehills_Sentimental_Kor(PetrainedTextClassifier):
    name = "Waynehillsdev/waynehills_sentimental_kor"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertCovidHateFinetunedTest(PetrainedTextClassifier):
    name = "DoyyingFace/bert-COVID-HATE-finetuned-test"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsianCleanWithUncleanValid(
    PetrainedTextClassifier
):
    name = "DoyyingFace/bert-asian-hate-tweets-asian-clean-with-unclean-valid"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsianUncleanFreeze(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-asian-unclean-freeze-12"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsianUncleanFreeze(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-asian-unclean-freeze-4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsianUncleanFreeze(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-asian-unclean-freeze-8"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsianUncleanSlanted(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-asian-unclean-slanted"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsianUncleanWarmup(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-asian-unclean-warmup-100"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsianUncleanWarmup(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-asian-unclean-warmup-25"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsianUncleanWarmup(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-asian-unclean-warmup-50"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsianUncleanWarmup(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-asian-unclean-warmup-75"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsianUncleanWithCleanValid(
    PetrainedTextClassifier
):
    name = "DoyyingFace/bert-asian-hate-tweets-asian-unclean-with-clean-valid"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsonamClean(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-asonam-clean"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsAsonamUnclean(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-asonam-unclean"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsConcatCleanWithUncleanValid(
    PetrainedTextClassifier
):
    name = "DoyyingFace/bert-asian-hate-tweets-concat-clean-with-unclean-valid"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsConcatClean(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-concat-clean"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsConcatUncleanDiscriminate(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-concat-unclean-discriminate"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsConcatUncleanWithCleanValid(
    PetrainedTextClassifier
):
    name = "DoyyingFace/bert-asian-hate-tweets-concat-unclean-with-clean-valid"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsConcatUnclean(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-concat-unclean"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfCleanSmallDiscriminate(
    PetrainedTextClassifier
):
    name = "DoyyingFace/bert-asian-hate-tweets-self-clean-small-discriminate"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfCleanSmallEpoch5Freeze4(
    PetrainedTextClassifier
):
    name = "DoyyingFace/bert-asian-hate-tweets-self-clean-small-epoch5-freeze4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfCleanSmallEpoch5Warmup(
    PetrainedTextClassifier
):
    name = "DoyyingFace/bert-asian-hate-tweets-self-clean-small-epoch5-warmup-50"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfCleanSmallEpoch5(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-clean-small-epoch5"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfCleanSmallEpoch6(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-clean-small-epoch6"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfCleanSmallMoreEpoch(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-clean-small-more-epoch"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfCleanSmallWarmup(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-clean-small-warmup-100"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfCleanSmallWarmup(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-clean-small-warmup-50"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfCleanSmall(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-clean-small"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfCleanWithUncleanValid(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-clean-with-unclean-valid"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfClean(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-clean"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfUncleanFreeze(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-unclean-freeze-12"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfUncleanFreeze(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-unclean-freeze-4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfUncleanFreeze(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-unclean-freeze-8"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfUncleanSmall(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-unclean-small"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfUnclean(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-unclean"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertAsianHateTweetsSelfUnleanWithCleanValid(PetrainedTextClassifier):
    name = "DoyyingFace/bert-asian-hate-tweets-self-unlean-with-clean-valid"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertColaFinetuned(PetrainedTextClassifier):
    name = "DoyyingFace/bert-cola-finetuned"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertTweetsSemevalClean(PetrainedTextClassifier):
    name = "DoyyingFace/bert-tweets-semeval-clean"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertTweetsSemevalUnclean(PetrainedTextClassifier):
    name = "DoyyingFace/bert-tweets-semeval-unclean"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_BertWikiCommentsFinetuned(PetrainedTextClassifier):
    name = "DoyyingFace/bert-wiki-comments-finetuned"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Doyyingface_Doyying_Bert_First_Again(PetrainedTextClassifier):
    name = "DoyyingFace/doyying_bert_first_again"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Embeddia_BerticTweetsentiment(PetrainedTextClassifier):
    name = "EMBEDDIA/bertic-tweetsentiment"
    id2label = {"0": "Negative", "1": "Neutral", "2": "Positive"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Embeddia_EnglishTweetsentiment(PetrainedTextClassifier):
    name = "EMBEDDIA/english-tweetsentiment"
    id2label = {"0": "Negative", "1": "Neutral", "2": "Positive"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Embeddia_RubertTweetsentiment(PetrainedTextClassifier):
    name = "EMBEDDIA/rubert-tweetsentiment"
    id2label = {"0": "Negative", "1": "Neutral", "2": "Positive"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Embeddia_SlobertaTweetsentiment(PetrainedTextClassifier):
    name = "EMBEDDIA/sloberta-tweetsentiment"
    id2label = {"0": "Negative", "1": "Neutral", "2": "Positive"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Easthshin_Android_Ios_Classification(PetrainedTextClassifier):
    name = "EasthShin/Android_Ios_Classification"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Easthshin_EmotionClassificationBertBase(PetrainedTextClassifier):
    name = "EasthShin/Emotion-Classification-bert-base"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_BertBasedUncasedSst2E1(PetrainedTextClassifier):
    name = "EhsanAghazadeh/bert-based-uncased-sst2-e1"
    id2label = {"0": "negative", "1": "positive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_BertBasedUncasedSst2E2(PetrainedTextClassifier):
    name = "EhsanAghazadeh/bert-based-uncased-sst2-e2"
    id2label = {"0": "negative", "1": "positive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_BertBasedUncasedSst2E3(PetrainedTextClassifier):
    name = "EhsanAghazadeh/bert-based-uncased-sst2-e3"
    id2label = {"0": 0, "1": 1}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_BertBasedUncasedSst2E4(PetrainedTextClassifier):
    name = "EhsanAghazadeh/bert-based-uncased-sst2-e4"
    id2label = {"0": "negative", "1": "positive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_BertBasedUncasedSst2E5(PetrainedTextClassifier):
    name = "EhsanAghazadeh/bert-based-uncased-sst2-e5"
    id2label = {"0": 0, "1": 1}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_BertBasedUncasedSst2E6(PetrainedTextClassifier):
    name = "EhsanAghazadeh/bert-based-uncased-sst2-e6"
    id2label = {"0": "negative", "1": "positive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_BertLargeUncasedCola_A(PetrainedTextClassifier):
    name = "EhsanAghazadeh/bert-large-uncased-CoLA_A"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_BertLargeUncasedCola_B(PetrainedTextClassifier):
    name = "EhsanAghazadeh/bert-large-uncased-CoLA_B"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_ElectraBaseAvgELcc(PetrainedTextClassifier):
    name = "EhsanAghazadeh/electra-base-avg-2e-5-lcc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_ElectraLargeLccE(PetrainedTextClassifier):
    name = "EhsanAghazadeh/electra-large-lcc-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_XlmRobertaBaseLccEnE(PetrainedTextClassifier):
    name = "EhsanAghazadeh/xlm-roberta-base-lcc-en-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_XlmRobertaBaseLccEnFaE(PetrainedTextClassifier):
    name = "EhsanAghazadeh/xlm-roberta-base-lcc-en-fa-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_XlmRobertaBaseLccFaE(PetrainedTextClassifier):
    name = "EhsanAghazadeh/xlm-roberta-base-lcc-fa-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_XlnetLargeCasedCola_A(PetrainedTextClassifier):
    name = "EhsanAghazadeh/xlnet-large-cased-CoLA_A"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_XlnetLargeCasedCola_B(PetrainedTextClassifier):
    name = "EhsanAghazadeh/xlnet-large-cased-CoLA_B"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ehsanaghazadeh_XlnetLargeCasedCola_C(PetrainedTextClassifier):
    name = "EhsanAghazadeh/xlnet-large-cased-CoLA_C"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Elluran_Hate_Speech_Detector(PetrainedTextClassifier):
    name = "Elluran/Hate_speech_detector"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Elron_BleurtBase(PetrainedTextClassifier):
    name = "Elron/bleurt-base-128"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Elron_BleurtBase(PetrainedTextClassifier):
    name = "Elron/bleurt-base-512"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Elron_BleurtLarge(PetrainedTextClassifier):
    name = "Elron/bleurt-large-128"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Elron_BleurtLarge(PetrainedTextClassifier):
    name = "Elron/bleurt-large-512"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Elron_BleurtTiny(PetrainedTextClassifier):
    name = "Elron/bleurt-tiny-128"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Elron_BleurtTiny(PetrainedTextClassifier):
    name = "Elron/bleurt-tiny-512"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Emanuel_BertweetEmotionBase(PetrainedTextClassifier):
    name = "Emanuel/bertweet-emotion-base"
    id2label = {
        "0": "sadness",
        "1": "joy",
        "2": "love",
        "3": "anger",
        "4": "fear",
        "5": "surprise",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Emanuel_TwitterEmotionDebertaV3Base(PetrainedTextClassifier):
    name = "Emanuel/twitter-emotion-deberta-v3-base"
    id2label = {
        "0": "sadness",
        "1": "joy",
        "2": "love",
        "3": "anger",
        "4": "fear",
        "5": "surprise",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Emily_Fyp(PetrainedTextClassifier):
    name = "Emily/fyp"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
    }
    num_classes = 21

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Emirhan_51KFinetunedBertModel(PetrainedTextClassifier):
    name = "Emirhan/51k-finetuned-bert-model"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ensaremirali_DistilbertBaseUncasedFinetunedEmotion(PetrainedTextClassifier):
    name = "EnsarEmirali/distilbert-base-uncased-finetuned-emotion"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ethanchen0418_DomainClsNineClasses(PetrainedTextClassifier):
    name = "EthanChen0418/domain-cls-nine-classes"
    id2label = {"0": "contradiction", "1": "neutral", "2": "entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ethanchen0418_FewShotModelFiveClasses(PetrainedTextClassifier):
    name = "EthanChen0418/few-shot-model-five-classes"
    id2label = {"0": "contradiction", "1": "neutral", "2": "entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ethanchen0418_Intent_Cls(PetrainedTextClassifier):
    name = "EthanChen0418/intent_cls"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
    }
    num_classes = 10

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ethanchen0418_SevenClassedDomainCls(PetrainedTextClassifier):
    name = "EthanChen0418/seven-classed-domain-cls"
    id2label = {"0": "contradiction", "1": "neutral", "2": "entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ethanchen0418_SixClassedDomainCls(PetrainedTextClassifier):
    name = "EthanChen0418/six-classed-domain-cls"
    id2label = {"0": "contradiction", "1": "neutral", "2": "entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Eugenia_RobertaBaseBneFinetunedAmazon_Reviews_Multi(PetrainedTextClassifier):
    name = "Eugenia/roberta-base-bne-finetuned-amazon_reviews_multi"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Fabiodatageek_DistilbertBaseUncasedFinetunedEmotion(PetrainedTextClassifier):
    name = "FabioDataGeek/distilbert-base-uncased-finetuned-emotion"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class FanS_RedditTcBert(PetrainedTextClassifier):
    name = "Fan-s/reddit-tc-bert"
    id2label = {"0": "matched", "1": "unmatched"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Fauzan_AutonlpJudulberita(PetrainedTextClassifier):
    name = "Fauzan/autonlp-judulberita-32517788"
    id2label = {"0": "0.0", "1": "1.0"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Fengkai_DistilbertBaseUncasedFinetunedEmotion(PetrainedTextClassifier):
    name = "Fengkai/distilbert-base-uncased-finetuned-emotion"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Fiona99_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "Fiona99/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Fujitsu_Augcode(PetrainedTextClassifier):
    name = "Fujitsu/AugCode"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Gd_CqBertModelRepo(PetrainedTextClassifier):
    name = "GD/cq-bert-model-repo"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Geniusvoice_BotSelector(PetrainedTextClassifier):
    name = "GeniusVoice/bot-selector"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Gerwin_BertForPac(PetrainedTextClassifier):
    name = "Gerwin/bert-for-pac"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Giannipinelli_XlmRobertaBaseFinetunedMarcEn(PetrainedTextClassifier):
    name = "Giannipinelli/xlm-roberta-base-finetuned-marc-en"
    id2label = {"0": "terrible", "1": "poor", "2": "ok", "3": "good", "4": "great"}
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Greg1901_Bertsummadev_Afd(PetrainedTextClassifier):
    name = "Greg1901/BertSummaDev_AFD"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Greg1901_Bertsummadev_Summariser(PetrainedTextClassifier):
    name = "Greg1901/BertSummaDev_summariser"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Gunulhona_Tbbcmodel(PetrainedTextClassifier):
    name = "Gunulhona/tbbcmodel"
    id2label = {
        "0": "Sadness",
        "1": "Loss of Energy",
        "2": "Loss of Interest",
        "3": "Changes in Sleeping Pattern",
        "4": "Changes in Appetite",
        "5": "Self-Dislike",
        "6": "Concentration Difficultiy",
        "7": "Crying",
        "8": "Gulity Feelings",
        "9": "Worthlessness",
        "10": "Pessimism",
        "11": "Past Failure",
        "12": "Loss of Pleasure",
        "13": "Tiredness or Fatigue",
        "14": "Irritability",
        "15": "Loss of Interest in Sex",
        "16": "Agitation",
        "17": "Punishment Feelings",
        "18": "Self-Criticalness",
        "19": "Indecisivness",
        "20": "Suicidal Thoughts or Wishes",
        "21": "Non BDI",
    }
    num_classes = 22

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Gunulhona_Tbecmodel(PetrainedTextClassifier):
    name = "Gunulhona/tbecmodel"
    id2label = {
        "0": "FEAR",
        "1": "SURPRISED",
        "2": "ANGER",
        "3": "SADNESS",
        "4": "NEUTRALITY",
        "5": "HAPPINESS",
        "6": "DISGUST",
    }
    num_classes = 7

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Gunulhona_Tbnymodel(PetrainedTextClassifier):
    name = "Gunulhona/tbnymodel"
    id2label = {"0": "Negative", "1": "Positive", "2": "Non Related"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Guscode_DkbertHatespeechDetection(PetrainedTextClassifier):
    name = "Guscode/DKbert-hatespeech-detection"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Hackmit_DoubleAgent(PetrainedTextClassifier):
    name = "HackMIT/double-agent"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Harshveer_AutonlpFormality_Scoring_2(PetrainedTextClassifier):
    name = "Harshveer/autonlp-formality_scoring_2-32597818"
    id2label = {"0": "target"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_BertBaseUncasedHatexplainRationaleTwo(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/bert-base-uncased-hatexplain-rationale-two"
    id2label = {"0": "NORMAL", "1": "ABUSIVE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_BertBaseUncasedHatexplain(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/bert-base-uncased-hatexplain"
    id2label = {"0": "hate speech", "1": "normal", "2": "offensive"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DehatebertMonoArabic(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/dehatebert-mono-arabic"
    id2label = {"0": "NON_HATE", "1": "HATE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DehatebertMonoEnglish(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/dehatebert-mono-english"
    id2label = {"0": "NON_HATE", "1": "HATE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DehatebertMonoFrench(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/dehatebert-mono-french"
    id2label = {"0": "NON_HATE", "1": "HATE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DehatebertMonoGerman(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/dehatebert-mono-german"
    id2label = {"0": "NON_HATE", "1": "HATE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DehatebertMonoIndonesian(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/dehatebert-mono-indonesian"
    id2label = {"0": "NON_HATE", "1": "HATE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DehatebertMonoItalian(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/dehatebert-mono-italian"
    id2label = {"0": "NON_HATE", "1": "HATE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DehatebertMonoPolish(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/dehatebert-mono-polish"
    id2label = {"0": "NON_HATE", "1": "HATE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DehatebertMonoPortugese(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/dehatebert-mono-portugese"
    id2label = {"0": "NON_HATE", "1": "HATE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DehatebertMonoSpanish(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/dehatebert-mono-spanish"
    id2label = {"0": "NON_HATE", "1": "HATE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DeoffxlmrMonoKannada(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/deoffxlmr-mono-kannada"
    id2label = {
        "0": "Not_offensive",
        "1": "Not_in_intended_language",
        "2": "Off_target_other",
        "3": "Off_target_group",
        "4": "Profanity",
        "5": "Off_target_ind",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DeoffxlmrMonoMalyalam(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/deoffxlmr-mono-malyalam"
    id2label = {
        "0": "Not_offensive",
        "1": "Not_in_intended_language",
        "2": "Off_target_group",
        "3": "Profanity",
        "4": "Off_target_ind",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class HateSpeechCnerg_DeoffxlmrMonoTamil(PetrainedTextClassifier):
    name = "Hate-speech-CNERG/deoffxlmr-mono-tamil"
    id2label = {
        "0": "Not_offensive",
        "1": "Not_in_intended_language",
        "2": "Off_target_other",
        "3": "Off_target_group",
        "4": "Profanity",
        "5": "Off_target_ind",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Hax_FilipinoTextVersion1(PetrainedTextClassifier):
    name = "Hax/filipino-text-version1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Herais_Pred_Genre(PetrainedTextClassifier):
    name = "Herais/pred_genre"
    id2label = {
        "0": "传奇",
        "1": "传记",
        "2": "其它",
        "3": "军旅",
        "4": "农村",
        "5": "宫廷",
        "6": "武打",
        "7": "涉案",
        "8": "神话",
        "9": "科幻",
        "10": "都市",
        "11": "青少",
        "12": "革命",
    }
    num_classes = 13

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Herais_Pred_Timeperiod(PetrainedTextClassifier):
    name = "Herais/pred_timeperiod"
    id2label = {"0": "古代", "1": "当代", "2": "现代", "3": "近代", "4": "重大"}
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Hinova_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "Hinova/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Hooshvarelab_BertFaBaseUncasedClfDigimag(PetrainedTextClassifier):
    name = "HooshvareLab/bert-fa-base-uncased-clf-digimag"
    id2label = {
        "0": "بازی ویدیویی",
        "1": "راهنمای خرید",
        "2": "سلامت و زیبایی",
        "3": "علم و تکنولوژی",
        "4": "عمومی",
        "5": "هنر و سینما",
        "6": "کتاب و ادبیات",
    }
    num_classes = 7

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Hooshvarelab_BertFaBaseUncasedClfPersiannews(PetrainedTextClassifier):
    name = "HooshvareLab/bert-fa-base-uncased-clf-persiannews"
    id2label = {
        "0": "اجتماعی",
        "1": "اقتصادی",
        "2": "بین الملل",
        "3": "سیاسی",
        "4": "علمی فناوری",
        "5": "فرهنگی هنری",
        "6": "ورزشی",
        "7": "پزشکی",
    }
    num_classes = 8

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Hooshvarelab_BertFaBaseUncasedSentimentDeepsentipersBinary(
    PetrainedTextClassifier
):
    name = "HooshvareLab/bert-fa-base-uncased-sentiment-deepsentipers-binary"
    id2label = {"0": "negative", "1": "positive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Hooshvarelab_BertFaBaseUncasedSentimentDeepsentipersMulti(
    PetrainedTextClassifier
):
    name = "HooshvareLab/bert-fa-base-uncased-sentiment-deepsentipers-multi"
    id2label = {
        "0": "furious",
        "1": "angry",
        "2": "neutral",
        "3": "happy",
        "4": "delighted",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Hooshvarelab_BertFaBaseUncasedSentimentDigikala(PetrainedTextClassifier):
    name = "HooshvareLab/bert-fa-base-uncased-sentiment-digikala"
    id2label = {"0": "no_idea", "1": "not_recommended", "2": "recommended"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Hooshvarelab_BertFaBaseUncasedSentimentSnappfood(PetrainedTextClassifier):
    name = "HooshvareLab/bert-fa-base-uncased-sentiment-snappfood"
    id2label = {"0": "HAPPY", "1": "SAD"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Hormigo_RobertaBaseBneFinetunedAmazon_Reviews_Multi(PetrainedTextClassifier):
    name = "Hormigo/roberta-base-bne-finetuned-amazon_reviews_multi"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Huffon_KlueRobertaBaseNli(PetrainedTextClassifier):
    name = "Huffon/klue-roberta-base-nli"
    id2label = {"0": "ENTAILMENT", "1": "NEUTRAL", "2": "CONTRADICTION"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Huffon_Qnli(PetrainedTextClassifier):
    name = "Huffon/qnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Huntersx_Cola_Model(PetrainedTextClassifier):
    name = "Huntersx/cola_model"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Imsypp_Hate_Speech_En(PetrainedTextClassifier):
    name = "IMSyPP/hate_speech_en"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Imsypp_Hate_Speech_It(PetrainedTextClassifier):
    name = "IMSyPP/hate_speech_it"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Imsypp_Hate_Speech_Nl(PetrainedTextClassifier):
    name = "IMSyPP/hate_speech_nl"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Imsypp_Hate_Speech_Slo(PetrainedTextClassifier):
    name = "IMSyPP/hate_speech_slo"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Imsypp_Hate_Speech_Targets_Slo(PetrainedTextClassifier):
    name = "IMSyPP/hate_speech_targets_slo"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
    }
    num_classes = 12

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ilyagusev_Rubertconv_Toxic_Clf(PetrainedTextClassifier):
    name = "IlyaGusev/rubertconv_toxic_clf"
    id2label = {"0": "neutral", "1": "toxic"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ilyagusev_Xlm_Roberta_Large_Headline_Cause_Full(PetrainedTextClassifier):
    name = "IlyaGusev/xlm_roberta_large_headline_cause_full"
    id2label = {
        "0": "bad",
        "1": "same",
        "2": "rel",
        "3": "left_right_cause",
        "4": "right_left_cause",
        "5": "left_right_refute",
        "6": "right_left_refute",
    }
    num_classes = 7

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ilyagusev_Xlm_Roberta_Large_Headline_Cause_Simple(PetrainedTextClassifier):
    name = "IlyaGusev/xlm_roberta_large_headline_cause_simple"
    id2label = {"0": "not_cause", "1": "left_right", "2": "right_left"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Infocov_SentiCroCovCsebert(PetrainedTextClassifier):
    name = "InfoCoV/Senti-Cro-CoV-cseBERT"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Intel_BertBaseUncasedMnliSparseUnstructured(PetrainedTextClassifier):
    name = "Intel/bert-base-uncased-mnli-sparse-70-unstructured"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Isabellakarabasz_RobertaBaseBneFinetunedAmazon_Reviews_Multi(
    PetrainedTextClassifier
):
    name = "IsabellaKarabasz/roberta-base-bne-finetuned-amazon_reviews_multi"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Itcastai_Bert_Cn_Finetuning(PetrainedTextClassifier):
    name = "ItcastAI/bert_cn_finetuning"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Itcastai_Bert_Cn_Finetunning(PetrainedTextClassifier):
    name = "ItcastAI/bert_cn_finetunning"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Itcastai_Bert_Finetuning_Test(PetrainedTextClassifier):
    name = "ItcastAI/bert_finetuning_test"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Itcastai_Bert_Finetunning_Test(PetrainedTextClassifier):
    name = "ItcastAI/bert_finetunning_test"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ituthesis2022Mlvinikw_BertBaseUncased(PetrainedTextClassifier):
    name = "ItuThesis2022MlviNikw/bert-base-uncased"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
    }
    num_classes = 19

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ituthesis2022Mlvinikw_DebertaV3Base(PetrainedTextClassifier):
    name = "ItuThesis2022MlviNikw/deberta-v3-base"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
    }
    num_classes = 19

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ivo_EmscadSkillExtractionConference(PetrainedTextClassifier):
    name = "Ivo/emscad-skill-extraction-conference"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ivo_EmscadSkillExtraction(PetrainedTextClassifier):
    name = "Ivo/emscad-skill-extraction"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jbnlry_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "JBNLRY/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jiwon_BertBaseFinetunedNli(PetrainedTextClassifier):
    name = "JIWON/bert-base-finetuned-nli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jp040_BertGermanSentimentTwitter(PetrainedTextClassifier):
    name = "JP040/bert-german-sentiment-twitter"
    id2label = {"0": "positive", "1": "negative", "2": "neutral"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Javibj_SagemakerDistilbertEmotion(PetrainedTextClassifier):
    name = "JaviBJ/sagemaker-distilbert-emotion"
    id2label = {
        "0": "sadness",
        "1": "joy",
        "2": "love",
        "3": "anger",
        "4": "fear",
        "5": "surprise",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_0_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_0_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_0_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_0_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_0_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_0_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_0_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_0_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_0_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_0_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_10_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_10_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_10_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_10_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_10_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_10_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_10_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_10_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_10_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_10_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_11_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_11_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_11_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_11_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_11_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_11_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_12_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_12_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_12_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_12_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_12_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_12_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_12_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_12_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_13_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_13_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_13_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_13_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_13_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_13_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_13_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_13_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_13_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_13_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_14_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_14_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_14_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_14_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_14_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_14_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_14_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_14_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_15_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_15_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_15_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_15_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_15_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_15_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_16_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_16_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_16_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_16_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_17_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_17_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_17_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_17_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_17_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_17_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_17_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_17_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_17_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_17_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_18_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_18_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_18_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_18_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_18_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_18_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_19_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_19_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_19_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_19_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_19_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_19_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_19_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_19_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_1_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_1_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_1_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_1_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_1_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_1_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_1_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_1_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_1_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_1_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_20_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_20_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_20_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_20_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_20_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_20_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_20_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_20_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_20_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_20_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_21_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_21_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_21_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_21_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_21_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_21_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_21_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_21_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_21_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_21_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_22_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_22_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_22_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_22_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_22_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_22_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_22_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_22_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_22_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_22_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_23_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_23_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_23_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_23_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_23_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_23_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_23_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_23_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_23_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_23_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_24_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_24_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_24_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_24_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_24_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_24_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_24_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_24_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_24_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_24_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_2_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_2_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_2_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_2_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_2_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_2_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_3_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_3_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_3_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_3_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_3_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_3_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_3_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_3_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_3_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_3_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_4_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_4_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_4_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_4_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_4_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_4_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_4_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_4_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_4_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_4_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_5_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_5_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_6_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_6_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_6_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_6_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_6_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_6_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_6_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_6_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_7_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_7_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_7_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_7_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_7_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_7_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_7_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_7_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_7_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_7_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_8_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_8_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_8_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_8_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_8_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_8_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_8_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_8_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_8_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_8_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_9_Ft_0(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_9_ft_0"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_9_Ft_1(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_9_ft_1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_9_Ft_2(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_9_ft_2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_9_Ft_3(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_9_ft_3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeevesh8_Multiberts_Seed_9_Ft_4(PetrainedTextClassifier):
    name = "Jeevesh8/multiberts_seed_9_ft_4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeska_Vaccinchatsentenceclassifierdutch(PetrainedTextClassifier):
    name = "Jeska/VaccinChatSentenceClassifierDutch"
    id2label = {
        "0": "chitchat_ask_bye",
        "1": "chitchat_ask_hi",
        "2": "chitchat_ask_hi_de",
        "3": "chitchat_ask_hi_en",
        "4": "chitchat_ask_hi_fr",
        "5": "chitchat_ask_hoe_gaat_het",
        "6": "chitchat_ask_name",
        "7": "chitchat_ask_thanks",
        "8": "faq_ask_aantal_gevaccineerd",
        "9": "faq_ask_aantal_gevaccineerd_wereldwijd",
        "10": "faq_ask_afspraak_afzeggen",
        "11": "faq_ask_afspraak_gemist",
        "12": "faq_ask_algemeen_info",
        "13": "faq_ask_allergisch_na_vaccinatie",
        "14": "faq_ask_alternatieve_medicatie",
        "15": "faq_ask_andere_vaccins",
        "16": "faq_ask_astrazeneca",
        "17": "faq_ask_astrazeneca_bij_ouderen",
        "18": "faq_ask_astrazeneca_bloedklonters",
        "19": "faq_ask_astrazeneca_prik_2",
        "20": "faq_ask_attest",
        "21": "faq_ask_autisme_na_vaccinatie",
        "22": "faq_ask_auto-immuun",
        "23": "faq_ask_begeleiding",
        "24": "faq_ask_beschermen",
        "25": "faq_ask_beschermingsduur",
        "26": "faq_ask_beschermingspercentage",
        "27": "faq_ask_besmetten_na_vaccin",
        "28": "faq_ask_betalen_voor_vaccin",
        "29": "faq_ask_betrouwbaar",
        "30": "faq_ask_betrouwbare_bronnen",
        "31": "faq_ask_bijsluiter",
        "32": "faq_ask_bijwerking_AZ",
        "33": "faq_ask_bijwerking_JJ",
        "34": "faq_ask_bijwerking_algemeen",
        "35": "faq_ask_bijwerking_lange_termijn",
        "36": "faq_ask_bijwerking_moderna",
        "37": "faq_ask_bijwerking_pfizer",
        "38": "faq_ask_bloed_geven",
        "39": "faq_ask_borstvoeding",
        "40": "faq_ask_buitenlander",
        "41": "faq_ask_chronisch_ziek",
        "42": "faq_ask_combi",
        "43": "faq_ask_complottheorie",
        "44": "faq_ask_complottheorie_5G",
        "45": "faq_ask_complottheorie_Bill_Gates",
        "46": "faq_ask_contra_ind",
        "47": "faq_ask_corona_is_griep",
        "48": "faq_ask_corona_vermijden",
        "49": "faq_ask_covid_door_vaccin",
        "50": "faq_ask_curevac",
        "51": "faq_ask_derde_prik",
        "52": "faq_ask_dna",
        "53": "faq_ask_duur_vaccinatie",
        "54": "faq_ask_eerst_weigeren",
        "55": "faq_ask_eerste_prik_buitenland",
        "56": "faq_ask_essentieel_beroep",
        "57": "faq_ask_experimenteel",
        "58": "faq_ask_foetus",
        "59": "faq_ask_geen_antwoord",
        "60": "faq_ask_geen_risicopatient",
        "61": "faq_ask_geen_uitnodiging",
        "62": "faq_ask_gestockeerd",
        "63": "faq_ask_gezondheidstoestand_gekend",
        "64": "faq_ask_gif_in_vaccin",
        "65": "faq_ask_goedkeuring",
        "66": "faq_ask_groepsimmuniteit",
        "67": "faq_ask_hartspierontsteking",
        "68": "faq_ask_hersenziekte",
        "69": "faq_ask_hoe_dodelijk",
        "70": "faq_ask_hoe_weet_overheid",
        "71": "faq_ask_hoeveel_dosissen",
        "72": "faq_ask_huisarts",
        "73": "faq_ask_huisdieren",
        "74": "faq_ask_iedereen",
        "75": "faq_ask_in_vaccin",
        "76": "faq_ask_info_vaccins",
        "77": "faq_ask_janssen",
        "78": "faq_ask_janssen_een_dosis",
        "79": "faq_ask_jong_en_gezond",
        "80": "faq_ask_keuze",
        "81": "faq_ask_keuze_vaccinatiecentrum",
        "82": "faq_ask_kinderen",
        "83": "faq_ask_kosjer_halal",
        "84": "faq_ask_leveringen",
        "85": "faq_ask_logistiek",
        "86": "faq_ask_logistiek_veilig",
        "87": "faq_ask_magnetisch",
        "88": "faq_ask_man_vrouw_verschillen",
        "89": "faq_ask_mantelzorger",
        "90": "faq_ask_maximaal_een_dosis",
        "91": "faq_ask_meer_bijwerkingen_tweede_dosis",
        "92": "faq_ask_minder_mobiel",
        "93": "faq_ask_moderna",
        "94": "faq_ask_mondmasker",
        "95": "faq_ask_motiveren",
        "96": "faq_ask_mrna_vs_andere_vaccins",
        "97": "faq_ask_naaldangst",
        "98": "faq_ask_nadelen",
        "99": "faq_ask_nuchter",
        "100": "faq_ask_ontwikkeling",
        "101": "faq_ask_onvruchtbaar",
        "102": "faq_ask_oplopen_vaccinatie",
        "103": "faq_ask_pfizer",
        "104": "faq_ask_phishing",
        "105": "faq_ask_pijnstiller",
        "106": "faq_ask_planning_eerstelijnszorg",
        "107": "faq_ask_planning_ouderen",
        "108": "faq_ask_positieve_test_na_vaccin",
        "109": "faq_ask_prioritaire_gropen",
        "110": "faq_ask_privacy",
        "111": "faq_ask_probleem_registratie",
        "112": "faq_ask_problemen_uitnodiging",
        "113": "faq_ask_quarantaine",
        "114": "faq_ask_qvax_probleem",
        "115": "faq_ask_reproductiegetal",
        "116": "faq_ask_risicopatient",
        "117": "faq_ask_risicopatient_diabetes",
        "118": "faq_ask_risicopatient_hartvaat",
        "119": "faq_ask_risicopatient_immuunziekte",
        "120": "faq_ask_risicopatient_kanker",
        "121": "faq_ask_risicopatient_luchtwegaandoening",
        "122": "faq_ask_smaakverlies",
        "123": "faq_ask_snel_ontwikkeld",
        "124": "faq_ask_sneller_aan_de_beurt",
        "125": "faq_ask_taxi",
        "126": "faq_ask_test_voor_vaccin",
        "127": "faq_ask_testen",
        "128": "faq_ask_tijd_tot_tweede_dosis",
        "129": "faq_ask_timing_andere_vaccins",
        "130": "faq_ask_trage_start",
        "131": "faq_ask_tweede_dosis_afspraak",
        "132": "faq_ask_tweede_dosis_vervroegen",
        "133": "faq_ask_twijfel_bijwerkingen",
        "134": "faq_ask_twijfel_effectiviteit",
        "135": "faq_ask_twijfel_inhoud",
        "136": "faq_ask_twijfel_ivm_vaccinatie",
        "137": "faq_ask_twijfel_noodzaak",
        "138": "faq_ask_twijfel_ontwikkeling",
        "139": "faq_ask_twijfel_praktisch",
        "140": "faq_ask_twijfel_vaccins_zelf",
        "141": "faq_ask_twijfel_vrijheid",
        "142": "faq_ask_uit_flacon",
        "143": "faq_ask_uitnodiging_afspraak_kwijt",
        "144": "faq_ask_uitnodiging_na_vaccinatie",
        "145": "faq_ask_vaccin_doorgeven",
        "146": "faq_ask_vaccin_immuunsysteem",
        "147": "faq_ask_vaccin_variant",
        "148": "faq_ask_vaccinatiecentrum",
        "149": "faq_ask_vaccine_covid_gehad",
        "150": "faq_ask_vaccine_covid_gehad_effect",
        "151": "faq_ask_vakantie",
        "152": "faq_ask_veelgestelde_vragen",
        "153": "faq_ask_vegan",
        "154": "faq_ask_verplicht",
        "155": "faq_ask_verschillen",
        "156": "faq_ask_vrijwillig_Janssen",
        "157": "faq_ask_vrijwilliger",
        "158": "faq_ask_waar_en_wanneer",
        "159": "faq_ask_waarom",
        "160": "faq_ask_waarom_niet_verplicht",
        "161": "faq_ask_waarom_ouderen_eerst",
        "162": "faq_ask_waarom_twee_prikken",
        "163": "faq_ask_waarom_twijfel",
        "164": "faq_ask_wanneer_algemene_bevolking",
        "165": "faq_ask_wanneer_iedereen_gevaccineerd",
        "166": "faq_ask_wat_is_corona",
        "167": "faq_ask_wat_is_rna",
        "168": "faq_ask_wat_is_vaccin",
        "169": "faq_ask_wat_na_vaccinatie",
        "170": "faq_ask_welk_vaccin_krijg_ik",
        "171": "faq_ask_welke_vaccin",
        "172": "faq_ask_wie_ben_ik",
        "173": "faq_ask_wie_doet_inenting",
        "174": "faq_ask_wie_is_risicopatient",
        "175": "faq_ask_wie_nu",
        "176": "faq_ask_wilsonbekwaam",
        "177": "faq_ask_zwanger",
        "178": "get_started",
        "179": "nlu_fallback",
        "180": "test",
    }
    num_classes = 181

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeska_Vaccinchatsentenceclassifierdutch_Frombertje(PetrainedTextClassifier):
    name = "Jeska/VaccinChatSentenceClassifierDutch_fromBERTje"
    id2label = {
        "0": "chitchat_ask_bye",
        "1": "chitchat_ask_hi",
        "2": "chitchat_ask_hi_de",
        "3": "chitchat_ask_hi_en",
        "4": "chitchat_ask_hi_fr",
        "5": "chitchat_ask_hoe_gaat_het",
        "6": "chitchat_ask_name",
        "7": "chitchat_ask_thanks",
        "8": "faq_ask_aantal_gevaccineerd",
        "9": "faq_ask_aantal_gevaccineerd_wereldwijd",
        "10": "faq_ask_afspraak_afzeggen",
        "11": "faq_ask_afspraak_gemist",
        "12": "faq_ask_algemeen_info",
        "13": "faq_ask_allergisch_na_vaccinatie",
        "14": "faq_ask_alternatieve_medicatie",
        "15": "faq_ask_andere_vaccins",
        "16": "faq_ask_astrazeneca",
        "17": "faq_ask_astrazeneca_bij_ouderen",
        "18": "faq_ask_astrazeneca_bloedklonters",
        "19": "faq_ask_astrazeneca_prik_2",
        "20": "faq_ask_attest",
        "21": "faq_ask_autisme_na_vaccinatie",
        "22": "faq_ask_auto-immuun",
        "23": "faq_ask_begeleiding",
        "24": "faq_ask_beschermen",
        "25": "faq_ask_beschermingsduur",
        "26": "faq_ask_beschermingspercentage",
        "27": "faq_ask_besmetten_na_vaccin",
        "28": "faq_ask_betalen_voor_vaccin",
        "29": "faq_ask_betrouwbaar",
        "30": "faq_ask_betrouwbare_bronnen",
        "31": "faq_ask_bijsluiter",
        "32": "faq_ask_bijwerking_AZ",
        "33": "faq_ask_bijwerking_JJ",
        "34": "faq_ask_bijwerking_algemeen",
        "35": "faq_ask_bijwerking_lange_termijn",
        "36": "faq_ask_bijwerking_moderna",
        "37": "faq_ask_bijwerking_pfizer",
        "38": "faq_ask_bloed_geven",
        "39": "faq_ask_borstvoeding",
        "40": "faq_ask_buitenlander",
        "41": "faq_ask_chronisch_ziek",
        "42": "faq_ask_combi",
        "43": "faq_ask_complottheorie",
        "44": "faq_ask_complottheorie_5G",
        "45": "faq_ask_complottheorie_Bill_Gates",
        "46": "faq_ask_contra_ind",
        "47": "faq_ask_corona_is_griep",
        "48": "faq_ask_corona_vermijden",
        "49": "faq_ask_covid_door_vaccin",
        "50": "faq_ask_curevac",
        "51": "faq_ask_derde_prik",
        "52": "faq_ask_dna",
        "53": "faq_ask_duur_vaccinatie",
        "54": "faq_ask_eerst_weigeren",
        "55": "faq_ask_eerste_prik_buitenland",
        "56": "faq_ask_essentieel_beroep",
        "57": "faq_ask_experimenteel",
        "58": "faq_ask_foetus",
        "59": "faq_ask_geen_antwoord",
        "60": "faq_ask_geen_risicopatient",
        "61": "faq_ask_geen_uitnodiging",
        "62": "faq_ask_gestockeerd",
        "63": "faq_ask_gezondheidstoestand_gekend",
        "64": "faq_ask_gif_in_vaccin",
        "65": "faq_ask_goedkeuring",
        "66": "faq_ask_groepsimmuniteit",
        "67": "faq_ask_hartspierontsteking",
        "68": "faq_ask_hersenziekte",
        "69": "faq_ask_hoe_dodelijk",
        "70": "faq_ask_hoe_weet_overheid",
        "71": "faq_ask_hoeveel_dosissen",
        "72": "faq_ask_huisarts",
        "73": "faq_ask_huisdieren",
        "74": "faq_ask_iedereen",
        "75": "faq_ask_in_vaccin",
        "76": "faq_ask_info_vaccins",
        "77": "faq_ask_janssen",
        "78": "faq_ask_janssen_een_dosis",
        "79": "faq_ask_jong_en_gezond",
        "80": "faq_ask_keuze",
        "81": "faq_ask_keuze_vaccinatiecentrum",
        "82": "faq_ask_kinderen",
        "83": "faq_ask_kosjer_halal",
        "84": "faq_ask_leveringen",
        "85": "faq_ask_logistiek",
        "86": "faq_ask_logistiek_veilig",
        "87": "faq_ask_magnetisch",
        "88": "faq_ask_man_vrouw_verschillen",
        "89": "faq_ask_mantelzorger",
        "90": "faq_ask_maximaal_een_dosis",
        "91": "faq_ask_meer_bijwerkingen_tweede_dosis",
        "92": "faq_ask_minder_mobiel",
        "93": "faq_ask_moderna",
        "94": "faq_ask_mondmasker",
        "95": "faq_ask_motiveren",
        "96": "faq_ask_mrna_vs_andere_vaccins",
        "97": "faq_ask_naaldangst",
        "98": "faq_ask_nadelen",
        "99": "faq_ask_nuchter",
        "100": "faq_ask_ontwikkeling",
        "101": "faq_ask_onvruchtbaar",
        "102": "faq_ask_oplopen_vaccinatie",
        "103": "faq_ask_pfizer",
        "104": "faq_ask_phishing",
        "105": "faq_ask_pijnstiller",
        "106": "faq_ask_planning_eerstelijnszorg",
        "107": "faq_ask_planning_ouderen",
        "108": "faq_ask_positieve_test_na_vaccin",
        "109": "faq_ask_prioritaire_gropen",
        "110": "faq_ask_privacy",
        "111": "faq_ask_probleem_registratie",
        "112": "faq_ask_problemen_uitnodiging",
        "113": "faq_ask_quarantaine",
        "114": "faq_ask_qvax_probleem",
        "115": "faq_ask_reproductiegetal",
        "116": "faq_ask_risicopatient",
        "117": "faq_ask_risicopatient_diabetes",
        "118": "faq_ask_risicopatient_hartvaat",
        "119": "faq_ask_risicopatient_immuunziekte",
        "120": "faq_ask_risicopatient_kanker",
        "121": "faq_ask_risicopatient_luchtwegaandoening",
        "122": "faq_ask_smaakverlies",
        "123": "faq_ask_snel_ontwikkeld",
        "124": "faq_ask_sneller_aan_de_beurt",
        "125": "faq_ask_taxi",
        "126": "faq_ask_test_voor_vaccin",
        "127": "faq_ask_testen",
        "128": "faq_ask_tijd_tot_tweede_dosis",
        "129": "faq_ask_timing_andere_vaccins",
        "130": "faq_ask_trage_start",
        "131": "faq_ask_tweede_dosis_afspraak",
        "132": "faq_ask_tweede_dosis_vervroegen",
        "133": "faq_ask_twijfel_bijwerkingen",
        "134": "faq_ask_twijfel_effectiviteit",
        "135": "faq_ask_twijfel_inhoud",
        "136": "faq_ask_twijfel_ivm_vaccinatie",
        "137": "faq_ask_twijfel_noodzaak",
        "138": "faq_ask_twijfel_ontwikkeling",
        "139": "faq_ask_twijfel_praktisch",
        "140": "faq_ask_twijfel_vaccins_zelf",
        "141": "faq_ask_twijfel_vrijheid",
        "142": "faq_ask_uit_flacon",
        "143": "faq_ask_uitnodiging_afspraak_kwijt",
        "144": "faq_ask_uitnodiging_na_vaccinatie",
        "145": "faq_ask_vaccin_doorgeven",
        "146": "faq_ask_vaccin_immuunsysteem",
        "147": "faq_ask_vaccin_variant",
        "148": "faq_ask_vaccinatiecentrum",
        "149": "faq_ask_vaccine_covid_gehad",
        "150": "faq_ask_vaccine_covid_gehad_effect",
        "151": "faq_ask_vakantie",
        "152": "faq_ask_veelgestelde_vragen",
        "153": "faq_ask_vegan",
        "154": "faq_ask_verplicht",
        "155": "faq_ask_verschillen",
        "156": "faq_ask_vrijwillig_Janssen",
        "157": "faq_ask_vrijwilliger",
        "158": "faq_ask_waar_en_wanneer",
        "159": "faq_ask_waarom",
        "160": "faq_ask_waarom_niet_verplicht",
        "161": "faq_ask_waarom_ouderen_eerst",
        "162": "faq_ask_waarom_twee_prikken",
        "163": "faq_ask_waarom_twijfel",
        "164": "faq_ask_wanneer_algemene_bevolking",
        "165": "faq_ask_wanneer_iedereen_gevaccineerd",
        "166": "faq_ask_wat_is_corona",
        "167": "faq_ask_wat_is_rna",
        "168": "faq_ask_wat_is_vaccin",
        "169": "faq_ask_wat_na_vaccinatie",
        "170": "faq_ask_welk_vaccin_krijg_ik",
        "171": "faq_ask_welke_vaccin",
        "172": "faq_ask_wie_ben_ik",
        "173": "faq_ask_wie_doet_inenting",
        "174": "faq_ask_wie_is_risicopatient",
        "175": "faq_ask_wie_nu",
        "176": "faq_ask_wilsonbekwaam",
        "177": "faq_ask_zwanger",
        "178": "get_started",
        "179": "nlu_fallback",
        "180": "test",
    }
    num_classes = 181

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeska_Vaccinchatsentenceclassifierdutch_Frombertje2(PetrainedTextClassifier):
    name = "Jeska/VaccinChatSentenceClassifierDutch_fromBERTje2"
    id2label = {
        "0": "chitchat_ask_bye",
        "1": "chitchat_ask_hi",
        "2": "chitchat_ask_hi_de",
        "3": "chitchat_ask_hi_en",
        "4": "chitchat_ask_hi_fr",
        "5": "chitchat_ask_hoe_gaat_het",
        "6": "chitchat_ask_name",
        "7": "chitchat_ask_thanks",
        "8": "faq_ask_aantal_gevaccineerd",
        "9": "faq_ask_aantal_gevaccineerd_wereldwijd",
        "10": "faq_ask_afspraak_afzeggen",
        "11": "faq_ask_afspraak_gemist",
        "12": "faq_ask_algemeen_info",
        "13": "faq_ask_allergisch_na_vaccinatie",
        "14": "faq_ask_alternatieve_medicatie",
        "15": "faq_ask_andere_vaccins",
        "16": "faq_ask_astrazeneca",
        "17": "faq_ask_astrazeneca_bij_ouderen",
        "18": "faq_ask_astrazeneca_bloedklonters",
        "19": "faq_ask_astrazeneca_prik_2",
        "20": "faq_ask_attest",
        "21": "faq_ask_autisme_na_vaccinatie",
        "22": "faq_ask_auto-immuun",
        "23": "faq_ask_begeleiding",
        "24": "faq_ask_beschermen",
        "25": "faq_ask_beschermingsduur",
        "26": "faq_ask_beschermingspercentage",
        "27": "faq_ask_besmetten_na_vaccin",
        "28": "faq_ask_betalen_voor_vaccin",
        "29": "faq_ask_betrouwbaar",
        "30": "faq_ask_betrouwbare_bronnen",
        "31": "faq_ask_bijsluiter",
        "32": "faq_ask_bijwerking_AZ",
        "33": "faq_ask_bijwerking_JJ",
        "34": "faq_ask_bijwerking_algemeen",
        "35": "faq_ask_bijwerking_lange_termijn",
        "36": "faq_ask_bijwerking_moderna",
        "37": "faq_ask_bijwerking_pfizer",
        "38": "faq_ask_bloed_geven",
        "39": "faq_ask_borstvoeding",
        "40": "faq_ask_buitenlander",
        "41": "faq_ask_chronisch_ziek",
        "42": "faq_ask_combi",
        "43": "faq_ask_complottheorie",
        "44": "faq_ask_complottheorie_5G",
        "45": "faq_ask_complottheorie_Bill_Gates",
        "46": "faq_ask_contra_ind",
        "47": "faq_ask_corona_is_griep",
        "48": "faq_ask_corona_vermijden",
        "49": "faq_ask_covid_door_vaccin",
        "50": "faq_ask_curevac",
        "51": "faq_ask_derde_prik",
        "52": "faq_ask_dna",
        "53": "faq_ask_duur_vaccinatie",
        "54": "faq_ask_eerst_weigeren",
        "55": "faq_ask_eerste_prik_buitenland",
        "56": "faq_ask_essentieel_beroep",
        "57": "faq_ask_experimenteel",
        "58": "faq_ask_foetus",
        "59": "faq_ask_geen_antwoord",
        "60": "faq_ask_geen_risicopatient",
        "61": "faq_ask_geen_uitnodiging",
        "62": "faq_ask_gestockeerd",
        "63": "faq_ask_gezondheidstoestand_gekend",
        "64": "faq_ask_gif_in_vaccin",
        "65": "faq_ask_goedkeuring",
        "66": "faq_ask_groepsimmuniteit",
        "67": "faq_ask_hartspierontsteking",
        "68": "faq_ask_hersenziekte",
        "69": "faq_ask_hoe_dodelijk",
        "70": "faq_ask_hoe_weet_overheid",
        "71": "faq_ask_hoeveel_dosissen",
        "72": "faq_ask_huisarts",
        "73": "faq_ask_huisdieren",
        "74": "faq_ask_iedereen",
        "75": "faq_ask_in_vaccin",
        "76": "faq_ask_info_vaccins",
        "77": "faq_ask_janssen",
        "78": "faq_ask_janssen_een_dosis",
        "79": "faq_ask_jong_en_gezond",
        "80": "faq_ask_keuze",
        "81": "faq_ask_keuze_vaccinatiecentrum",
        "82": "faq_ask_kinderen",
        "83": "faq_ask_kosjer_halal",
        "84": "faq_ask_leveringen",
        "85": "faq_ask_logistiek",
        "86": "faq_ask_logistiek_veilig",
        "87": "faq_ask_magnetisch",
        "88": "faq_ask_man_vrouw_verschillen",
        "89": "faq_ask_mantelzorger",
        "90": "faq_ask_maximaal_een_dosis",
        "91": "faq_ask_meer_bijwerkingen_tweede_dosis",
        "92": "faq_ask_minder_mobiel",
        "93": "faq_ask_moderna",
        "94": "faq_ask_mondmasker",
        "95": "faq_ask_motiveren",
        "96": "faq_ask_mrna_vs_andere_vaccins",
        "97": "faq_ask_naaldangst",
        "98": "faq_ask_nadelen",
        "99": "faq_ask_nuchter",
        "100": "faq_ask_ontwikkeling",
        "101": "faq_ask_onvruchtbaar",
        "102": "faq_ask_oplopen_vaccinatie",
        "103": "faq_ask_pfizer",
        "104": "faq_ask_phishing",
        "105": "faq_ask_pijnstiller",
        "106": "faq_ask_planning_eerstelijnszorg",
        "107": "faq_ask_planning_ouderen",
        "108": "faq_ask_positieve_test_na_vaccin",
        "109": "faq_ask_prioritaire_gropen",
        "110": "faq_ask_privacy",
        "111": "faq_ask_probleem_registratie",
        "112": "faq_ask_problemen_uitnodiging",
        "113": "faq_ask_quarantaine",
        "114": "faq_ask_qvax_probleem",
        "115": "faq_ask_reproductiegetal",
        "116": "faq_ask_risicopatient",
        "117": "faq_ask_risicopatient_diabetes",
        "118": "faq_ask_risicopatient_hartvaat",
        "119": "faq_ask_risicopatient_immuunziekte",
        "120": "faq_ask_risicopatient_kanker",
        "121": "faq_ask_risicopatient_luchtwegaandoening",
        "122": "faq_ask_smaakverlies",
        "123": "faq_ask_snel_ontwikkeld",
        "124": "faq_ask_sneller_aan_de_beurt",
        "125": "faq_ask_taxi",
        "126": "faq_ask_test_voor_vaccin",
        "127": "faq_ask_testen",
        "128": "faq_ask_tijd_tot_tweede_dosis",
        "129": "faq_ask_timing_andere_vaccins",
        "130": "faq_ask_trage_start",
        "131": "faq_ask_tweede_dosis_afspraak",
        "132": "faq_ask_tweede_dosis_vervroegen",
        "133": "faq_ask_twijfel_bijwerkingen",
        "134": "faq_ask_twijfel_effectiviteit",
        "135": "faq_ask_twijfel_inhoud",
        "136": "faq_ask_twijfel_ivm_vaccinatie",
        "137": "faq_ask_twijfel_noodzaak",
        "138": "faq_ask_twijfel_ontwikkeling",
        "139": "faq_ask_twijfel_praktisch",
        "140": "faq_ask_twijfel_vaccins_zelf",
        "141": "faq_ask_twijfel_vrijheid",
        "142": "faq_ask_uit_flacon",
        "143": "faq_ask_uitnodiging_afspraak_kwijt",
        "144": "faq_ask_uitnodiging_na_vaccinatie",
        "145": "faq_ask_vaccin_doorgeven",
        "146": "faq_ask_vaccin_immuunsysteem",
        "147": "faq_ask_vaccin_variant",
        "148": "faq_ask_vaccinatiecentrum",
        "149": "faq_ask_vaccine_covid_gehad",
        "150": "faq_ask_vaccine_covid_gehad_effect",
        "151": "faq_ask_vakantie",
        "152": "faq_ask_veelgestelde_vragen",
        "153": "faq_ask_vegan",
        "154": "faq_ask_verplicht",
        "155": "faq_ask_verschillen",
        "156": "faq_ask_vrijwillig_Janssen",
        "157": "faq_ask_vrijwilliger",
        "158": "faq_ask_waar_en_wanneer",
        "159": "faq_ask_waarom",
        "160": "faq_ask_waarom_niet_verplicht",
        "161": "faq_ask_waarom_ouderen_eerst",
        "162": "faq_ask_waarom_twee_prikken",
        "163": "faq_ask_waarom_twijfel",
        "164": "faq_ask_wanneer_algemene_bevolking",
        "165": "faq_ask_wanneer_iedereen_gevaccineerd",
        "166": "faq_ask_wat_is_corona",
        "167": "faq_ask_wat_is_rna",
        "168": "faq_ask_wat_is_vaccin",
        "169": "faq_ask_wat_na_vaccinatie",
        "170": "faq_ask_welk_vaccin_krijg_ik",
        "171": "faq_ask_welke_vaccin",
        "172": "faq_ask_wie_ben_ik",
        "173": "faq_ask_wie_doet_inenting",
        "174": "faq_ask_wie_is_risicopatient",
        "175": "faq_ask_wie_nu",
        "176": "faq_ask_wilsonbekwaam",
        "177": "faq_ask_zwanger",
        "178": "get_started",
        "179": "nlu_fallback",
        "180": "test",
    }
    num_classes = 181

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeska_Vaccinchatsentenceclassifierdutch_Frombertje2_Dadialog(
    PetrainedTextClassifier
):
    name = "Jeska/VaccinChatSentenceClassifierDutch_fromBERTje2_DAdialog"
    id2label = {
        "0": "chitchat_ask_bye",
        "1": "chitchat_ask_hi",
        "2": "chitchat_ask_hi_de",
        "3": "chitchat_ask_hi_en",
        "4": "chitchat_ask_hi_fr",
        "5": "chitchat_ask_hoe_gaat_het",
        "6": "chitchat_ask_name",
        "7": "chitchat_ask_thanks",
        "8": "faq_ask_aantal_gevaccineerd",
        "9": "faq_ask_aantal_gevaccineerd_wereldwijd",
        "10": "faq_ask_afspraak_afzeggen",
        "11": "faq_ask_afspraak_gemist",
        "12": "faq_ask_algemeen_info",
        "13": "faq_ask_allergisch_na_vaccinatie",
        "14": "faq_ask_alternatieve_medicatie",
        "15": "faq_ask_andere_vaccins",
        "16": "faq_ask_astrazeneca",
        "17": "faq_ask_astrazeneca_bij_ouderen",
        "18": "faq_ask_astrazeneca_bloedklonters",
        "19": "faq_ask_astrazeneca_prik_2",
        "20": "faq_ask_attest",
        "21": "faq_ask_autisme_na_vaccinatie",
        "22": "faq_ask_auto-immuun",
        "23": "faq_ask_begeleiding",
        "24": "faq_ask_beschermen",
        "25": "faq_ask_beschermingsduur",
        "26": "faq_ask_beschermingspercentage",
        "27": "faq_ask_besmetten_na_vaccin",
        "28": "faq_ask_betalen_voor_vaccin",
        "29": "faq_ask_betrouwbaar",
        "30": "faq_ask_betrouwbare_bronnen",
        "31": "faq_ask_bijsluiter",
        "32": "faq_ask_bijwerking_AZ",
        "33": "faq_ask_bijwerking_JJ",
        "34": "faq_ask_bijwerking_algemeen",
        "35": "faq_ask_bijwerking_lange_termijn",
        "36": "faq_ask_bijwerking_moderna",
        "37": "faq_ask_bijwerking_pfizer",
        "38": "faq_ask_bloed_geven",
        "39": "faq_ask_borstvoeding",
        "40": "faq_ask_buitenlander",
        "41": "faq_ask_chronisch_ziek",
        "42": "faq_ask_combi",
        "43": "faq_ask_complottheorie",
        "44": "faq_ask_complottheorie_5G",
        "45": "faq_ask_complottheorie_Bill_Gates",
        "46": "faq_ask_contra_ind",
        "47": "faq_ask_corona_is_griep",
        "48": "faq_ask_corona_vermijden",
        "49": "faq_ask_covid_door_vaccin",
        "50": "faq_ask_curevac",
        "51": "faq_ask_derde_prik",
        "52": "faq_ask_dna",
        "53": "faq_ask_duur_vaccinatie",
        "54": "faq_ask_eerst_weigeren",
        "55": "faq_ask_eerste_prik_buitenland",
        "56": "faq_ask_essentieel_beroep",
        "57": "faq_ask_experimenteel",
        "58": "faq_ask_foetus",
        "59": "faq_ask_geen_antwoord",
        "60": "faq_ask_geen_risicopatient",
        "61": "faq_ask_geen_uitnodiging",
        "62": "faq_ask_gestockeerd",
        "63": "faq_ask_gezondheidstoestand_gekend",
        "64": "faq_ask_gif_in_vaccin",
        "65": "faq_ask_goedkeuring",
        "66": "faq_ask_groepsimmuniteit",
        "67": "faq_ask_hartspierontsteking",
        "68": "faq_ask_hersenziekte",
        "69": "faq_ask_hoe_dodelijk",
        "70": "faq_ask_hoe_weet_overheid",
        "71": "faq_ask_hoeveel_dosissen",
        "72": "faq_ask_huisarts",
        "73": "faq_ask_huisdieren",
        "74": "faq_ask_iedereen",
        "75": "faq_ask_in_vaccin",
        "76": "faq_ask_info_vaccins",
        "77": "faq_ask_janssen",
        "78": "faq_ask_janssen_een_dosis",
        "79": "faq_ask_jong_en_gezond",
        "80": "faq_ask_keuze",
        "81": "faq_ask_keuze_vaccinatiecentrum",
        "82": "faq_ask_kinderen",
        "83": "faq_ask_kosjer_halal",
        "84": "faq_ask_leveringen",
        "85": "faq_ask_logistiek",
        "86": "faq_ask_logistiek_veilig",
        "87": "faq_ask_magnetisch",
        "88": "faq_ask_man_vrouw_verschillen",
        "89": "faq_ask_mantelzorger",
        "90": "faq_ask_maximaal_een_dosis",
        "91": "faq_ask_meer_bijwerkingen_tweede_dosis",
        "92": "faq_ask_minder_mobiel",
        "93": "faq_ask_moderna",
        "94": "faq_ask_mondmasker",
        "95": "faq_ask_motiveren",
        "96": "faq_ask_mrna_vs_andere_vaccins",
        "97": "faq_ask_naaldangst",
        "98": "faq_ask_nadelen",
        "99": "faq_ask_nuchter",
        "100": "faq_ask_ontwikkeling",
        "101": "faq_ask_onvruchtbaar",
        "102": "faq_ask_oplopen_vaccinatie",
        "103": "faq_ask_pfizer",
        "104": "faq_ask_phishing",
        "105": "faq_ask_pijnstiller",
        "106": "faq_ask_planning_eerstelijnszorg",
        "107": "faq_ask_planning_ouderen",
        "108": "faq_ask_positieve_test_na_vaccin",
        "109": "faq_ask_prioritaire_gropen",
        "110": "faq_ask_privacy",
        "111": "faq_ask_probleem_registratie",
        "112": "faq_ask_problemen_uitnodiging",
        "113": "faq_ask_quarantaine",
        "114": "faq_ask_qvax_probleem",
        "115": "faq_ask_reproductiegetal",
        "116": "faq_ask_risicopatient",
        "117": "faq_ask_risicopatient_diabetes",
        "118": "faq_ask_risicopatient_hartvaat",
        "119": "faq_ask_risicopatient_immuunziekte",
        "120": "faq_ask_risicopatient_kanker",
        "121": "faq_ask_risicopatient_luchtwegaandoening",
        "122": "faq_ask_smaakverlies",
        "123": "faq_ask_snel_ontwikkeld",
        "124": "faq_ask_sneller_aan_de_beurt",
        "125": "faq_ask_taxi",
        "126": "faq_ask_test_voor_vaccin",
        "127": "faq_ask_testen",
        "128": "faq_ask_tijd_tot_tweede_dosis",
        "129": "faq_ask_timing_andere_vaccins",
        "130": "faq_ask_trage_start",
        "131": "faq_ask_tweede_dosis_afspraak",
        "132": "faq_ask_tweede_dosis_vervroegen",
        "133": "faq_ask_twijfel_bijwerkingen",
        "134": "faq_ask_twijfel_effectiviteit",
        "135": "faq_ask_twijfel_inhoud",
        "136": "faq_ask_twijfel_ivm_vaccinatie",
        "137": "faq_ask_twijfel_noodzaak",
        "138": "faq_ask_twijfel_ontwikkeling",
        "139": "faq_ask_twijfel_praktisch",
        "140": "faq_ask_twijfel_vaccins_zelf",
        "141": "faq_ask_twijfel_vrijheid",
        "142": "faq_ask_uit_flacon",
        "143": "faq_ask_uitnodiging_afspraak_kwijt",
        "144": "faq_ask_uitnodiging_na_vaccinatie",
        "145": "faq_ask_vaccin_doorgeven",
        "146": "faq_ask_vaccin_immuunsysteem",
        "147": "faq_ask_vaccin_variant",
        "148": "faq_ask_vaccinatiecentrum",
        "149": "faq_ask_vaccine_covid_gehad",
        "150": "faq_ask_vaccine_covid_gehad_effect",
        "151": "faq_ask_vakantie",
        "152": "faq_ask_veelgestelde_vragen",
        "153": "faq_ask_vegan",
        "154": "faq_ask_verplicht",
        "155": "faq_ask_verschillen",
        "156": "faq_ask_vrijwillig_Janssen",
        "157": "faq_ask_vrijwilliger",
        "158": "faq_ask_waar_en_wanneer",
        "159": "faq_ask_waarom",
        "160": "faq_ask_waarom_niet_verplicht",
        "161": "faq_ask_waarom_ouderen_eerst",
        "162": "faq_ask_waarom_twee_prikken",
        "163": "faq_ask_waarom_twijfel",
        "164": "faq_ask_wanneer_algemene_bevolking",
        "165": "faq_ask_wanneer_iedereen_gevaccineerd",
        "166": "faq_ask_wat_is_corona",
        "167": "faq_ask_wat_is_rna",
        "168": "faq_ask_wat_is_vaccin",
        "169": "faq_ask_wat_na_vaccinatie",
        "170": "faq_ask_welk_vaccin_krijg_ik",
        "171": "faq_ask_welke_vaccin",
        "172": "faq_ask_wie_ben_ik",
        "173": "faq_ask_wie_doet_inenting",
        "174": "faq_ask_wie_is_risicopatient",
        "175": "faq_ask_wie_nu",
        "176": "faq_ask_wilsonbekwaam",
        "177": "faq_ask_zwanger",
        "178": "get_started",
        "179": "nlu_fallback",
        "180": "test",
    }
    num_classes = 181

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeska_Vaccinchatsentenceclassifierdutch_Frombertje2_Dadialog02(
    PetrainedTextClassifier
):
    name = "Jeska/VaccinChatSentenceClassifierDutch_fromBERTje2_DAdialog02"
    id2label = {
        "0": "chitchat_ask_bye",
        "1": "chitchat_ask_hi",
        "2": "chitchat_ask_hi_de",
        "3": "chitchat_ask_hi_en",
        "4": "chitchat_ask_hi_fr",
        "5": "chitchat_ask_hoe_gaat_het",
        "6": "chitchat_ask_name",
        "7": "chitchat_ask_thanks",
        "8": "faq_ask_aantal_gevaccineerd",
        "9": "faq_ask_aantal_gevaccineerd_wereldwijd",
        "10": "faq_ask_afspraak_afzeggen",
        "11": "faq_ask_afspraak_gemist",
        "12": "faq_ask_algemeen_info",
        "13": "faq_ask_allergisch_na_vaccinatie",
        "14": "faq_ask_alternatieve_medicatie",
        "15": "faq_ask_andere_vaccins",
        "16": "faq_ask_astrazeneca",
        "17": "faq_ask_astrazeneca_bij_ouderen",
        "18": "faq_ask_astrazeneca_bloedklonters",
        "19": "faq_ask_astrazeneca_prik_2",
        "20": "faq_ask_attest",
        "21": "faq_ask_autisme_na_vaccinatie",
        "22": "faq_ask_auto-immuun",
        "23": "faq_ask_begeleiding",
        "24": "faq_ask_beschermen",
        "25": "faq_ask_beschermingsduur",
        "26": "faq_ask_beschermingspercentage",
        "27": "faq_ask_besmetten_na_vaccin",
        "28": "faq_ask_betalen_voor_vaccin",
        "29": "faq_ask_betrouwbaar",
        "30": "faq_ask_betrouwbare_bronnen",
        "31": "faq_ask_bijsluiter",
        "32": "faq_ask_bijwerking_AZ",
        "33": "faq_ask_bijwerking_JJ",
        "34": "faq_ask_bijwerking_algemeen",
        "35": "faq_ask_bijwerking_lange_termijn",
        "36": "faq_ask_bijwerking_moderna",
        "37": "faq_ask_bijwerking_pfizer",
        "38": "faq_ask_bloed_geven",
        "39": "faq_ask_borstvoeding",
        "40": "faq_ask_buitenlander",
        "41": "faq_ask_chronisch_ziek",
        "42": "faq_ask_combi",
        "43": "faq_ask_complottheorie",
        "44": "faq_ask_complottheorie_5G",
        "45": "faq_ask_complottheorie_Bill_Gates",
        "46": "faq_ask_contra_ind",
        "47": "faq_ask_corona_is_griep",
        "48": "faq_ask_corona_vermijden",
        "49": "faq_ask_covid_door_vaccin",
        "50": "faq_ask_curevac",
        "51": "faq_ask_derde_prik",
        "52": "faq_ask_dna",
        "53": "faq_ask_duur_vaccinatie",
        "54": "faq_ask_eerst_weigeren",
        "55": "faq_ask_eerste_prik_buitenland",
        "56": "faq_ask_essentieel_beroep",
        "57": "faq_ask_experimenteel",
        "58": "faq_ask_foetus",
        "59": "faq_ask_geen_antwoord",
        "60": "faq_ask_geen_risicopatient",
        "61": "faq_ask_geen_uitnodiging",
        "62": "faq_ask_gestockeerd",
        "63": "faq_ask_gezondheidstoestand_gekend",
        "64": "faq_ask_gif_in_vaccin",
        "65": "faq_ask_goedkeuring",
        "66": "faq_ask_groepsimmuniteit",
        "67": "faq_ask_hartspierontsteking",
        "68": "faq_ask_hersenziekte",
        "69": "faq_ask_hoe_dodelijk",
        "70": "faq_ask_hoe_weet_overheid",
        "71": "faq_ask_hoeveel_dosissen",
        "72": "faq_ask_huisarts",
        "73": "faq_ask_huisdieren",
        "74": "faq_ask_iedereen",
        "75": "faq_ask_in_vaccin",
        "76": "faq_ask_info_vaccins",
        "77": "faq_ask_janssen",
        "78": "faq_ask_janssen_een_dosis",
        "79": "faq_ask_jong_en_gezond",
        "80": "faq_ask_keuze",
        "81": "faq_ask_keuze_vaccinatiecentrum",
        "82": "faq_ask_kinderen",
        "83": "faq_ask_kosjer_halal",
        "84": "faq_ask_leveringen",
        "85": "faq_ask_logistiek",
        "86": "faq_ask_logistiek_veilig",
        "87": "faq_ask_magnetisch",
        "88": "faq_ask_man_vrouw_verschillen",
        "89": "faq_ask_mantelzorger",
        "90": "faq_ask_maximaal_een_dosis",
        "91": "faq_ask_meer_bijwerkingen_tweede_dosis",
        "92": "faq_ask_minder_mobiel",
        "93": "faq_ask_moderna",
        "94": "faq_ask_mondmasker",
        "95": "faq_ask_motiveren",
        "96": "faq_ask_mrna_vs_andere_vaccins",
        "97": "faq_ask_naaldangst",
        "98": "faq_ask_nadelen",
        "99": "faq_ask_nuchter",
        "100": "faq_ask_ontwikkeling",
        "101": "faq_ask_onvruchtbaar",
        "102": "faq_ask_oplopen_vaccinatie",
        "103": "faq_ask_pfizer",
        "104": "faq_ask_phishing",
        "105": "faq_ask_pijnstiller",
        "106": "faq_ask_planning_eerstelijnszorg",
        "107": "faq_ask_planning_ouderen",
        "108": "faq_ask_positieve_test_na_vaccin",
        "109": "faq_ask_prioritaire_gropen",
        "110": "faq_ask_privacy",
        "111": "faq_ask_probleem_registratie",
        "112": "faq_ask_problemen_uitnodiging",
        "113": "faq_ask_quarantaine",
        "114": "faq_ask_qvax_probleem",
        "115": "faq_ask_reproductiegetal",
        "116": "faq_ask_risicopatient",
        "117": "faq_ask_risicopatient_diabetes",
        "118": "faq_ask_risicopatient_hartvaat",
        "119": "faq_ask_risicopatient_immuunziekte",
        "120": "faq_ask_risicopatient_kanker",
        "121": "faq_ask_risicopatient_luchtwegaandoening",
        "122": "faq_ask_smaakverlies",
        "123": "faq_ask_snel_ontwikkeld",
        "124": "faq_ask_sneller_aan_de_beurt",
        "125": "faq_ask_taxi",
        "126": "faq_ask_test_voor_vaccin",
        "127": "faq_ask_testen",
        "128": "faq_ask_tijd_tot_tweede_dosis",
        "129": "faq_ask_timing_andere_vaccins",
        "130": "faq_ask_trage_start",
        "131": "faq_ask_tweede_dosis_afspraak",
        "132": "faq_ask_tweede_dosis_vervroegen",
        "133": "faq_ask_twijfel_bijwerkingen",
        "134": "faq_ask_twijfel_effectiviteit",
        "135": "faq_ask_twijfel_inhoud",
        "136": "faq_ask_twijfel_ivm_vaccinatie",
        "137": "faq_ask_twijfel_noodzaak",
        "138": "faq_ask_twijfel_ontwikkeling",
        "139": "faq_ask_twijfel_praktisch",
        "140": "faq_ask_twijfel_vaccins_zelf",
        "141": "faq_ask_twijfel_vrijheid",
        "142": "faq_ask_uit_flacon",
        "143": "faq_ask_uitnodiging_afspraak_kwijt",
        "144": "faq_ask_uitnodiging_na_vaccinatie",
        "145": "faq_ask_vaccin_doorgeven",
        "146": "faq_ask_vaccin_immuunsysteem",
        "147": "faq_ask_vaccin_variant",
        "148": "faq_ask_vaccinatiecentrum",
        "149": "faq_ask_vaccine_covid_gehad",
        "150": "faq_ask_vaccine_covid_gehad_effect",
        "151": "faq_ask_vakantie",
        "152": "faq_ask_veelgestelde_vragen",
        "153": "faq_ask_vegan",
        "154": "faq_ask_verplicht",
        "155": "faq_ask_verschillen",
        "156": "faq_ask_vrijwillig_Janssen",
        "157": "faq_ask_vrijwilliger",
        "158": "faq_ask_waar_en_wanneer",
        "159": "faq_ask_waarom",
        "160": "faq_ask_waarom_niet_verplicht",
        "161": "faq_ask_waarom_ouderen_eerst",
        "162": "faq_ask_waarom_twee_prikken",
        "163": "faq_ask_waarom_twijfel",
        "164": "faq_ask_wanneer_algemene_bevolking",
        "165": "faq_ask_wanneer_iedereen_gevaccineerd",
        "166": "faq_ask_wat_is_corona",
        "167": "faq_ask_wat_is_rna",
        "168": "faq_ask_wat_is_vaccin",
        "169": "faq_ask_wat_na_vaccinatie",
        "170": "faq_ask_welk_vaccin_krijg_ik",
        "171": "faq_ask_welke_vaccin",
        "172": "faq_ask_wie_ben_ik",
        "173": "faq_ask_wie_doet_inenting",
        "174": "faq_ask_wie_is_risicopatient",
        "175": "faq_ask_wie_nu",
        "176": "faq_ask_wilsonbekwaam",
        "177": "faq_ask_zwanger",
        "178": "get_started",
        "179": "nlu_fallback",
        "180": "test",
    }
    num_classes = 181

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeska_Vaccinchatsentenceclassifierdutch_Frombertje2_Dadialogqonly(
    PetrainedTextClassifier
):
    name = "Jeska/VaccinChatSentenceClassifierDutch_fromBERTje2_DAdialogQonly"
    id2label = {
        "0": "chitchat_ask_bye",
        "1": "chitchat_ask_hi",
        "2": "chitchat_ask_hi_de",
        "3": "chitchat_ask_hi_en",
        "4": "chitchat_ask_hi_fr",
        "5": "chitchat_ask_hoe_gaat_het",
        "6": "chitchat_ask_name",
        "7": "chitchat_ask_thanks",
        "8": "faq_ask_aantal_gevaccineerd",
        "9": "faq_ask_aantal_gevaccineerd_wereldwijd",
        "10": "faq_ask_afspraak_afzeggen",
        "11": "faq_ask_afspraak_gemist",
        "12": "faq_ask_algemeen_info",
        "13": "faq_ask_allergisch_na_vaccinatie",
        "14": "faq_ask_alternatieve_medicatie",
        "15": "faq_ask_andere_vaccins",
        "16": "faq_ask_astrazeneca",
        "17": "faq_ask_astrazeneca_bij_ouderen",
        "18": "faq_ask_astrazeneca_bloedklonters",
        "19": "faq_ask_astrazeneca_prik_2",
        "20": "faq_ask_attest",
        "21": "faq_ask_autisme_na_vaccinatie",
        "22": "faq_ask_auto-immuun",
        "23": "faq_ask_begeleiding",
        "24": "faq_ask_beschermen",
        "25": "faq_ask_beschermingsduur",
        "26": "faq_ask_beschermingspercentage",
        "27": "faq_ask_besmetten_na_vaccin",
        "28": "faq_ask_betalen_voor_vaccin",
        "29": "faq_ask_betrouwbaar",
        "30": "faq_ask_betrouwbare_bronnen",
        "31": "faq_ask_bijsluiter",
        "32": "faq_ask_bijwerking_AZ",
        "33": "faq_ask_bijwerking_JJ",
        "34": "faq_ask_bijwerking_algemeen",
        "35": "faq_ask_bijwerking_lange_termijn",
        "36": "faq_ask_bijwerking_moderna",
        "37": "faq_ask_bijwerking_pfizer",
        "38": "faq_ask_bloed_geven",
        "39": "faq_ask_borstvoeding",
        "40": "faq_ask_buitenlander",
        "41": "faq_ask_chronisch_ziek",
        "42": "faq_ask_combi",
        "43": "faq_ask_complottheorie",
        "44": "faq_ask_complottheorie_5G",
        "45": "faq_ask_complottheorie_Bill_Gates",
        "46": "faq_ask_contra_ind",
        "47": "faq_ask_corona_is_griep",
        "48": "faq_ask_corona_vermijden",
        "49": "faq_ask_covid_door_vaccin",
        "50": "faq_ask_curevac",
        "51": "faq_ask_derde_prik",
        "52": "faq_ask_dna",
        "53": "faq_ask_duur_vaccinatie",
        "54": "faq_ask_eerst_weigeren",
        "55": "faq_ask_eerste_prik_buitenland",
        "56": "faq_ask_essentieel_beroep",
        "57": "faq_ask_experimenteel",
        "58": "faq_ask_foetus",
        "59": "faq_ask_geen_antwoord",
        "60": "faq_ask_geen_risicopatient",
        "61": "faq_ask_geen_uitnodiging",
        "62": "faq_ask_gestockeerd",
        "63": "faq_ask_gezondheidstoestand_gekend",
        "64": "faq_ask_gif_in_vaccin",
        "65": "faq_ask_goedkeuring",
        "66": "faq_ask_groepsimmuniteit",
        "67": "faq_ask_hartspierontsteking",
        "68": "faq_ask_hersenziekte",
        "69": "faq_ask_hoe_dodelijk",
        "70": "faq_ask_hoe_weet_overheid",
        "71": "faq_ask_hoeveel_dosissen",
        "72": "faq_ask_huisarts",
        "73": "faq_ask_huisdieren",
        "74": "faq_ask_iedereen",
        "75": "faq_ask_in_vaccin",
        "76": "faq_ask_info_vaccins",
        "77": "faq_ask_janssen",
        "78": "faq_ask_janssen_een_dosis",
        "79": "faq_ask_jong_en_gezond",
        "80": "faq_ask_keuze",
        "81": "faq_ask_keuze_vaccinatiecentrum",
        "82": "faq_ask_kinderen",
        "83": "faq_ask_kosjer_halal",
        "84": "faq_ask_leveringen",
        "85": "faq_ask_logistiek",
        "86": "faq_ask_logistiek_veilig",
        "87": "faq_ask_magnetisch",
        "88": "faq_ask_man_vrouw_verschillen",
        "89": "faq_ask_mantelzorger",
        "90": "faq_ask_maximaal_een_dosis",
        "91": "faq_ask_meer_bijwerkingen_tweede_dosis",
        "92": "faq_ask_minder_mobiel",
        "93": "faq_ask_moderna",
        "94": "faq_ask_mondmasker",
        "95": "faq_ask_motiveren",
        "96": "faq_ask_mrna_vs_andere_vaccins",
        "97": "faq_ask_naaldangst",
        "98": "faq_ask_nadelen",
        "99": "faq_ask_nuchter",
        "100": "faq_ask_ontwikkeling",
        "101": "faq_ask_onvruchtbaar",
        "102": "faq_ask_oplopen_vaccinatie",
        "103": "faq_ask_pfizer",
        "104": "faq_ask_phishing",
        "105": "faq_ask_pijnstiller",
        "106": "faq_ask_planning_eerstelijnszorg",
        "107": "faq_ask_planning_ouderen",
        "108": "faq_ask_positieve_test_na_vaccin",
        "109": "faq_ask_prioritaire_gropen",
        "110": "faq_ask_privacy",
        "111": "faq_ask_probleem_registratie",
        "112": "faq_ask_problemen_uitnodiging",
        "113": "faq_ask_quarantaine",
        "114": "faq_ask_qvax_probleem",
        "115": "faq_ask_reproductiegetal",
        "116": "faq_ask_risicopatient",
        "117": "faq_ask_risicopatient_diabetes",
        "118": "faq_ask_risicopatient_hartvaat",
        "119": "faq_ask_risicopatient_immuunziekte",
        "120": "faq_ask_risicopatient_kanker",
        "121": "faq_ask_risicopatient_luchtwegaandoening",
        "122": "faq_ask_smaakverlies",
        "123": "faq_ask_snel_ontwikkeld",
        "124": "faq_ask_sneller_aan_de_beurt",
        "125": "faq_ask_taxi",
        "126": "faq_ask_test_voor_vaccin",
        "127": "faq_ask_testen",
        "128": "faq_ask_tijd_tot_tweede_dosis",
        "129": "faq_ask_timing_andere_vaccins",
        "130": "faq_ask_trage_start",
        "131": "faq_ask_tweede_dosis_afspraak",
        "132": "faq_ask_tweede_dosis_vervroegen",
        "133": "faq_ask_twijfel_bijwerkingen",
        "134": "faq_ask_twijfel_effectiviteit",
        "135": "faq_ask_twijfel_inhoud",
        "136": "faq_ask_twijfel_ivm_vaccinatie",
        "137": "faq_ask_twijfel_noodzaak",
        "138": "faq_ask_twijfel_ontwikkeling",
        "139": "faq_ask_twijfel_praktisch",
        "140": "faq_ask_twijfel_vaccins_zelf",
        "141": "faq_ask_twijfel_vrijheid",
        "142": "faq_ask_uit_flacon",
        "143": "faq_ask_uitnodiging_afspraak_kwijt",
        "144": "faq_ask_uitnodiging_na_vaccinatie",
        "145": "faq_ask_vaccin_doorgeven",
        "146": "faq_ask_vaccin_immuunsysteem",
        "147": "faq_ask_vaccin_variant",
        "148": "faq_ask_vaccinatiecentrum",
        "149": "faq_ask_vaccine_covid_gehad",
        "150": "faq_ask_vaccine_covid_gehad_effect",
        "151": "faq_ask_vakantie",
        "152": "faq_ask_veelgestelde_vragen",
        "153": "faq_ask_vegan",
        "154": "faq_ask_verplicht",
        "155": "faq_ask_verschillen",
        "156": "faq_ask_vrijwillig_Janssen",
        "157": "faq_ask_vrijwilliger",
        "158": "faq_ask_waar_en_wanneer",
        "159": "faq_ask_waarom",
        "160": "faq_ask_waarom_niet_verplicht",
        "161": "faq_ask_waarom_ouderen_eerst",
        "162": "faq_ask_waarom_twee_prikken",
        "163": "faq_ask_waarom_twijfel",
        "164": "faq_ask_wanneer_algemene_bevolking",
        "165": "faq_ask_wanneer_iedereen_gevaccineerd",
        "166": "faq_ask_wat_is_corona",
        "167": "faq_ask_wat_is_rna",
        "168": "faq_ask_wat_is_vaccin",
        "169": "faq_ask_wat_na_vaccinatie",
        "170": "faq_ask_welk_vaccin_krijg_ik",
        "171": "faq_ask_welke_vaccin",
        "172": "faq_ask_wie_ben_ik",
        "173": "faq_ask_wie_doet_inenting",
        "174": "faq_ask_wie_is_risicopatient",
        "175": "faq_ask_wie_nu",
        "176": "faq_ask_wilsonbekwaam",
        "177": "faq_ask_zwanger",
        "178": "get_started",
        "179": "nlu_fallback",
        "180": "test",
    }
    num_classes = 181

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeska_Vaccinchatsentenceclassifierdutch_Frombertje2_Dadialogqonly09(
    PetrainedTextClassifier
):
    name = "Jeska/VaccinChatSentenceClassifierDutch_fromBERTje2_DAdialogQonly09"
    id2label = {
        "0": "chitchat_ask_bye",
        "1": "chitchat_ask_hi",
        "2": "chitchat_ask_hi_de",
        "3": "chitchat_ask_hi_en",
        "4": "chitchat_ask_hi_fr",
        "5": "chitchat_ask_hoe_gaat_het",
        "6": "chitchat_ask_name",
        "7": "chitchat_ask_thanks",
        "8": "faq_ask_aantal_gevaccineerd",
        "9": "faq_ask_aantal_gevaccineerd_wereldwijd",
        "10": "faq_ask_afspraak_afzeggen",
        "11": "faq_ask_afspraak_gemist",
        "12": "faq_ask_algemeen_info",
        "13": "faq_ask_allergisch_na_vaccinatie",
        "14": "faq_ask_alternatieve_medicatie",
        "15": "faq_ask_andere_vaccins",
        "16": "faq_ask_astrazeneca",
        "17": "faq_ask_astrazeneca_bij_ouderen",
        "18": "faq_ask_astrazeneca_bloedklonters",
        "19": "faq_ask_astrazeneca_prik_2",
        "20": "faq_ask_attest",
        "21": "faq_ask_autisme_na_vaccinatie",
        "22": "faq_ask_auto-immuun",
        "23": "faq_ask_begeleiding",
        "24": "faq_ask_beschermen",
        "25": "faq_ask_beschermingsduur",
        "26": "faq_ask_beschermingspercentage",
        "27": "faq_ask_besmetten_na_vaccin",
        "28": "faq_ask_betalen_voor_vaccin",
        "29": "faq_ask_betrouwbaar",
        "30": "faq_ask_betrouwbare_bronnen",
        "31": "faq_ask_bijsluiter",
        "32": "faq_ask_bijwerking_AZ",
        "33": "faq_ask_bijwerking_JJ",
        "34": "faq_ask_bijwerking_algemeen",
        "35": "faq_ask_bijwerking_lange_termijn",
        "36": "faq_ask_bijwerking_moderna",
        "37": "faq_ask_bijwerking_pfizer",
        "38": "faq_ask_bloed_geven",
        "39": "faq_ask_borstvoeding",
        "40": "faq_ask_buitenlander",
        "41": "faq_ask_chronisch_ziek",
        "42": "faq_ask_combi",
        "43": "faq_ask_complottheorie",
        "44": "faq_ask_complottheorie_5G",
        "45": "faq_ask_complottheorie_Bill_Gates",
        "46": "faq_ask_contra_ind",
        "47": "faq_ask_corona_is_griep",
        "48": "faq_ask_corona_vermijden",
        "49": "faq_ask_covid_door_vaccin",
        "50": "faq_ask_curevac",
        "51": "faq_ask_derde_prik",
        "52": "faq_ask_dna",
        "53": "faq_ask_duur_vaccinatie",
        "54": "faq_ask_eerst_weigeren",
        "55": "faq_ask_eerste_prik_buitenland",
        "56": "faq_ask_essentieel_beroep",
        "57": "faq_ask_experimenteel",
        "58": "faq_ask_foetus",
        "59": "faq_ask_geen_antwoord",
        "60": "faq_ask_geen_risicopatient",
        "61": "faq_ask_geen_uitnodiging",
        "62": "faq_ask_gestockeerd",
        "63": "faq_ask_gezondheidstoestand_gekend",
        "64": "faq_ask_gif_in_vaccin",
        "65": "faq_ask_goedkeuring",
        "66": "faq_ask_groepsimmuniteit",
        "67": "faq_ask_hartspierontsteking",
        "68": "faq_ask_hersenziekte",
        "69": "faq_ask_hoe_dodelijk",
        "70": "faq_ask_hoe_weet_overheid",
        "71": "faq_ask_hoeveel_dosissen",
        "72": "faq_ask_huisarts",
        "73": "faq_ask_huisdieren",
        "74": "faq_ask_iedereen",
        "75": "faq_ask_in_vaccin",
        "76": "faq_ask_info_vaccins",
        "77": "faq_ask_janssen",
        "78": "faq_ask_janssen_een_dosis",
        "79": "faq_ask_jong_en_gezond",
        "80": "faq_ask_keuze",
        "81": "faq_ask_keuze_vaccinatiecentrum",
        "82": "faq_ask_kinderen",
        "83": "faq_ask_kosjer_halal",
        "84": "faq_ask_leveringen",
        "85": "faq_ask_logistiek",
        "86": "faq_ask_logistiek_veilig",
        "87": "faq_ask_magnetisch",
        "88": "faq_ask_man_vrouw_verschillen",
        "89": "faq_ask_mantelzorger",
        "90": "faq_ask_maximaal_een_dosis",
        "91": "faq_ask_meer_bijwerkingen_tweede_dosis",
        "92": "faq_ask_minder_mobiel",
        "93": "faq_ask_moderna",
        "94": "faq_ask_mondmasker",
        "95": "faq_ask_motiveren",
        "96": "faq_ask_mrna_vs_andere_vaccins",
        "97": "faq_ask_naaldangst",
        "98": "faq_ask_nadelen",
        "99": "faq_ask_nuchter",
        "100": "faq_ask_ontwikkeling",
        "101": "faq_ask_onvruchtbaar",
        "102": "faq_ask_oplopen_vaccinatie",
        "103": "faq_ask_pfizer",
        "104": "faq_ask_phishing",
        "105": "faq_ask_pijnstiller",
        "106": "faq_ask_planning_eerstelijnszorg",
        "107": "faq_ask_planning_ouderen",
        "108": "faq_ask_positieve_test_na_vaccin",
        "109": "faq_ask_prioritaire_gropen",
        "110": "faq_ask_privacy",
        "111": "faq_ask_probleem_registratie",
        "112": "faq_ask_problemen_uitnodiging",
        "113": "faq_ask_quarantaine",
        "114": "faq_ask_qvax_probleem",
        "115": "faq_ask_reproductiegetal",
        "116": "faq_ask_risicopatient",
        "117": "faq_ask_risicopatient_diabetes",
        "118": "faq_ask_risicopatient_hartvaat",
        "119": "faq_ask_risicopatient_immuunziekte",
        "120": "faq_ask_risicopatient_kanker",
        "121": "faq_ask_risicopatient_luchtwegaandoening",
        "122": "faq_ask_smaakverlies",
        "123": "faq_ask_snel_ontwikkeld",
        "124": "faq_ask_sneller_aan_de_beurt",
        "125": "faq_ask_taxi",
        "126": "faq_ask_test_voor_vaccin",
        "127": "faq_ask_testen",
        "128": "faq_ask_tijd_tot_tweede_dosis",
        "129": "faq_ask_timing_andere_vaccins",
        "130": "faq_ask_trage_start",
        "131": "faq_ask_tweede_dosis_afspraak",
        "132": "faq_ask_tweede_dosis_vervroegen",
        "133": "faq_ask_twijfel_bijwerkingen",
        "134": "faq_ask_twijfel_effectiviteit",
        "135": "faq_ask_twijfel_inhoud",
        "136": "faq_ask_twijfel_ivm_vaccinatie",
        "137": "faq_ask_twijfel_noodzaak",
        "138": "faq_ask_twijfel_ontwikkeling",
        "139": "faq_ask_twijfel_praktisch",
        "140": "faq_ask_twijfel_vaccins_zelf",
        "141": "faq_ask_twijfel_vrijheid",
        "142": "faq_ask_uit_flacon",
        "143": "faq_ask_uitnodiging_afspraak_kwijt",
        "144": "faq_ask_uitnodiging_na_vaccinatie",
        "145": "faq_ask_vaccin_doorgeven",
        "146": "faq_ask_vaccin_immuunsysteem",
        "147": "faq_ask_vaccin_variant",
        "148": "faq_ask_vaccinatiecentrum",
        "149": "faq_ask_vaccine_covid_gehad",
        "150": "faq_ask_vaccine_covid_gehad_effect",
        "151": "faq_ask_vakantie",
        "152": "faq_ask_veelgestelde_vragen",
        "153": "faq_ask_vegan",
        "154": "faq_ask_verplicht",
        "155": "faq_ask_verschillen",
        "156": "faq_ask_vrijwillig_Janssen",
        "157": "faq_ask_vrijwilliger",
        "158": "faq_ask_waar_en_wanneer",
        "159": "faq_ask_waarom",
        "160": "faq_ask_waarom_niet_verplicht",
        "161": "faq_ask_waarom_ouderen_eerst",
        "162": "faq_ask_waarom_twee_prikken",
        "163": "faq_ask_waarom_twijfel",
        "164": "faq_ask_wanneer_algemene_bevolking",
        "165": "faq_ask_wanneer_iedereen_gevaccineerd",
        "166": "faq_ask_wat_is_corona",
        "167": "faq_ask_wat_is_rna",
        "168": "faq_ask_wat_is_vaccin",
        "169": "faq_ask_wat_na_vaccinatie",
        "170": "faq_ask_welk_vaccin_krijg_ik",
        "171": "faq_ask_welke_vaccin",
        "172": "faq_ask_wie_ben_ik",
        "173": "faq_ask_wie_doet_inenting",
        "174": "faq_ask_wie_is_risicopatient",
        "175": "faq_ask_wie_nu",
        "176": "faq_ask_wilsonbekwaam",
        "177": "faq_ask_zwanger",
        "178": "get_started",
        "179": "nlu_fallback",
        "180": "test",
    }
    num_classes = 181

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeska_Vaccinchatsentenceclassifierdutch_Frombertjedial(PetrainedTextClassifier):
    name = "Jeska/VaccinChatSentenceClassifierDutch_fromBERTjeDIAL"
    id2label = {
        "0": "chitchat_ask_bye",
        "1": "chitchat_ask_hi",
        "2": "chitchat_ask_hi_de",
        "3": "chitchat_ask_hi_en",
        "4": "chitchat_ask_hi_fr",
        "5": "chitchat_ask_hoe_gaat_het",
        "6": "chitchat_ask_name",
        "7": "chitchat_ask_thanks",
        "8": "faq_ask_aantal_gevaccineerd",
        "9": "faq_ask_aantal_gevaccineerd_wereldwijd",
        "10": "faq_ask_afspraak_afzeggen",
        "11": "faq_ask_afspraak_gemist",
        "12": "faq_ask_algemeen_info",
        "13": "faq_ask_allergisch_na_vaccinatie",
        "14": "faq_ask_alternatieve_medicatie",
        "15": "faq_ask_andere_vaccins",
        "16": "faq_ask_astrazeneca",
        "17": "faq_ask_astrazeneca_bij_ouderen",
        "18": "faq_ask_astrazeneca_bloedklonters",
        "19": "faq_ask_astrazeneca_prik_2",
        "20": "faq_ask_attest",
        "21": "faq_ask_autisme_na_vaccinatie",
        "22": "faq_ask_auto-immuun",
        "23": "faq_ask_begeleiding",
        "24": "faq_ask_beschermen",
        "25": "faq_ask_beschermingsduur",
        "26": "faq_ask_beschermingspercentage",
        "27": "faq_ask_besmetten_na_vaccin",
        "28": "faq_ask_betalen_voor_vaccin",
        "29": "faq_ask_betrouwbaar",
        "30": "faq_ask_betrouwbare_bronnen",
        "31": "faq_ask_bijsluiter",
        "32": "faq_ask_bijwerking_AZ",
        "33": "faq_ask_bijwerking_JJ",
        "34": "faq_ask_bijwerking_algemeen",
        "35": "faq_ask_bijwerking_lange_termijn",
        "36": "faq_ask_bijwerking_moderna",
        "37": "faq_ask_bijwerking_pfizer",
        "38": "faq_ask_bloed_geven",
        "39": "faq_ask_borstvoeding",
        "40": "faq_ask_buitenlander",
        "41": "faq_ask_chronisch_ziek",
        "42": "faq_ask_combi",
        "43": "faq_ask_complottheorie",
        "44": "faq_ask_complottheorie_5G",
        "45": "faq_ask_complottheorie_Bill_Gates",
        "46": "faq_ask_contra_ind",
        "47": "faq_ask_corona_is_griep",
        "48": "faq_ask_corona_vermijden",
        "49": "faq_ask_covid_door_vaccin",
        "50": "faq_ask_curevac",
        "51": "faq_ask_derde_prik",
        "52": "faq_ask_dna",
        "53": "faq_ask_duur_vaccinatie",
        "54": "faq_ask_eerst_weigeren",
        "55": "faq_ask_eerste_prik_buitenland",
        "56": "faq_ask_essentieel_beroep",
        "57": "faq_ask_experimenteel",
        "58": "faq_ask_foetus",
        "59": "faq_ask_geen_antwoord",
        "60": "faq_ask_geen_risicopatient",
        "61": "faq_ask_geen_uitnodiging",
        "62": "faq_ask_gestockeerd",
        "63": "faq_ask_gezondheidstoestand_gekend",
        "64": "faq_ask_gif_in_vaccin",
        "65": "faq_ask_goedkeuring",
        "66": "faq_ask_groepsimmuniteit",
        "67": "faq_ask_hartspierontsteking",
        "68": "faq_ask_hersenziekte",
        "69": "faq_ask_hoe_dodelijk",
        "70": "faq_ask_hoe_weet_overheid",
        "71": "faq_ask_hoeveel_dosissen",
        "72": "faq_ask_huisarts",
        "73": "faq_ask_huisdieren",
        "74": "faq_ask_iedereen",
        "75": "faq_ask_in_vaccin",
        "76": "faq_ask_info_vaccins",
        "77": "faq_ask_janssen",
        "78": "faq_ask_janssen_een_dosis",
        "79": "faq_ask_jong_en_gezond",
        "80": "faq_ask_keuze",
        "81": "faq_ask_keuze_vaccinatiecentrum",
        "82": "faq_ask_kinderen",
        "83": "faq_ask_kosjer_halal",
        "84": "faq_ask_leveringen",
        "85": "faq_ask_logistiek",
        "86": "faq_ask_logistiek_veilig",
        "87": "faq_ask_magnetisch",
        "88": "faq_ask_man_vrouw_verschillen",
        "89": "faq_ask_mantelzorger",
        "90": "faq_ask_maximaal_een_dosis",
        "91": "faq_ask_meer_bijwerkingen_tweede_dosis",
        "92": "faq_ask_minder_mobiel",
        "93": "faq_ask_moderna",
        "94": "faq_ask_mondmasker",
        "95": "faq_ask_motiveren",
        "96": "faq_ask_mrna_vs_andere_vaccins",
        "97": "faq_ask_naaldangst",
        "98": "faq_ask_nadelen",
        "99": "faq_ask_nuchter",
        "100": "faq_ask_ontwikkeling",
        "101": "faq_ask_onvruchtbaar",
        "102": "faq_ask_oplopen_vaccinatie",
        "103": "faq_ask_pfizer",
        "104": "faq_ask_phishing",
        "105": "faq_ask_pijnstiller",
        "106": "faq_ask_planning_eerstelijnszorg",
        "107": "faq_ask_planning_ouderen",
        "108": "faq_ask_positieve_test_na_vaccin",
        "109": "faq_ask_prioritaire_gropen",
        "110": "faq_ask_privacy",
        "111": "faq_ask_probleem_registratie",
        "112": "faq_ask_problemen_uitnodiging",
        "113": "faq_ask_quarantaine",
        "114": "faq_ask_qvax_probleem",
        "115": "faq_ask_reproductiegetal",
        "116": "faq_ask_risicopatient",
        "117": "faq_ask_risicopatient_diabetes",
        "118": "faq_ask_risicopatient_hartvaat",
        "119": "faq_ask_risicopatient_immuunziekte",
        "120": "faq_ask_risicopatient_kanker",
        "121": "faq_ask_risicopatient_luchtwegaandoening",
        "122": "faq_ask_smaakverlies",
        "123": "faq_ask_snel_ontwikkeld",
        "124": "faq_ask_sneller_aan_de_beurt",
        "125": "faq_ask_taxi",
        "126": "faq_ask_test_voor_vaccin",
        "127": "faq_ask_testen",
        "128": "faq_ask_tijd_tot_tweede_dosis",
        "129": "faq_ask_timing_andere_vaccins",
        "130": "faq_ask_trage_start",
        "131": "faq_ask_tweede_dosis_afspraak",
        "132": "faq_ask_tweede_dosis_vervroegen",
        "133": "faq_ask_twijfel_bijwerkingen",
        "134": "faq_ask_twijfel_effectiviteit",
        "135": "faq_ask_twijfel_inhoud",
        "136": "faq_ask_twijfel_ivm_vaccinatie",
        "137": "faq_ask_twijfel_noodzaak",
        "138": "faq_ask_twijfel_ontwikkeling",
        "139": "faq_ask_twijfel_praktisch",
        "140": "faq_ask_twijfel_vaccins_zelf",
        "141": "faq_ask_twijfel_vrijheid",
        "142": "faq_ask_uit_flacon",
        "143": "faq_ask_uitnodiging_afspraak_kwijt",
        "144": "faq_ask_uitnodiging_na_vaccinatie",
        "145": "faq_ask_vaccin_doorgeven",
        "146": "faq_ask_vaccin_immuunsysteem",
        "147": "faq_ask_vaccin_variant",
        "148": "faq_ask_vaccinatiecentrum",
        "149": "faq_ask_vaccine_covid_gehad",
        "150": "faq_ask_vaccine_covid_gehad_effect",
        "151": "faq_ask_vakantie",
        "152": "faq_ask_veelgestelde_vragen",
        "153": "faq_ask_vegan",
        "154": "faq_ask_verplicht",
        "155": "faq_ask_verschillen",
        "156": "faq_ask_vrijwillig_Janssen",
        "157": "faq_ask_vrijwilliger",
        "158": "faq_ask_waar_en_wanneer",
        "159": "faq_ask_waarom",
        "160": "faq_ask_waarom_niet_verplicht",
        "161": "faq_ask_waarom_ouderen_eerst",
        "162": "faq_ask_waarom_twee_prikken",
        "163": "faq_ask_waarom_twijfel",
        "164": "faq_ask_wanneer_algemene_bevolking",
        "165": "faq_ask_wanneer_iedereen_gevaccineerd",
        "166": "faq_ask_wat_is_corona",
        "167": "faq_ask_wat_is_rna",
        "168": "faq_ask_wat_is_vaccin",
        "169": "faq_ask_wat_na_vaccinatie",
        "170": "faq_ask_welk_vaccin_krijg_ik",
        "171": "faq_ask_welke_vaccin",
        "172": "faq_ask_wie_ben_ik",
        "173": "faq_ask_wie_doet_inenting",
        "174": "faq_ask_wie_is_risicopatient",
        "175": "faq_ask_wie_nu",
        "176": "faq_ask_wilsonbekwaam",
        "177": "faq_ask_zwanger",
        "178": "get_started",
        "179": "nlu_fallback",
        "180": "test",
    }
    num_classes = 181

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jeska_AutonlpVaccinfaq(PetrainedTextClassifier):
    name = "Jeska/autonlp-vaccinfaq-22144706"
    id2label = {
        "0": "chitchat_ask_bye",
        "1": "chitchat_ask_hi",
        "2": "chitchat_ask_hi_de",
        "3": "chitchat_ask_hi_en",
        "4": "chitchat_ask_hi_fr",
        "5": "chitchat_ask_hoe_gaat_het",
        "6": "chitchat_ask_name",
        "7": "chitchat_ask_thanks",
        "8": "faq_ask_aantal_gevaccineerd",
        "9": "faq_ask_aantal_gevaccineerd_wereldwijd",
        "10": "faq_ask_afspraak_afzeggen",
        "11": "faq_ask_afspraak_gemist",
        "12": "faq_ask_algemeen_info",
        "13": "faq_ask_allergisch_na_vaccinatie",
        "14": "faq_ask_alternatieve_medicatie",
        "15": "faq_ask_andere_vaccins",
        "16": "faq_ask_astrazeneca",
        "17": "faq_ask_astrazeneca_bij_ouderen",
        "18": "faq_ask_astrazeneca_bloedklonters",
        "19": "faq_ask_astrazeneca_prik_2",
        "20": "faq_ask_attest",
        "21": "faq_ask_autisme_na_vaccinatie",
        "22": "faq_ask_auto-immuun",
        "23": "faq_ask_begeleiding",
        "24": "faq_ask_beschermen",
        "25": "faq_ask_beschermingsduur",
        "26": "faq_ask_beschermingspercentage",
        "27": "faq_ask_besmetten_na_vaccin",
        "28": "faq_ask_betalen_voor_vaccin",
        "29": "faq_ask_betrouwbaar",
        "30": "faq_ask_betrouwbare_bronnen",
        "31": "faq_ask_bijsluiter",
        "32": "faq_ask_bijwerking_AZ",
        "33": "faq_ask_bijwerking_JJ",
        "34": "faq_ask_bijwerking_algemeen",
        "35": "faq_ask_bijwerking_lange_termijn",
        "36": "faq_ask_bijwerking_moderna",
        "37": "faq_ask_bijwerking_pfizer",
        "38": "faq_ask_bloed_geven",
        "39": "faq_ask_borstvoeding",
        "40": "faq_ask_buitenlander",
        "41": "faq_ask_chronisch_ziek",
        "42": "faq_ask_combi",
        "43": "faq_ask_complottheorie",
        "44": "faq_ask_complottheorie_5G",
        "45": "faq_ask_complottheorie_Bill_Gates",
        "46": "faq_ask_contra_ind",
        "47": "faq_ask_corona_is_griep",
        "48": "faq_ask_corona_vermijden",
        "49": "faq_ask_covid_door_vaccin",
        "50": "faq_ask_curevac",
        "51": "faq_ask_derde_prik",
        "52": "faq_ask_dna",
        "53": "faq_ask_duur_vaccinatie",
        "54": "faq_ask_eerst_weigeren",
        "55": "faq_ask_eerste_prik_buitenland",
        "56": "faq_ask_essentieel_beroep",
        "57": "faq_ask_experimenteel",
        "58": "faq_ask_foetus",
        "59": "faq_ask_geen_antwoord",
        "60": "faq_ask_geen_risicopatient",
        "61": "faq_ask_geen_uitnodiging",
        "62": "faq_ask_gestockeerd",
        "63": "faq_ask_gezondheidstoestand_gekend",
        "64": "faq_ask_gif_in_vaccin",
        "65": "faq_ask_goedkeuring",
        "66": "faq_ask_groepsimmuniteit",
        "67": "faq_ask_hartspierontsteking",
        "68": "faq_ask_hersenziekte",
        "69": "faq_ask_hoe_dodelijk",
        "70": "faq_ask_hoe_weet_overheid",
        "71": "faq_ask_hoeveel_dosissen",
        "72": "faq_ask_huisarts",
        "73": "faq_ask_huisdieren",
        "74": "faq_ask_iedereen",
        "75": "faq_ask_in_vaccin",
        "76": "faq_ask_info_vaccins",
        "77": "faq_ask_janssen",
        "78": "faq_ask_janssen_een_dosis",
        "79": "faq_ask_jong_en_gezond",
        "80": "faq_ask_keuze",
        "81": "faq_ask_keuze_vaccinatiecentrum",
        "82": "faq_ask_kinderen",
        "83": "faq_ask_kosjer_halal",
        "84": "faq_ask_leveringen",
        "85": "faq_ask_logistiek",
        "86": "faq_ask_logistiek_veilig",
        "87": "faq_ask_magnetisch",
        "88": "faq_ask_man_vrouw_verschillen",
        "89": "faq_ask_mantelzorger",
        "90": "faq_ask_maximaal_een_dosis",
        "91": "faq_ask_meer_bijwerkingen_tweede_dosis",
        "92": "faq_ask_minder_mobiel",
        "93": "faq_ask_moderna",
        "94": "faq_ask_mondmasker",
        "95": "faq_ask_motiveren",
        "96": "faq_ask_mrna_vs_andere_vaccins",
        "97": "faq_ask_naaldangst",
        "98": "faq_ask_nadelen",
        "99": "faq_ask_nuchter",
        "100": "faq_ask_ontwikkeling",
        "101": "faq_ask_onvruchtbaar",
        "102": "faq_ask_oplopen_vaccinatie",
        "103": "faq_ask_pfizer",
        "104": "faq_ask_phishing",
        "105": "faq_ask_pijnstiller",
        "106": "faq_ask_planning_eerstelijnszorg",
        "107": "faq_ask_planning_ouderen",
        "108": "faq_ask_positieve_test_na_vaccin",
        "109": "faq_ask_prioritaire_gropen",
        "110": "faq_ask_privacy",
        "111": "faq_ask_probleem_registratie",
        "112": "faq_ask_problemen_uitnodiging",
        "113": "faq_ask_quarantaine",
        "114": "faq_ask_qvax_probleem",
        "115": "faq_ask_reproductiegetal",
        "116": "faq_ask_risicopatient",
        "117": "faq_ask_risicopatient_diabetes",
        "118": "faq_ask_risicopatient_hartvaat",
        "119": "faq_ask_risicopatient_immuunziekte",
        "120": "faq_ask_risicopatient_kanker",
        "121": "faq_ask_risicopatient_luchtwegaandoening",
        "122": "faq_ask_smaakverlies",
        "123": "faq_ask_snel_ontwikkeld",
        "124": "faq_ask_sneller_aan_de_beurt",
        "125": "faq_ask_taxi",
        "126": "faq_ask_test_voor_vaccin",
        "127": "faq_ask_testen",
        "128": "faq_ask_tijd_tot_tweede_dosis",
        "129": "faq_ask_timing_andere_vaccins",
        "130": "faq_ask_trage_start",
        "131": "faq_ask_tweede_dosis_afspraak",
        "132": "faq_ask_tweede_dosis_vervroegen",
        "133": "faq_ask_twijfel_bijwerkingen",
        "134": "faq_ask_twijfel_effectiviteit",
        "135": "faq_ask_twijfel_inhoud",
        "136": "faq_ask_twijfel_ivm_vaccinatie",
        "137": "faq_ask_twijfel_noodzaak",
        "138": "faq_ask_twijfel_ontwikkeling",
        "139": "faq_ask_twijfel_praktisch",
        "140": "faq_ask_twijfel_vaccins_zelf",
        "141": "faq_ask_twijfel_vrijheid",
        "142": "faq_ask_uit_flacon",
        "143": "faq_ask_uitnodiging_afspraak_kwijt",
        "144": "faq_ask_uitnodiging_na_vaccinatie",
        "145": "faq_ask_vaccin_doorgeven",
        "146": "faq_ask_vaccin_immuunsysteem",
        "147": "faq_ask_vaccin_variant",
        "148": "faq_ask_vaccinatiecentrum",
        "149": "faq_ask_vaccine_covid_gehad",
        "150": "faq_ask_vaccine_covid_gehad_effect",
        "151": "faq_ask_vakantie",
        "152": "faq_ask_veelgestelde_vragen",
        "153": "faq_ask_vegan",
        "154": "faq_ask_verplicht",
        "155": "faq_ask_verschillen",
        "156": "faq_ask_vrijwillig_Janssen",
        "157": "faq_ask_vrijwilliger",
        "158": "faq_ask_waar_en_wanneer",
        "159": "faq_ask_waarom",
        "160": "faq_ask_waarom_niet_verplicht",
        "161": "faq_ask_waarom_ouderen_eerst",
        "162": "faq_ask_waarom_twee_prikken",
        "163": "faq_ask_waarom_twijfel",
        "164": "faq_ask_wanneer_algemene_bevolking",
        "165": "faq_ask_wanneer_iedereen_gevaccineerd",
        "166": "faq_ask_wat_is_corona",
        "167": "faq_ask_wat_is_rna",
        "168": "faq_ask_wat_is_vaccin",
        "169": "faq_ask_wat_na_vaccinatie",
        "170": "faq_ask_welk_vaccin_krijg_ik",
        "171": "faq_ask_welke_vaccin",
        "172": "faq_ask_wie_ben_ik",
        "173": "faq_ask_wie_doet_inenting",
        "174": "faq_ask_wie_is_risicopatient",
        "175": "faq_ask_wie_nu",
        "176": "faq_ask_wilsonbekwaam",
        "177": "faq_ask_zwanger",
        "178": "get_started",
        "179": "nlu_fallback",
        "180": "test",
    }
    num_classes = 181

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jihyun22_BertBaseFinetunedNli(PetrainedTextClassifier):
    name = "Jihyun22/bert-base-finetuned-nli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lysandrejik_TestUpload(PetrainedTextClassifier):
    name = "LysandreJik/test-upload"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lysandrejik_TestUpload1(PetrainedTextClassifier):
    name = "LysandreJik/test-upload1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lysandrejik_Testing(PetrainedTextClassifier):
    name = "LysandreJik/testing"
    id2label = {"0": "not_equivalent", "1": "equivalent"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jiva_XlmRobertaLargeItMnli(PetrainedTextClassifier):
    name = "Jiva/xlm-roberta-large-it-mnli"
    id2label = {"0": "neutral", "1": "entailment", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jodsa_Camembert_Clf(PetrainedTextClassifier):
    name = "Jodsa/camembert_clf"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
    }
    num_classes = 22

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jonatangk_RobertaBaseBneFinetunedCataloniaIndependenceDetector(
    PetrainedTextClassifier
):
    name = "JonatanGk/roberta-base-bne-finetuned-catalonia-independence-detector"
    id2label = {"0": "AGAINST", "1": "FAVOR", "2": "NEUTRAL"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jonatangk_RobertaBaseBneFinetunedCyberbullyingSpanish(PetrainedTextClassifier):
    name = "JonatanGk/roberta-base-bne-finetuned-cyberbullying-spanish"
    id2label = {"0": "Not_bullying", "1": "Bullying"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jonatangk_RobertaBaseBneFinetunedHateSpeechOffensiveSpanish(
    PetrainedTextClassifier
):
    name = "JonatanGk/roberta-base-bne-finetuned-hate-speech-offensive-spanish"
    id2label = {"0": "HATE_SPEECH", "1": "OFFENSIVE", "2": "NEITHER"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jonatangk_RobertaBaseCaFinetunedCataloniaIndependenceDetector(
    PetrainedTextClassifier
):
    name = "JonatanGk/roberta-base-ca-finetuned-catalonia-independence-detector"
    id2label = {"0": "AGAINST", "1": "FAVOR", "2": "NEUTRAL"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jonatangk_RobertaBaseCaFinetunedCyberbullyingCatalan(PetrainedTextClassifier):
    name = "JonatanGk/roberta-base-ca-finetuned-cyberbullying-catalan"
    id2label = {"0": "Not_bullying", "1": "Bullying"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jonatangk_RobertaBaseCaFinetunedHateSpeechOffensiveCatalan(
    PetrainedTextClassifier
):
    name = "JonatanGk/roberta-base-ca-finetuned-hate-speech-offensive-catalan"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jonatangk_RobertaBaseCaFinetunedTecla(PetrainedTextClassifier):
    name = "JonatanGk/roberta-base-ca-finetuned-tecla"
    id2label = {
        "0": "Societat",
        "1": "Política",
        "2": "Partits",
        "3": "Successos",
        "4": "Judicial",
        "5": "Policial",
        "6": "Salut",
        "7": "Economia",
        "8": "Parlament",
        "9": "Medi_ambient",
        "10": "Música",
        "11": "Educació",
        "12": "Empresa",
        "13": "Cultura",
        "14": "Unió_Europea",
        "15": "Govern",
        "16": "Infraestructures",
        "17": "Treball",
        "18": "Mobilitat",
        "19": "Cinema",
        "20": "Teatre",
        "21": "Turisme",
        "22": "Equipaments_i_patrimoni",
        "23": "Lletres",
        "24": "Meteorologia",
        "25": "Comerç",
        "26": "Govern_espanyol",
        "27": "Món",
        "28": "Festa_i_cultura_popular",
        "29": "Trànsit",
    }
    num_classes = 30

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jorgeutd_BertBaseUncasedAdeAdeCorpusV2(PetrainedTextClassifier):
    name = "Jorgeutd/bert-base-uncased-ade-Ade-corpus-v2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jorgeutd_BertBaseUncasedFinetunedSurveyclassification(PetrainedTextClassifier):
    name = "Jorgeutd/bert-base-uncased-finetuned-surveyclassification"
    id2label = {"0": "negative", "1": "neutral", "2": "positive"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jorgeutd_SagemakerRobertaBaseEmotion(PetrainedTextClassifier):
    name = "Jorgeutd/sagemaker-roberta-base-emotion"
    id2label = {
        "0": "sadness",
        "1": "joy",
        "2": "love",
        "3": "anger",
        "4": "fear",
        "5": "surprise",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jovenpai_Bert_Cn_Finetunning(PetrainedTextClassifier):
    name = "JovenPai/bert_cn_finetunning"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jovenpai_Bert_Finetunning_Test(PetrainedTextClassifier):
    name = "JovenPai/bert_finetunning_test"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jtisch7_Bertfinancialsent(PetrainedTextClassifier):
    name = "Jtisch7/bertFinancialSent"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Juliusalphonso_DearJarvisMonolithXedEn(PetrainedTextClassifier):
    name = "JuliusAlphonso/dear-jarvis-monolith-xed-en"
    id2label = {
        "0": "neutral",
        "1": "anger",
        "2": "anticipation",
        "3": "disgust",
        "4": "fear",
        "5": "joy",
        "6": "sadness",
        "7": "suprise",
        "8": "trust",
    }
    num_classes = 9

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Juliusalphonso_DearJarvisV5(PetrainedTextClassifier):
    name = "JuliusAlphonso/dear-jarvis-v5"
    id2label = {
        "0": "neutral",
        "1": "anger",
        "2": "anticipation",
        "3": "disgust",
        "4": "fear",
        "5": "joy",
        "6": "sadness",
        "7": "surprise",
        "8": "trust",
    }
    num_classes = 9

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Juliusalphonso_DistilbertPlutchik(PetrainedTextClassifier):
    name = "JuliusAlphonso/distilbert-plutchik"
    id2label = {
        "0": "neutral",
        "1": "anger",
        "2": "anticipation",
        "3": "disgust",
        "4": "fear",
        "5": "joy",
        "6": "sadness",
        "7": "surprise",
        "8": "trust",
    }
    num_classes = 9

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jungwoo_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "Jungwoo/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Jushbjj_AutonlpBp(PetrainedTextClassifier):
    name = "JushBJJ/autonlp-bp-29016523"
    id2label = {
        "0": "command",
        "1": "greeting",
        "2": "information",
        "3": "other",
        "4": "question",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kao_SamyarnBertBaseMultilingualCased(PetrainedTextClassifier):
    name = "Kao/samyarn-bert-base-multilingual-cased"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_DistilbertBaseUncasedFinetuned(PetrainedTextClassifier):
    name = "Katsiaryna/distilbert-base-uncased-finetuned"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_DistilbertBaseUncasedFinetuned_9Th(PetrainedTextClassifier):
    name = "Katsiaryna/distilbert-base-uncased-finetuned_9th"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_DistilbertBaseUncasedFinetuned_9Th_Auc(PetrainedTextClassifier):
    name = "Katsiaryna/distilbert-base-uncased-finetuned_9th_auc"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_QnliElectraBaseFinetuned_9Th_Auc_Ce(PetrainedTextClassifier):
    name = "Katsiaryna/qnli-electra-base-finetuned_9th_auc_ce"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_QnliElectraBaseFinetuned_9Th_Auc_Ce_Diff(PetrainedTextClassifier):
    name = "Katsiaryna/qnli-electra-base-finetuned_9th_auc_ce_diff"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_QnliElectraBaseFinetuned_Auc(PetrainedTextClassifier):
    name = "Katsiaryna/qnli-electra-base-finetuned_auc"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbTinybertLFinetuned_Auc(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-TinyBERT-L-4-finetuned_auc"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbTinybertLFinetuned_Auc_151221(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-TinyBERT-L-4-finetuned_auc_151221-5-001"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbTinybertLFinetuned_Auc_151221Normal(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-TinyBERT-L-4-finetuned_auc_151221-normal"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbTinybertLFinetuned_Auc_151221Top1(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-TinyBERT-L-4-finetuned_auc_151221-top1"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbTinybertLFinetuned_Auc_151221Top3(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-TinyBERT-L-4-finetuned_auc_151221-top3"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbTinybertLFinetuned_Auc_151221Top3_Op1(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-TinyBERT-L-4-finetuned_auc_151221-top3_op1"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbTinybertLFinetuned_Auc_151221Top3_Op2(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-TinyBERT-L-4-finetuned_auc_151221-top3_op2"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbTinybertLFinetuned_Auc_151221Top3_Op3(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-TinyBERT-L-4-finetuned_auc_151221-top3_op3"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbTinybertLFinetuned_Auc_161221Top3(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-TinyBERT-L-4-finetuned_auc_161221-top3"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbTinybertLFinetuned_Auc_40000Top3Bce(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-TinyBERT-L-4-finetuned_auc_40000-top3-BCE"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbTinybertLFinetuned_Auc_40000Top3(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-TinyBERT-L-4-finetuned_auc_40000-top3"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Katsiaryna_StsbDistilrobertaBaseFinetuned_9Th_Auc_Ce(PetrainedTextClassifier):
    name = "Katsiaryna/stsb-distilroberta-base-finetuned_9th_auc_ce"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kayvane_DistilbertComplaintsProduct(PetrainedTextClassifier):
    name = "Kayvane/distilbert-complaints-product"
    id2label = {
        "0": "Credit reporting, credit repair services, or other personal consumer reports",
        "1": "Debt collection",
        "2": "Mortgage",
        "3": "Credit card or prepaid card",
        "4": "Checking or savings account",
        "5": "Credit reporting",
        "6": "Student loan",
        "7": "Money transfer, virtual currency, or money service",
        "8": "Credit card",
        "9": "Vehicle loan or lease",
        "10": "Bank account or service",
        "11": "Payday loan, title loan, or personal loan",
        "12": "Consumer Loan",
        "13": "Payday loan",
        "14": "Money transfers",
        "15": "Prepaid card",
        "16": "Other financial service",
        "17": "Virtual currency",
    }
    num_classes = 18

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kayvane_DistilbertUndersampledNoweights(PetrainedTextClassifier):
    name = "Kayvane/distilbert-undersampled-noweights"
    id2label = {
        "0": "Athlete",
        "1": "Person",
        "2": "Animal",
        "3": "Building",
        "4": "Politician",
        "5": "Company",
        "6": "Organisation",
        "7": "MusicalWork",
        "8": "WinterSportPlayer",
        "9": "SocietalEvent",
        "10": "RouteOfTransportation",
        "11": "PeriodicalLiterature",
        "12": "SportsTeam",
        "13": "NaturalPlace",
        "14": "Artist",
        "15": "Broadcaster",
        "16": "Cleric",
        "17": "EducationalInstitution",
        "18": "Tournament",
        "19": "SportsEvent",
        "20": "SportsTeamSeason",
        "21": "Infrastructure",
        "22": "Settlement",
        "23": "Plant",
        "24": "CelestialBody",
        "25": "SportsLeague",
        "26": "SportFacility",
        "27": "Stream",
        "28": "FictionalCharacter",
        "29": "Comic",
        "30": "Race",
        "31": "Cartoon",
        "32": "Software",
        "33": "Olympics",
        "34": "Eukaryote",
        "35": "FootballLeagueSeason",
        "36": "GridironFootballPlayer",
        "37": "BodyOfWater",
        "38": "SportsManager",
        "39": "ClericalAdministrativeRegion",
        "40": "Horse",
        "41": "Coach",
        "42": "Group",
        "43": "LegalCase",
        "44": "Satellite",
        "45": "WrittenWork",
        "46": "Station",
        "47": "Tower",
        "48": "Actor",
        "49": "RacingDriver",
        "50": "Writer",
        "51": "Genre",
        "52": "NaturalEvent",
        "53": "Song",
        "54": "Scientist",
        "55": "Venue",
        "56": "BritishRoyalty",
        "57": "AmusementParkAttraction",
        "58": "MotorcycleRider",
        "59": "OrganisationMember",
        "60": "Wrestler",
        "61": "Boxer",
        "62": "Engine",
        "63": "FloweringPlant",
        "64": "Presenter",
        "65": "MusicalArtist",
        "66": "RaceTrack",
        "67": "ComicsCharacter",
        "68": "VolleyballPlayer",
        "69": "Database",
    }
    num_classes = 70

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kayvane_DistilbertUndersampled(PetrainedTextClassifier):
    name = "Kayvane/distilbert-undersampled"
    id2label = {
        "0": "Athlete",
        "1": "Person",
        "2": "Animal",
        "3": "Building",
        "4": "Politician",
        "5": "Company",
        "6": "Organisation",
        "7": "MusicalWork",
        "8": "WinterSportPlayer",
        "9": "SocietalEvent",
        "10": "RouteOfTransportation",
        "11": "PeriodicalLiterature",
        "12": "SportsTeam",
        "13": "NaturalPlace",
        "14": "Artist",
        "15": "Broadcaster",
        "16": "Cleric",
        "17": "EducationalInstitution",
        "18": "Tournament",
        "19": "SportsEvent",
        "20": "SportsTeamSeason",
        "21": "Infrastructure",
        "22": "Settlement",
        "23": "Plant",
        "24": "CelestialBody",
        "25": "SportsLeague",
        "26": "SportFacility",
        "27": "Stream",
        "28": "FictionalCharacter",
        "29": "Comic",
        "30": "Race",
        "31": "Cartoon",
        "32": "Software",
        "33": "Olympics",
        "34": "Eukaryote",
        "35": "FootballLeagueSeason",
        "36": "GridironFootballPlayer",
        "37": "BodyOfWater",
        "38": "SportsManager",
        "39": "ClericalAdministrativeRegion",
        "40": "Horse",
        "41": "Coach",
        "42": "Group",
        "43": "LegalCase",
        "44": "Satellite",
        "45": "WrittenWork",
        "46": "Station",
        "47": "Tower",
        "48": "Actor",
        "49": "RacingDriver",
        "50": "Writer",
        "51": "Genre",
        "52": "NaturalEvent",
        "53": "Song",
        "54": "Scientist",
        "55": "Venue",
        "56": "BritishRoyalty",
        "57": "AmusementParkAttraction",
        "58": "MotorcycleRider",
        "59": "OrganisationMember",
        "60": "Wrestler",
        "61": "Boxer",
        "62": "Engine",
        "63": "FloweringPlant",
        "64": "Presenter",
        "65": "MusicalArtist",
        "66": "RaceTrack",
        "67": "ComicsCharacter",
        "68": "VolleyballPlayer",
        "69": "Database",
    }
    num_classes = 70

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kayvane_DistilvertComplaintsSubproduct(PetrainedTextClassifier):
    name = "Kayvane/distilvert-complaints-subproduct"
    id2label = {
        "0": "Credit reporting",
        "1": "General-purpose credit card or charge card",
        "2": "Checking account",
        "3": "Other debt",
        "4": "Second mortgage",
        "5": "Conventional home mortgage",
        "6": "I do not know",
        "7": "Credit card debt",
        "8": "Medical debt",
        "9": "Federal student loan servicing",
        "10": "FHA mortgage",
        "11": "Conventional fixed mortgage",
        "12": "Loan",
        "13": "Other (i.e. phone, health club, etc.)",
        "14": "Store credit card",
        "15": "Installment loan",
        "16": "Credit card",
        "17": "Medical",
        "18": "Mobile or digital wallet",
        "19": "Private student loan",
        "20": "Non-federal student loan",
        "21": "Domestic (US) money transfer",
        "22": "VA mortgage",
        "23": "Vehicle loan",
        "24": "Auto debt",
        "25": "Payday loan",
        "26": "Conventional adjustable mortgage (ARM)",
        "27": "Other personal consumer report",
        "28": "Payday loan debt",
        "29": "Savings account",
        "30": "Virtual currency",
        "31": "Other bank product/service",
        "32": "Other type of mortgage",
        "33": "Other banking product or service",
        "34": "Other mortgage",
        "35": "International money transfer",
        "36": "Lease",
        "37": "General-purpose prepaid card",
        "38": "Home equity loan or line of credit (HELOC)",
        "39": "Government benefit card",
        "40": "Mortgage debt",
        "41": "Personal line of credit",
        "42": "Home equity loan or line of credit",
        "43": "Federal student loan debt",
        "44": "Private student loan debt",
        "45": "Credit repair services",
        "46": "Title loan",
        "47": "Auto",
        "48": "Vehicle lease",
        "49": "Mortgage",
        "50": "Reverse mortgage",
        "51": "General purpose card",
        "52": "CD (Certificate of Deposit)",
        "53": "Federal student loan",
        "54": "Payroll card",
        "55": "Debt settlement",
        "56": "Check cashing service",
        "57": "Traveler's check or cashier's check",
        "58": "Gift card",
        "59": "(CD) Certificate of deposit",
        "60": "Money order",
        "61": "Foreign currency exchange",
        "62": "Refund anticipation check",
        "63": "Gift or merchant card",
        "64": "Cashing a check without an account",
        "65": "ID prepaid card",
        "66": "Mobile wallet",
        "67": "Government benefit payment card",
        "68": "Pawn loan",
        "69": "Other special purpose card",
        "70": "Check cashing",
        "71": "Credit repair",
        "72": "Traveler’s/Cashier’s checks",
        "73": "Transit card",
        "74": "Student prepaid card",
        "75": "Electronic Benefit Transfer / EBT card",
        "76": "",
    }
    num_classes = 77

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kceilord_AutonlpTc(PetrainedTextClassifier):
    name = "Kceilord/autonlp-tc-13522454"
    id2label = {"0": "0", "1": "1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ketzu_KoelectraStsV04(PetrainedTextClassifier):
    name = "Ketzu/koelectra-sts-v0.4"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kheireddinedaouadi_Zeroaraelectra(PetrainedTextClassifier):
    name = "KheireddineDaouadi/ZeroAraElectra"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Khu1998_ClogAssessmentModel(PetrainedTextClassifier):
    name = "Khu1998/clog-assessment-model"
    id2label = {
        "0": "Class participation",
        "1": "Essay",
        "2": "Final exam",
        "3": "Lab",
        "4": "Class participation",
        "5": "Portfolio",
        "6": "Presentation",
        "7": "Group assignment",
        "8": "Report",
        "9": "Class test",
        "10": "Class participation",
        "11": "?",
        "12": "Assignment",
    }
    num_classes = 13

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kien_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "Kien/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kieran_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "Kieran/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kiran146_DistilbertBaseUncasedFinetunedEmotion(PetrainedTextClassifier):
    name = "Kiran146/distilbert-base-uncased-finetuned-emotion"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kittipot_WangchanbertaDepressFinetuned(PetrainedTextClassifier):
    name = "Kittipot/Wangchanberta-Depress-Finetuned"
    id2label = {"0": "Positive", "1": "Not Depressed", "2": "Depressed"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Krassy_XlmRobertaBaseFinetunedMarcEn(PetrainedTextClassifier):
    name = "Krassy/xlm-roberta-base-finetuned-marc-en"
    id2label = {"0": "terrible", "1": "poor", "2": "ok", "3": "good", "4": "great"}
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Kumicho_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "Kumicho/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lazaro97_Results(PetrainedTextClassifier):
    name = "Lazaro97/results"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Leofeng_Chinesesequenceclassification(PetrainedTextClassifier):
    name = "LeoFeng/ChineseSequenceClassification"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
    }
    num_classes = 14

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Li_BertBaseUncasedQnli(PetrainedTextClassifier):
    name = "Li/bert-base-uncased-qnli"
    id2label = {"0": "entailment", "1": "not_entailment"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lilaboualili_BertPreDoc(PetrainedTextClassifier):
    name = "LilaBoualili/bert-pre-doc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lilaboualili_BertPrePair(PetrainedTextClassifier):
    name = "LilaBoualili/bert-pre-pair"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lilaboualili_BertSimDoc(PetrainedTextClassifier):
    name = "LilaBoualili/bert-sim-doc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lilaboualili_BertSimPair(PetrainedTextClassifier):
    name = "LilaBoualili/bert-sim-pair"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lilaboualili_BertVanilla(PetrainedTextClassifier):
    name = "LilaBoualili/bert-vanilla"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lilaboualili_ElectraPreDoc(PetrainedTextClassifier):
    name = "LilaBoualili/electra-pre-doc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lilaboualili_ElectraPrePair(PetrainedTextClassifier):
    name = "LilaBoualili/electra-pre-pair"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lilaboualili_ElectraSimDoc(PetrainedTextClassifier):
    name = "LilaBoualili/electra-sim-doc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lilaboualili_ElectraSimPair(PetrainedTextClassifier):
    name = "LilaBoualili/electra-sim-pair"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lilaboualili_ElectraVanilla(PetrainedTextClassifier):
    name = "LilaBoualili/electra-vanilla"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lumos_Ag_News1(PetrainedTextClassifier):
    name = "Lumos/ag_news1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lumos_Imdb2(PetrainedTextClassifier):
    name = "Lumos/imdb2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lumos_Imdb3(PetrainedTextClassifier):
    name = "Lumos/imdb3"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lumos_Imdb3_Hga(PetrainedTextClassifier):
    name = "Lumos/imdb3_hga"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lumos_Imdb4(PetrainedTextClassifier):
    name = "Lumos/imdb4"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lumos_Yahoo1(PetrainedTextClassifier):
    name = "Lumos/yahoo1"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
    }
    num_classes = 10

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Lumos_Yahoo2(PetrainedTextClassifier):
    name = "Lumos/yahoo2"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
    }
    num_classes = 10

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Luyu_BertBaseMdocBm25(PetrainedTextClassifier):
    name = "Luyu/bert-base-mdoc-bm25"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Luyu_BertBaseMdocHdct(PetrainedTextClassifier):
    name = "Luyu/bert-base-mdoc-hdct"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertMiniFinetunedMnli(PetrainedTextClassifier):
    name = "M-FAC/bert-mini-finetuned-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertMiniFinetunedMrpc(PetrainedTextClassifier):
    name = "M-FAC/bert-mini-finetuned-mrpc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertMiniFinetunedQnli(PetrainedTextClassifier):
    name = "M-FAC/bert-mini-finetuned-qnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertMiniFinetunedQqp(PetrainedTextClassifier):
    name = "M-FAC/bert-mini-finetuned-qqp"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertMiniFinetunedSst2(PetrainedTextClassifier):
    name = "M-FAC/bert-mini-finetuned-sst2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertMiniFinetunedStsb(PetrainedTextClassifier):
    name = "M-FAC/bert-mini-finetuned-stsb"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertTinyFinetunedMnli(PetrainedTextClassifier):
    name = "M-FAC/bert-tiny-finetuned-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertTinyFinetunedMrpc(PetrainedTextClassifier):
    name = "M-FAC/bert-tiny-finetuned-mrpc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertTinyFinetunedQnli(PetrainedTextClassifier):
    name = "M-FAC/bert-tiny-finetuned-qnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertTinyFinetunedQqp(PetrainedTextClassifier):
    name = "M-FAC/bert-tiny-finetuned-qqp"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertTinyFinetunedSst2(PetrainedTextClassifier):
    name = "M-FAC/bert-tiny-finetuned-sst2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class MFac_BertTinyFinetunedStsb(PetrainedTextClassifier):
    name = "M-FAC/bert-tiny-finetuned-stsb"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class M47Labs_Arabert_Multiclass_News(PetrainedTextClassifier):
    name = "M47Labs/arabert_multiclass_news"
    id2label = {
        "0": "sports",
        "1": "religion",
        "2": "culture",
        "3": "tech",
        "4": "medical",
        "5": "politics",
        "6": "finance",
    }
    num_classes = 7

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class M47Labs_Binary_Classification_Arabic(PetrainedTextClassifier):
    name = "M47Labs/binary_classification_arabic"
    id2label = {"0": "neg", "1": "pos"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class M47Labs_English_News_Classification_Headlines(PetrainedTextClassifier):
    name = "M47Labs/english_news_classification_headlines"
    id2label = {
        "0": "arts, culture, entertainment and media",
        "1": "conflict, war and peace",
        "2": "crime, law and justice",
        "3": "disaster, accident and emergency incident",
        "4": "economy, business and finance",
        "5": "education",
        "6": "enviroment",
        "7": "health",
        "8": "labour",
        "9": "lifestyle and leisure",
        "10": "politics",
        "11": "religion and belief",
        "12": "science and technology",
        "13": "society",
        "14": "sport",
        "15": "weather",
    }
    num_classes = 16

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class M47Labs_It_Iptc(PetrainedTextClassifier):
    name = "M47Labs/it_iptc"
    id2label = {
        "0": "arts/culture/entertainment and media",
        "1": "conflict/war and peace",
        "2": "crime/law and justice",
        "3": "disaster/accident and emergency incident",
        "4": "economy/business and finance",
        "5": "education",
        "6": "environment",
        "7": "health",
        "8": "human interest",
        "9": "labour",
        "10": "lifestyle and leisure",
        "11": "politics",
        "12": "religion and belief",
        "13": "science and technology",
        "14": "society",
        "15": "sport",
        "16": "weather",
    }
    num_classes = 17

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class M47Labs_Italian_News_Classification_Headlines(PetrainedTextClassifier):
    name = "M47Labs/italian_news_classification_headlines"
    id2label = {
        "0": "arts, culture, entertainment and media",
        "1": "conflict, war and peace",
        "2": "crime, law and justice",
        "3": "disaster, accident and emergency incident",
        "4": "economy, business and finance",
        "5": "enviroment",
        "6": "health",
        "7": "labour",
        "8": "lifestyle and leisure",
        "9": "science and technology",
        "10": "society",
        "11": "sport",
        "12": "weather",
    }
    num_classes = 13

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class M47Labs_Spanish_News_Classification_Headlines(PetrainedTextClassifier):
    name = "M47Labs/spanish_news_classification_headlines"
    id2label = {
        "0": "ciencia_tecnologia",
        "1": "clickbait",
        "2": "cultura",
        "3": "deportes",
        "4": "economia",
        "5": "educacion",
        "6": "medio_ambiente",
        "7": "opinion",
        "8": "politica",
        "9": "sociedad",
    }
    num_classes = 10

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Micadee_AutonlpImdbSentimentAnalysis2(PetrainedTextClassifier):
    name = "MICADEE/autonlp-imdb-sentiment-analysis2-7121569"
    id2label = {"0": "negative", "1": "positive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Minyoung_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "MINYOUNG/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mkaan_MultilingualCpvSectorClassifier(PetrainedTextClassifier):
    name = "MKaan/multilingual-cpv-sector-classifier"
    id2label = {
        "0": "Administration, defence and social security services. 👮\u200d♀️",
        "1": "Agricultural machinery. 🚜",
        "2": "Agricultural, farming, fishing, forestry and related products. 🌾",
        "3": "Agricultural, forestry, horticultural, aquacultural and apicultural services. 👨🏿\u200d🌾",
        "4": "Architectural, construction, engineering and inspection services. 👷\u200d♂️",
        "5": "Business services: law, marketing, consulting, recruitment, printing and security. 👩\u200d💼",
        "6": "Chemical products. 🧪",
        "7": "Clothing, footwear, luggage articles and accessories. 👖",
        "8": "Collected and purified water. 🌊",
        "9": "Construction structures and materials; auxiliary products to construction (excepts electric apparatus). 🧱",
        "10": "Construction work. 🏗️",
        "11": "Education and training services. 👩🏿\u200d🏫",
        "12": "Electrical machinery, apparatus, equipment and consumables; Lighting. ⚡",
        "13": "Financial and insurance services. 👨\u200d💼",
        "14": "Food, beverages, tobacco and related products. 🍽️",
        "15": "Furniture (incl. office furniture), furnishings, domestic appliances (excl. lighting) and cleaning products. 🗄️",
        "16": "Health and social work services. 👨🏽\u200d⚕️",
        "17": "Hotel, restaurant and retail trade services. 🏨",
        "18": "IT services: consulting, software development, Internet and support. 🖥️",
        "19": "Industrial machinery. 🏭",
        "20": "Installation services (except software). 🛠️",
        "21": "Laboratory, optical and precision equipments (excl. glasses). 🔬",
        "22": "Leather and textile fabrics, plastic and rubber materials. 🧵",
        "23": "Machinery for mining, quarrying, construction equipment. ⛏️",
        "24": "Medical equipments, pharmaceuticals and personal care products. 💉",
        "25": "Mining, basic metals and related products. ⚙️",
        "26": "Musical instruments, sport goods, games, toys, handicraft, art materials and accessories. 🎸",
        "27": "Office and computing machinery, equipment and supplies except furniture and software packages. 🖨️",
        "28": "Other community, social and personal services. 🧑🏽\u200d🤝\u200d🧑🏽",
        "29": "Petroleum products, fuel, electricity and other sources of energy. 🔋",
        "30": "Postal and telecommunications services. 📶",
        "31": "Printed matter and related products. 📰",
        "32": "Public utilities. ⛲",
        "33": "Radio, television, communication, telecommunication and related equipment. 📡",
        "34": "Real estate services. 🏠",
        "35": "Recreational, cultural and sporting services. 🚴",
        "36": "Repair and maintenance services. 🔧",
        "37": "Research and development services and related consultancy services. 👩\u200d🔬",
        "38": "Security, fire-fighting, police and defence equipment. 🧯",
        "39": "Services related to the oil and gas industry. ⛽",
        "40": "Sewage-, refuse-, cleaning-, and environmental services. 🧹",
        "41": "Software package and information systems. 🔣",
        "42": "Supporting and auxiliary transport services; travel agencies services. 🚃",
        "43": "Transport equipment and auxiliary products to transportation. 🚌",
        "44": "Transport services (excl. Waste transport). 💺",
    }
    num_classes = 45

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Madhurjindalworkmail_AutonlpGibbDetect(PetrainedTextClassifier):
    name = "MadhurJindalWorkMail/autonlp-Gibb-Detect-515314387"
    id2label = {"0": "clean", "1": "mild gibberish", "2": "noise", "3": "word salad"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mael7307_BertBaseUncasedMrpc(PetrainedTextClassifier):
    name = "Mael7307/bert-base-uncased-MRPC"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mael7307_BertBaseUncasedQqp(PetrainedTextClassifier):
    name = "Mael7307/bert-base-uncased-QQP"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mael7307_BertBaseUncasedMnli(PetrainedTextClassifier):
    name = "Mael7307/bert-base-uncased-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mael7307_BertBaseUncasedSnli(PetrainedTextClassifier):
    name = "Mael7307/bert-base-uncased-snli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mael7307_RobertaLargeMnli(PetrainedTextClassifier):
    name = "Mael7307/roberta-large-mnli"
    id2label = {"0": "CONTRADICTION", "1": "NEUTRAL", "2": "ENTAILMENT"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mael7307_RobertaLargeMrpc(PetrainedTextClassifier):
    name = "Mael7307/roberta-large-mrpc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mael7307_RobertaLargeQqp(PetrainedTextClassifier):
    name = "Mael7307/roberta-large-qqp"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mael7307_RobertaLargeSnli(PetrainedTextClassifier):
    name = "Mael7307/roberta-large-snli"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mael7307_Roblclass(PetrainedTextClassifier):
    name = "Mael7307/roblclass"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mael7307_Rtevib(PetrainedTextClassifier):
    name = "Mael7307/rtevib"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mael7307_Vibert(PetrainedTextClassifier):
    name = "Mael7307/vibert"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maha_OgbvGenderBertHiEnHasoc20AFin(PetrainedTextClassifier):
    name = "Maha/OGBV-gender-bert-hi-en-hasoc20a-fin"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maha_OgbvGenderIndicbertTaEacl_Finals(PetrainedTextClassifier):
    name = "Maha/OGBV-gender-indicbert-ta-eacl_finals"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maha_OgbvGenderIndicbertTaFire20_Fin(PetrainedTextClassifier):
    name = "Maha/OGBV-gender-indicbert-ta-fire20_fin"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maha_OgbvGenderIndicbertTaHasoc21_Codemix(PetrainedTextClassifier):
    name = "Maha/OGBV-gender-indicbert-ta-hasoc21_codemix"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maha_OgbvGenderTwtrobertabaseEnDavidson(PetrainedTextClassifier):
    name = "Maha/OGBV-gender-twtrobertabase-en-davidson"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maha_OgbvGenderTwtrobertabaseEnFounta_Final(PetrainedTextClassifier):
    name = "Maha/OGBV-gender-twtrobertabase-en-founta_final"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maha_OgbvGenderTwtrobertabaseEnTrac1(PetrainedTextClassifier):
    name = "Maha/OGBV-gender-twtrobertabase-en-trac1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maha_HiConst21Hibert_Final(PetrainedTextClassifier):
    name = "Maha/hi-const21-hibert_final"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maha_HinTrac1_Fin(PetrainedTextClassifier):
    name = "Maha/hin-trac1_fin"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maha_HinTrac2(PetrainedTextClassifier):
    name = "Maha/hin-trac2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maheshwaranr_BertAnalyzer(PetrainedTextClassifier):
    name = "Maheshwaranr/bert-analyzer"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Majed_Internet2(PetrainedTextClassifier):
    name = "Majed/internet2"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Manishl7_XlmRobertaLargeLanguageDetection(PetrainedTextClassifier):
    name = "Manishl7/xlm-roberta-large-language-detection"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mariopenguin_BertModelEnglish(PetrainedTextClassifier):
    name = "MarioPenguin/bert-model-english"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mariopenguin_BertModelEnglish1(PetrainedTextClassifier):
    name = "MarioPenguin/bert-model-english1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mariopenguin_Beto_Amazon(PetrainedTextClassifier):
    name = "MarioPenguin/beto_amazon"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mariopenguin_Beto_Amazon_Posneu(PetrainedTextClassifier):
    name = "MarioPenguin/beto_amazon_posneu"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mariopenguin_FinetunedModel(PetrainedTextClassifier):
    name = "MarioPenguin/finetuned-model"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mariopenguin_RobertaModelEnglish(PetrainedTextClassifier):
    name = "MarioPenguin/roberta-model-english"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Marshallcharles_Bartlargemnli(PetrainedTextClassifier):
    name = "MarshallCharles/bartlargemnli"
    id2label = {"0": "contradiction", "1": "neutral", "2": "entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mathking_BertBaseGermanCasedGnad10(PetrainedTextClassifier):
    name = "Mathking/bert-base-german-cased-gnad10"
    id2label = {
        "0": "Web",
        "1": "Panorama",
        "2": "International",
        "3": "Wirtschaft",
        "4": "Sport",
        "5": "Inland",
        "6": "Etat",
        "7": "Wissenschaft",
        "8": "Kultur",
    }
    num_classes = 9

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maunish_KgroupingRobertaLarge(PetrainedTextClassifier):
    name = "Maunish/kgrouping-roberta-large"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Maxinstellar_Outputs(PetrainedTextClassifier):
    name = "Maxinstellar/outputs"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
    }
    num_classes = 7

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Melissatessa_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "MelissaTESSA/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mhf_DistilbertBaseUncasedDistilledClinc(PetrainedTextClassifier):
    name = "MhF/distilbert-base-uncased-distilled-clinc"
    id2label = {
        "0": "restaurant_reviews",
        "1": "nutrition_info",
        "2": "account_blocked",
        "3": "oil_change_how",
        "4": "time",
        "5": "weather",
        "6": "redeem_rewards",
        "7": "interest_rate",
        "8": "gas_type",
        "9": "accept_reservations",
        "10": "smart_home",
        "11": "user_name",
        "12": "report_lost_card",
        "13": "repeat",
        "14": "whisper_mode",
        "15": "what_are_your_hobbies",
        "16": "order",
        "17": "jump_start",
        "18": "schedule_meeting",
        "19": "meeting_schedule",
        "20": "freeze_account",
        "21": "what_song",
        "22": "meaning_of_life",
        "23": "restaurant_reservation",
        "24": "traffic",
        "25": "make_call",
        "26": "text",
        "27": "bill_balance",
        "28": "improve_credit_score",
        "29": "change_language",
        "30": "no",
        "31": "measurement_conversion",
        "32": "timer",
        "33": "flip_coin",
        "34": "do_you_have_pets",
        "35": "balance",
        "36": "tell_joke",
        "37": "last_maintenance",
        "38": "exchange_rate",
        "39": "uber",
        "40": "car_rental",
        "41": "credit_limit",
        "42": "oos",
        "43": "shopping_list",
        "44": "expiration_date",
        "45": "routing",
        "46": "meal_suggestion",
        "47": "tire_change",
        "48": "todo_list",
        "49": "card_declined",
        "50": "rewards_balance",
        "51": "change_accent",
        "52": "vaccines",
        "53": "reminder_update",
        "54": "food_last",
        "55": "change_ai_name",
        "56": "bill_due",
        "57": "who_do_you_work_for",
        "58": "share_location",
        "59": "international_visa",
        "60": "calendar",
        "61": "translate",
        "62": "carry_on",
        "63": "book_flight",
        "64": "insurance_change",
        "65": "todo_list_update",
        "66": "timezone",
        "67": "cancel_reservation",
        "68": "transactions",
        "69": "credit_score",
        "70": "report_fraud",
        "71": "spending_history",
        "72": "directions",
        "73": "spelling",
        "74": "insurance",
        "75": "what_is_your_name",
        "76": "reminder",
        "77": "where_are_you_from",
        "78": "distance",
        "79": "payday",
        "80": "flight_status",
        "81": "find_phone",
        "82": "greeting",
        "83": "alarm",
        "84": "order_status",
        "85": "confirm_reservation",
        "86": "cook_time",
        "87": "damaged_card",
        "88": "reset_settings",
        "89": "pin_change",
        "90": "replacement_card_duration",
        "91": "new_card",
        "92": "roll_dice",
        "93": "income",
        "94": "taxes",
        "95": "date",
        "96": "who_made_you",
        "97": "pto_request",
        "98": "tire_pressure",
        "99": "how_old_are_you",
        "100": "rollover_401k",
        "101": "pto_request_status",
        "102": "how_busy",
        "103": "application_status",
        "104": "recipe",
        "105": "calendar_update",
        "106": "play_music",
        "107": "yes",
        "108": "direct_deposit",
        "109": "credit_limit_change",
        "110": "gas",
        "111": "pay_bill",
        "112": "ingredients_list",
        "113": "lost_luggage",
        "114": "goodbye",
        "115": "what_can_i_ask_you",
        "116": "book_hotel",
        "117": "are_you_a_bot",
        "118": "next_song",
        "119": "change_speed",
        "120": "plug_type",
        "121": "maybe",
        "122": "w2",
        "123": "oil_change_when",
        "124": "thank_you",
        "125": "shopping_list_update",
        "126": "pto_balance",
        "127": "order_checks",
        "128": "travel_alert",
        "129": "fun_fact",
        "130": "sync_device",
        "131": "schedule_maintenance",
        "132": "apr",
        "133": "transfer",
        "134": "ingredient_substitution",
        "135": "calories",
        "136": "current_location",
        "137": "international_fees",
        "138": "calculator",
        "139": "definition",
        "140": "next_holiday",
        "141": "update_playlist",
        "142": "mpg",
        "143": "min_payment",
        "144": "change_user_name",
        "145": "restaurant_suggestion",
        "146": "travel_notification",
        "147": "cancel",
        "148": "pto_used",
        "149": "travel_suggestion",
        "150": "change_volume",
    }
    num_classes = 151

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mhf_DistilbertBaseUncasedFinetunedClinc(PetrainedTextClassifier):
    name = "MhF/distilbert-base-uncased-finetuned-clinc"
    id2label = {
        "0": "restaurant_reviews",
        "1": "nutrition_info",
        "2": "account_blocked",
        "3": "oil_change_how",
        "4": "time",
        "5": "weather",
        "6": "redeem_rewards",
        "7": "interest_rate",
        "8": "gas_type",
        "9": "accept_reservations",
        "10": "smart_home",
        "11": "user_name",
        "12": "report_lost_card",
        "13": "repeat",
        "14": "whisper_mode",
        "15": "what_are_your_hobbies",
        "16": "order",
        "17": "jump_start",
        "18": "schedule_meeting",
        "19": "meeting_schedule",
        "20": "freeze_account",
        "21": "what_song",
        "22": "meaning_of_life",
        "23": "restaurant_reservation",
        "24": "traffic",
        "25": "make_call",
        "26": "text",
        "27": "bill_balance",
        "28": "improve_credit_score",
        "29": "change_language",
        "30": "no",
        "31": "measurement_conversion",
        "32": "timer",
        "33": "flip_coin",
        "34": "do_you_have_pets",
        "35": "balance",
        "36": "tell_joke",
        "37": "last_maintenance",
        "38": "exchange_rate",
        "39": "uber",
        "40": "car_rental",
        "41": "credit_limit",
        "42": "oos",
        "43": "shopping_list",
        "44": "expiration_date",
        "45": "routing",
        "46": "meal_suggestion",
        "47": "tire_change",
        "48": "todo_list",
        "49": "card_declined",
        "50": "rewards_balance",
        "51": "change_accent",
        "52": "vaccines",
        "53": "reminder_update",
        "54": "food_last",
        "55": "change_ai_name",
        "56": "bill_due",
        "57": "who_do_you_work_for",
        "58": "share_location",
        "59": "international_visa",
        "60": "calendar",
        "61": "translate",
        "62": "carry_on",
        "63": "book_flight",
        "64": "insurance_change",
        "65": "todo_list_update",
        "66": "timezone",
        "67": "cancel_reservation",
        "68": "transactions",
        "69": "credit_score",
        "70": "report_fraud",
        "71": "spending_history",
        "72": "directions",
        "73": "spelling",
        "74": "insurance",
        "75": "what_is_your_name",
        "76": "reminder",
        "77": "where_are_you_from",
        "78": "distance",
        "79": "payday",
        "80": "flight_status",
        "81": "find_phone",
        "82": "greeting",
        "83": "alarm",
        "84": "order_status",
        "85": "confirm_reservation",
        "86": "cook_time",
        "87": "damaged_card",
        "88": "reset_settings",
        "89": "pin_change",
        "90": "replacement_card_duration",
        "91": "new_card",
        "92": "roll_dice",
        "93": "income",
        "94": "taxes",
        "95": "date",
        "96": "who_made_you",
        "97": "pto_request",
        "98": "tire_pressure",
        "99": "how_old_are_you",
        "100": "rollover_401k",
        "101": "pto_request_status",
        "102": "how_busy",
        "103": "application_status",
        "104": "recipe",
        "105": "calendar_update",
        "106": "play_music",
        "107": "yes",
        "108": "direct_deposit",
        "109": "credit_limit_change",
        "110": "gas",
        "111": "pay_bill",
        "112": "ingredients_list",
        "113": "lost_luggage",
        "114": "goodbye",
        "115": "what_can_i_ask_you",
        "116": "book_hotel",
        "117": "are_you_a_bot",
        "118": "next_song",
        "119": "change_speed",
        "120": "plug_type",
        "121": "maybe",
        "122": "w2",
        "123": "oil_change_when",
        "124": "thank_you",
        "125": "shopping_list_update",
        "126": "pto_balance",
        "127": "order_checks",
        "128": "travel_alert",
        "129": "fun_fact",
        "130": "sync_device",
        "131": "schedule_maintenance",
        "132": "apr",
        "133": "transfer",
        "134": "ingredient_substitution",
        "135": "calories",
        "136": "current_location",
        "137": "international_fees",
        "138": "calculator",
        "139": "definition",
        "140": "next_holiday",
        "141": "update_playlist",
        "142": "mpg",
        "143": "min_payment",
        "144": "change_user_name",
        "145": "restaurant_suggestion",
        "146": "travel_notification",
        "147": "cancel",
        "148": "pto_used",
        "149": "travel_suggestion",
        "150": "change_volume",
    }
    num_classes = 151

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mhf_DistilbertBaseUncasedFinetunedEmotion(PetrainedTextClassifier):
    name = "MhF/distilbert-base-uncased-finetuned-emotion"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mibo_Repml(PetrainedTextClassifier):
    name = "MiBo/RepML"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
    }
    num_classes = 23

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mibo_Sabert(PetrainedTextClassifier):
    name = "MiBo/SABERT"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mibo_Sadistilgpt2(PetrainedTextClassifier):
    name = "MiBo/SADistilGPT2"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mibo_Sagpt2(PetrainedTextClassifier):
    name = "MiBo/SAGPT2"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpBamboo(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-bamboo"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpClover(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-clover"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpDatamanagement(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-datamanagement"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpDuracloud(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-duracloud"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpJirasoftware(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-jirasoftware"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpMesos(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpMoodle(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-moodle"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpMule(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpMulestudio(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpSpringxd(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-springxd"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpTalenddataquality(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-talenddataquality"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpTalendesb(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-talendesb"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpTitanium(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_0Gpt2SpUsergrid(PetrainedTextClassifier):
    name = "MickyMike/0-GPT2SP-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_00Gpt2SpAppceleratorstudioAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/00-GPT2SP-appceleratorstudio-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_00Gpt2SpAppceleratorstudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/00-GPT2SP-appceleratorstudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_00Gpt2SpAptanastudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/00-GPT2SP-aptanastudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_00Gpt2SpMesosUsergrid(PetrainedTextClassifier):
    name = "MickyMike/00-GPT2SP-mesos-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_00Gpt2SpMuleMulestudio(PetrainedTextClassifier):
    name = "MickyMike/00-GPT2SP-mule-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_00Gpt2SpMulestudioMule(PetrainedTextClassifier):
    name = "MickyMike/00-GPT2SP-mulestudio-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_00Gpt2SpTitaniumAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/00-GPT2SP-titanium-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_00Gpt2SpUsergridMesos(PetrainedTextClassifier):
    name = "MickyMike/00-GPT2SP-usergrid-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_000Gpt2SpAppceleratorstudioMule(PetrainedTextClassifier):
    name = "MickyMike/000-GPT2SP-appceleratorstudio-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_000Gpt2SpAppceleratorstudioMulestudio(PetrainedTextClassifier):
    name = "MickyMike/000-GPT2SP-appceleratorstudio-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_000Gpt2SpCloverUsergrid(PetrainedTextClassifier):
    name = "MickyMike/000-GPT2SP-clover-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_000Gpt2SpMuleTitanium(PetrainedTextClassifier):
    name = "MickyMike/000-GPT2SP-mule-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_000Gpt2SpMulestudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/000-GPT2SP-mulestudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_000Gpt2SpTalenddataqualityAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/000-GPT2SP-talenddataquality-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_000Gpt2SpTalenddataqualityAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/000-GPT2SP-talenddataquality-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_000Gpt2SpTalendesbMesos(PetrainedTextClassifier):
    name = "MickyMike/000-GPT2SP-talendesb-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpBamboo(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-bamboo"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpClover(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-clover"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpDatamanagement(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-datamanagement"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpDuracloud(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-duracloud"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpJirasoftware(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-jirasoftware"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpMesos(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpMoodle(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-moodle"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpMule(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpMulestudio(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpSpringxd(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-springxd"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpTalenddataquality(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-talenddataquality"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpTalendesb(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-talendesb"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpTitanium(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_1Gpt2SpUsergrid(PetrainedTextClassifier):
    name = "MickyMike/1-GPT2SP-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_11Gpt2SpAppceleratorstudioAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/11-GPT2SP-appceleratorstudio-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_11Gpt2SpAppceleratorstudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/11-GPT2SP-appceleratorstudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_11Gpt2SpAptanastudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/11-GPT2SP-aptanastudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_11Gpt2SpMesosUsergrid(PetrainedTextClassifier):
    name = "MickyMike/11-GPT2SP-mesos-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_11Gpt2SpMuleMulestudio(PetrainedTextClassifier):
    name = "MickyMike/11-GPT2SP-mule-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_11Gpt2SpMulestudioMule(PetrainedTextClassifier):
    name = "MickyMike/11-GPT2SP-mulestudio-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_11Gpt2SpTitaniumAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/11-GPT2SP-titanium-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_11Gpt2SpUsergridMesos(PetrainedTextClassifier):
    name = "MickyMike/11-GPT2SP-usergrid-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_111Gpt2SpAppceleratorstudioMule(PetrainedTextClassifier):
    name = "MickyMike/111-GPT2SP-appceleratorstudio-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_111Gpt2SpAppceleratorstudioMulestudio(PetrainedTextClassifier):
    name = "MickyMike/111-GPT2SP-appceleratorstudio-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_111Gpt2SpCloverUsergrid(PetrainedTextClassifier):
    name = "MickyMike/111-GPT2SP-clover-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_111Gpt2SpMuleTitanium(PetrainedTextClassifier):
    name = "MickyMike/111-GPT2SP-mule-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_111Gpt2SpMulestudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/111-GPT2SP-mulestudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_111Gpt2SpTalenddataqualityAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/111-GPT2SP-talenddataquality-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_111Gpt2SpTalenddataqualityAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/111-GPT2SP-talenddataquality-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_111Gpt2SpTalendesbMesos(PetrainedTextClassifier):
    name = "MickyMike/111-GPT2SP-talendesb-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpBamboo(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-bamboo"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpClover(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-clover"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpDatamanagement(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-datamanagement"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpDuracloud(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-duracloud"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpJirasoftware(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-jirasoftware"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpMesos(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpMoodle(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-moodle"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpMule(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpMulestudio(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpSpringxd(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-springxd"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpTalenddataquality(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-talenddataquality"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpTalendesb(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-talendesb"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpTitanium(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_2Gpt2SpUsergrid(PetrainedTextClassifier):
    name = "MickyMike/2-GPT2SP-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_22Gpt2SpAppceleratorstudioAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/22-GPT2SP-appceleratorstudio-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_22Gpt2SpAppceleratorstudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/22-GPT2SP-appceleratorstudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_22Gpt2SpAptanastudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/22-GPT2SP-aptanastudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_22Gpt2SpMesosUsergrid(PetrainedTextClassifier):
    name = "MickyMike/22-GPT2SP-mesos-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_22Gpt2SpMuleMulestudio(PetrainedTextClassifier):
    name = "MickyMike/22-GPT2SP-mule-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_22Gpt2SpMulestudioMule(PetrainedTextClassifier):
    name = "MickyMike/22-GPT2SP-mulestudio-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_22Gpt2SpTitaniumAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/22-GPT2SP-titanium-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_22Gpt2SpUsergridMesos(PetrainedTextClassifier):
    name = "MickyMike/22-GPT2SP-usergrid-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_222Gpt2SpAppceleratorstudioMule(PetrainedTextClassifier):
    name = "MickyMike/222-GPT2SP-appceleratorstudio-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_222Gpt2SpAppceleratorstudioMulestudio(PetrainedTextClassifier):
    name = "MickyMike/222-GPT2SP-appceleratorstudio-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_222Gpt2SpCloverUsergrid(PetrainedTextClassifier):
    name = "MickyMike/222-GPT2SP-clover-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_222Gpt2SpMuleTitanium(PetrainedTextClassifier):
    name = "MickyMike/222-GPT2SP-mule-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_222Gpt2SpMulestudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/222-GPT2SP-mulestudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_222Gpt2SpTalenddataqualityAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/222-GPT2SP-talenddataquality-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_222Gpt2SpTalenddataqualityAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/222-GPT2SP-talenddataquality-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_222Gpt2SpTalendesbMesos(PetrainedTextClassifier):
    name = "MickyMike/222-GPT2SP-talendesb-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpBamboo(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-bamboo"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpClover(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-clover"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpDatamanagement(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-datamanagement"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpDuracloud(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-duracloud"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpJirasoftware(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-jirasoftware"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpMesos(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpMoodle(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-moodle"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpMule(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpMulestudio(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpSpringxd(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-springxd"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpTalenddataquality(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-talenddataquality"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpTalendesb(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-talendesb"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpTitanium(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_6Gpt2SpUsergrid(PetrainedTextClassifier):
    name = "MickyMike/6-GPT2SP-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_66Gpt2SpAppceleratorstudioAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/66-GPT2SP-appceleratorstudio-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_66Gpt2SpAppceleratorstudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/66-GPT2SP-appceleratorstudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_66Gpt2SpAptanastudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/66-GPT2SP-aptanastudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_66Gpt2SpMesosUsergrid(PetrainedTextClassifier):
    name = "MickyMike/66-GPT2SP-mesos-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_66Gpt2SpMuleMulestudio(PetrainedTextClassifier):
    name = "MickyMike/66-GPT2SP-mule-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_66Gpt2SpMulestudioMule(PetrainedTextClassifier):
    name = "MickyMike/66-GPT2SP-mulestudio-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_66Gpt2SpTitaniumAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/66-GPT2SP-titanium-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_66Gpt2SpUsergridMesos(PetrainedTextClassifier):
    name = "MickyMike/66-GPT2SP-usergrid-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_666Gpt2SpAppceleratorstudioMule(PetrainedTextClassifier):
    name = "MickyMike/666-GPT2SP-appceleratorstudio-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_666Gpt2SpAppceleratorstudioMulestudio(PetrainedTextClassifier):
    name = "MickyMike/666-GPT2SP-appceleratorstudio-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_666Gpt2SpCloverUsergrid(PetrainedTextClassifier):
    name = "MickyMike/666-GPT2SP-clover-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_666Gpt2SpMuleTitanium(PetrainedTextClassifier):
    name = "MickyMike/666-GPT2SP-mule-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_666Gpt2SpMulestudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/666-GPT2SP-mulestudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_666Gpt2SpTalenddataqualityAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/666-GPT2SP-talenddataquality-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_666Gpt2SpTalenddataqualityAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/666-GPT2SP-talenddataquality-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_666Gpt2SpTalendesbMesos(PetrainedTextClassifier):
    name = "MickyMike/666-GPT2SP-talendesb-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpBamboo(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-bamboo"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpClover(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-clover"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpDatamanagement(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-datamanagement"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpDuracloud(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-duracloud"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpJirasoftware(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-jirasoftware"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpMesos(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpMoodle(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-moodle"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpMule(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpMulestudio(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpSpringxd(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-springxd"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpTalenddataquality(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-talenddataquality"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpTalendesb(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-talendesb"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpTitanium(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_7Gpt2SpUsergrid(PetrainedTextClassifier):
    name = "MickyMike/7-GPT2SP-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_77Gpt2SpAppceleratorstudioAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/77-GPT2SP-appceleratorstudio-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_77Gpt2SpAppceleratorstudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/77-GPT2SP-appceleratorstudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_77Gpt2SpAptanastudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/77-GPT2SP-aptanastudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_77Gpt2SpMesosUsergrid(PetrainedTextClassifier):
    name = "MickyMike/77-GPT2SP-mesos-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_77Gpt2SpMuleMulestudio(PetrainedTextClassifier):
    name = "MickyMike/77-GPT2SP-mule-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_77Gpt2SpMulestudioMule(PetrainedTextClassifier):
    name = "MickyMike/77-GPT2SP-mulestudio-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_77Gpt2SpTitaniumAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/77-GPT2SP-titanium-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_77Gpt2SpUsergridMesos(PetrainedTextClassifier):
    name = "MickyMike/77-GPT2SP-usergrid-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_777Gpt2SpAppceleratorstudioMule(PetrainedTextClassifier):
    name = "MickyMike/777-GPT2SP-appceleratorstudio-mule"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_777Gpt2SpAppceleratorstudioMulestudio(PetrainedTextClassifier):
    name = "MickyMike/777-GPT2SP-appceleratorstudio-mulestudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_777Gpt2SpCloverUsergrid(PetrainedTextClassifier):
    name = "MickyMike/777-GPT2SP-clover-usergrid"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_777Gpt2SpMuleTitanium(PetrainedTextClassifier):
    name = "MickyMike/777-GPT2SP-mule-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_777Gpt2SpMulestudioTitanium(PetrainedTextClassifier):
    name = "MickyMike/777-GPT2SP-mulestudio-titanium"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_777Gpt2SpTalenddataqualityAppceleratorstudio(PetrainedTextClassifier):
    name = "MickyMike/777-GPT2SP-talenddataquality-appceleratorstudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_777Gpt2SpTalenddataqualityAptanastudio(PetrainedTextClassifier):
    name = "MickyMike/777-GPT2SP-talenddataquality-aptanastudio"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mickymike_777Gpt2SpTalendesbMesos(PetrainedTextClassifier):
    name = "MickyMike/777-GPT2SP-talendesb-mesos"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mihneo_Romanian_Bert_News(PetrainedTextClassifier):
    name = "Mihneo/romanian_bert_news"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Milanlproc_FeelItItalianEmotion(PetrainedTextClassifier):
    name = "MilaNLProc/feel-it-italian-emotion"
    id2label = {"0": "anger", "1": "fear", "2": "joy", "3": "sadness"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Milanlproc_FeelItItalianSentiment(PetrainedTextClassifier):
    name = "MilaNLProc/feel-it-italian-sentiment"
    id2label = {"0": "negative", "1": "positive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Milian_Bert_Finetuning_Test(PetrainedTextClassifier):
    name = "Milian/bert_finetuning_test"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mingyi_Classify_Title_Subject(PetrainedTextClassifier):
    name = "Mingyi/classify_title_subject"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
    }
    num_classes = 8

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Misbahf_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "MisbaHF/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moaazzaki_Machathonmodel(PetrainedTextClassifier):
    name = "MoaazZaki/machathonmodel"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
        "23": "LABEL_23",
        "24": "LABEL_24",
        "25": "LABEL_25",
        "26": "LABEL_26",
        "27": "LABEL_27",
        "28": "LABEL_28",
        "29": "LABEL_29",
        "30": "LABEL_30",
        "31": "LABEL_31",
        "32": "LABEL_32",
        "33": "LABEL_33",
        "34": "LABEL_34",
        "35": "LABEL_35",
        "36": "LABEL_36",
        "37": "LABEL_37",
        "38": "LABEL_38",
        "39": "LABEL_39",
    }
    num_classes = 40

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Modfiededition_BertFineTunedCola(PetrainedTextClassifier):
    name = "Modfiededition/bert-fine-tuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Modfiededition_DummyModel(PetrainedTextClassifier):
    name = "Modfiededition/dummy-model"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mohammadabh_BertweetFinetunedRbam(PetrainedTextClassifier):
    name = "MohammadABH/bertweet-finetuned-rbam"
    id2label = {"0": "attack", "1": "neutral", "2": "support"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mohammadabh_TwitterRobertaBaseDec2021_Rbam_Fine_Tuned(PetrainedTextClassifier):
    name = "MohammadABH/twitter-roberta-base-dec2021_rbam_fine_tuned"
    id2label = {"0": "attack", "1": "neutral", "2": "support"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Monsia_AutonlpTweetsClassification(PetrainedTextClassifier):
    name = "Monsia/autonlp-tweets-classification-23044997"
    id2label = {
        "0": "Harmful_Traditional_practice",
        "1": "Physical_violence",
        "2": "economic_violence",
        "3": "emotional_violence",
        "4": "sexual_violence",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Monsia_CamembertFrCovidTweetClassification(PetrainedTextClassifier):
    name = "Monsia/camembert-fr-covid-tweet-classification"
    id2label = {
        "0": "statistiques",
        "1": "mesures",
        "2": "opinions",
        "3": "symptomes",
        "4": "divers",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Data354_CamembertFrCovidTweetSentimentClassification(PetrainedTextClassifier):
    name = "data354/camembert-fr-covid-tweet-sentiment-classification"
    id2label = {"0": "negatif", "1": "neutre", "2": "positif"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_DebertaV3BaseMnliFeverAnli(PetrainedTextClassifier):
    name = "MoritzLaurer/DeBERTa-v3-base-mnli-fever-anli"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_DebertaV3BaseMnliFeverDocnliLingC(PetrainedTextClassifier):
    name = "MoritzLaurer/DeBERTa-v3-base-mnli-fever-docnli-ling-2c"
    id2label = {"0": "entailment", "1": "not_entailment"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_DebertaV3BaseMnli(PetrainedTextClassifier):
    name = "MoritzLaurer/DeBERTa-v3-base-mnli"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_DebertaV3SmallMnliFeverDocnliLingC(PetrainedTextClassifier):
    name = "MoritzLaurer/DeBERTa-v3-small-mnli-fever-docnli-ling-2c"
    id2label = {"0": "entailment", "1": "not_entailment"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_DebertaV3XsmallMnliFeverAnliLingBinary(PetrainedTextClassifier):
    name = "MoritzLaurer/DeBERTa-v3-xsmall-mnli-fever-anli-ling-binary"
    id2label = {"0": "entailment", "1": "not_entailment"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_MinilmL6MnliBinary(PetrainedTextClassifier):
    name = "MoritzLaurer/MiniLM-L6-mnli-binary"
    id2label = {"0": "entailment", "1": "not_entailment"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_MinilmL6MnliFeverDocnliLingC(PetrainedTextClassifier):
    name = "MoritzLaurer/MiniLM-L6-mnli-fever-docnli-ling-2c"
    id2label = {"0": "entailment", "1": "not_entailment"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_MinilmL6Mnli(PetrainedTextClassifier):
    name = "MoritzLaurer/MiniLM-L6-mnli"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_CovidPolicyRoberta(PetrainedTextClassifier):
    name = "MoritzLaurer/covid-policy-roberta-21"
    id2label = {
        "0": "Anti-Disinformation Measures",
        "1": "Closure and Regulation of Schools",
        "10": "Lockdown",
        "11": "New Task Force, Bureau or Administrative Configuration",
        "12": "Other Policy Not Listed Above",
        "13": "Public Awareness Measures",
        "14": "Quarantine",
        "15": "Restriction and Regulation of Businesses",
        "16": "Restriction and Regulation of Government Services",
        "17": "Restrictions of Mass Gatherings",
        "18": "Social Distancing",
        "19": "COVID-19 Vaccines",
        "2": "Curfew",
        "20": "Other",
        "3": "Declaration of Emergency",
        "4": "External Border Restrictions",
        "5": "Health Monitoring",
        "6": "Health Resources",
        "7": "Health Testing",
        "8": "Hygiene",
        "9": "Internal Border Restrictions",
    }
    num_classes = 21

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_MdebertaV3BaseMnliXnli(PetrainedTextClassifier):
    name = "MoritzLaurer/mDeBERTa-v3-base-mnli-xnli"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_PolicyDistilbertD(PetrainedTextClassifier):
    name = "MoritzLaurer/policy-distilbert-7d"
    id2label = {
        "0": "external relations",
        "1": "freedom and democracy",
        "2": "political system",
        "3": "economy",
        "4": "welfare and quality of life",
        "5": "fabric of society",
        "6": "social groups",
    }
    num_classes = 7

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Moritzlaurer_XtremedistilL6H256MnliFeverAnliLingBinary(PetrainedTextClassifier):
    name = "MoritzLaurer/xtremedistil-l6-h256-mnli-fever-anli-ling-binary"
    id2label = {"0": "entailment", "1": "not_entailment"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Motahar_DistilbertSst2Mahtab(PetrainedTextClassifier):
    name = "Motahar/distilbert-sst2-mahtab"
    id2label = {"0": "NEGATIVE", "1": "POSITIVE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mulin_My_Wolf_Model(PetrainedTextClassifier):
    name = "Mulin/my_wolf_model"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
    }
    num_classes = 12

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mustang_Bert_Responsible_Ai(PetrainedTextClassifier):
    name = "Mustang/BERT_responsible_AI"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Mutazyoune_Absa_Aspectsentiment_Hotels(PetrainedTextClassifier):
    name = "MutazYoune/Absa_AspectSentiment_hotels"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ndugar_1Epochv3(PetrainedTextClassifier):
    name = "NDugar/1epochv3"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ndugar_2Epochv3Mlni(PetrainedTextClassifier):
    name = "NDugar/2epochv3mlni"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ndugar_3EpochLarge(PetrainedTextClassifier):
    name = "NDugar/3epoch-3large"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ndugar_ZsdMicrosoftV2Xxlmnli(PetrainedTextClassifier):
    name = "NDugar/ZSD-microsoft-v2xxlmnli"
    id2label = {"0": "CONTRADICTION", "1": "NEUTRAL", "2": "ENTAILMENT"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ndugar_DebertaV2XlargeMnli(PetrainedTextClassifier):
    name = "NDugar/deberta-v2-xlarge-mnli"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ndugar_Debertav3MnliSnliAnli(PetrainedTextClassifier):
    name = "NDugar/debertav3-mnli-snli-anli"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ndugar_FinetunedBertMrpc(PetrainedTextClassifier):
    name = "NDugar/finetuned-bert-mrpc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ndugar_V2XlAgainMnli(PetrainedTextClassifier):
    name = "NDugar/v2xl-again-mnli"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ndugar_V3LargeMnli(PetrainedTextClassifier):
    name = "NDugar/v3-Large-mnli"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ndugar_V3LargeEpoch(PetrainedTextClassifier):
    name = "NDugar/v3large-1epoch"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ndugar_V3LargeEpoch(PetrainedTextClassifier):
    name = "NDugar/v3large-2epoch"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ntuyg_DeepsccRoberta(PetrainedTextClassifier):
    name = "NTUYG/DeepSCC-RoBERTa"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
    }
    num_classes = 19

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Nytk_SentimentHts2HubertHungarian(PetrainedTextClassifier):
    name = "NYTK/sentiment-hts2-hubert-hungarian"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Nytk_SentimentHts2XlmRobertaHungarian(PetrainedTextClassifier):
    name = "NYTK/sentiment-hts2-xlm-roberta-hungarian"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Nytk_SentimentHts5HubertHungarian(PetrainedTextClassifier):
    name = "NYTK/sentiment-hts5-hubert-hungarian"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Nytk_SentimentHts5XlmRobertaHungarian(PetrainedTextClassifier):
    name = "NYTK/sentiment-hts5-xlm-roberta-hungarian"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Nalinik_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "NaliniK/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Narrativa_DistilrobertaFinetunedStereotypeDetection(PetrainedTextClassifier):
    name = "Narrativa/distilroberta-finetuned-stereotype-detection"
    id2label = {"0": "neutral", "1": "stereotype", "2": " anti-stereotype"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Narrativaai_DebertaV3SmallFinetunedHate_Speech18(PetrainedTextClassifier):
    name = "Narrativaai/deberta-v3-small-finetuned-hate_speech18"
    id2label = {"0": "NO_HATE", "1": "HATE", "2": "IDK", "3": "RELATION"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Narrativaai_FakeNewsDetectionSpanish(PetrainedTextClassifier):
    name = "Narrativaai/fake-news-detection-spanish"
    id2label = {"0": "REAL", "1": "FAKE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Narsil_DebertaLargeMnliZeroCls(PetrainedTextClassifier):
    name = "Narsil/deberta-large-mnli-zero-cls"
    id2label = {"0": "CONTRADICTION", "1": "NEUTRAL", "2": "ENTAILMENT"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Narsil_TinyDistilbertSequenceClassification(PetrainedTextClassifier):
    name = "Narsil/tiny-distilbert-sequence-classification"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Nathanzhu_Gabhatecorpustrained(PetrainedTextClassifier):
    name = "NathanZhu/GabHateCorpusTrained"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Nbailab_NbBertBaseMnli(PetrainedTextClassifier):
    name = "NbAiLab/nb-bert-base-mnli"
    id2label = {"0": "contradiction", "1": "neutral", "2": "entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Nbailab_NbBertBaseSamiRelevant(PetrainedTextClassifier):
    name = "NbAiLab/nb-bert-base-sami-relevant"
    id2label = {"0": "Not Sami Relevant", "1": "Sami Relevant"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Nenma_RomanianBertFakeNews(PetrainedTextClassifier):
    name = "Nenma/romanian-bert-fake-news"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Newtral_XlmRFinetunedToxicPoliticalTweetsEs(PetrainedTextClassifier):
    name = "Newtral/xlm-r-finetuned-toxic-political-tweets-es"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Nikolajmunch_DanishEmotionClassification(PetrainedTextClassifier):
    name = "NikolajMunch/danish-emotion-classification"
    id2label = {
        "0": "Afsky",
        "1": "Frygt",
        "2": "Glæde",
        "3": "Overraskelse",
        "4": "Tristhed",
        "5": "Vrede",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Nikolajw_Baselinethesis(PetrainedTextClassifier):
    name = "NikolajW/BaselineThesis"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
    }
    num_classes = 19

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Noxel_Sentiments_Multilenguaje(PetrainedTextClassifier):
    name = "Noxel/sentiments_multilenguaje"
    id2label = {
        "0": "1 star",
        "1": "2 stars",
        "2": "3 stars",
        "3": "4 stars",
        "4": "5 stars",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Omar95Farag_DistilbertBaseUncasedDistilledClinc(PetrainedTextClassifier):
    name = "Omar95farag/distilbert-base-uncased-distilled-clinc"
    id2label = {
        "0": "restaurant_reviews",
        "1": "nutrition_info",
        "2": "account_blocked",
        "3": "oil_change_how",
        "4": "time",
        "5": "weather",
        "6": "redeem_rewards",
        "7": "interest_rate",
        "8": "gas_type",
        "9": "accept_reservations",
        "10": "smart_home",
        "11": "user_name",
        "12": "report_lost_card",
        "13": "repeat",
        "14": "whisper_mode",
        "15": "what_are_your_hobbies",
        "16": "order",
        "17": "jump_start",
        "18": "schedule_meeting",
        "19": "meeting_schedule",
        "20": "freeze_account",
        "21": "what_song",
        "22": "meaning_of_life",
        "23": "restaurant_reservation",
        "24": "traffic",
        "25": "make_call",
        "26": "text",
        "27": "bill_balance",
        "28": "improve_credit_score",
        "29": "change_language",
        "30": "no",
        "31": "measurement_conversion",
        "32": "timer",
        "33": "flip_coin",
        "34": "do_you_have_pets",
        "35": "balance",
        "36": "tell_joke",
        "37": "last_maintenance",
        "38": "exchange_rate",
        "39": "uber",
        "40": "car_rental",
        "41": "credit_limit",
        "42": "oos",
        "43": "shopping_list",
        "44": "expiration_date",
        "45": "routing",
        "46": "meal_suggestion",
        "47": "tire_change",
        "48": "todo_list",
        "49": "card_declined",
        "50": "rewards_balance",
        "51": "change_accent",
        "52": "vaccines",
        "53": "reminder_update",
        "54": "food_last",
        "55": "change_ai_name",
        "56": "bill_due",
        "57": "who_do_you_work_for",
        "58": "share_location",
        "59": "international_visa",
        "60": "calendar",
        "61": "translate",
        "62": "carry_on",
        "63": "book_flight",
        "64": "insurance_change",
        "65": "todo_list_update",
        "66": "timezone",
        "67": "cancel_reservation",
        "68": "transactions",
        "69": "credit_score",
        "70": "report_fraud",
        "71": "spending_history",
        "72": "directions",
        "73": "spelling",
        "74": "insurance",
        "75": "what_is_your_name",
        "76": "reminder",
        "77": "where_are_you_from",
        "78": "distance",
        "79": "payday",
        "80": "flight_status",
        "81": "find_phone",
        "82": "greeting",
        "83": "alarm",
        "84": "order_status",
        "85": "confirm_reservation",
        "86": "cook_time",
        "87": "damaged_card",
        "88": "reset_settings",
        "89": "pin_change",
        "90": "replacement_card_duration",
        "91": "new_card",
        "92": "roll_dice",
        "93": "income",
        "94": "taxes",
        "95": "date",
        "96": "who_made_you",
        "97": "pto_request",
        "98": "tire_pressure",
        "99": "how_old_are_you",
        "100": "rollover_401k",
        "101": "pto_request_status",
        "102": "how_busy",
        "103": "application_status",
        "104": "recipe",
        "105": "calendar_update",
        "106": "play_music",
        "107": "yes",
        "108": "direct_deposit",
        "109": "credit_limit_change",
        "110": "gas",
        "111": "pay_bill",
        "112": "ingredients_list",
        "113": "lost_luggage",
        "114": "goodbye",
        "115": "what_can_i_ask_you",
        "116": "book_hotel",
        "117": "are_you_a_bot",
        "118": "next_song",
        "119": "change_speed",
        "120": "plug_type",
        "121": "maybe",
        "122": "w2",
        "123": "oil_change_when",
        "124": "thank_you",
        "125": "shopping_list_update",
        "126": "pto_balance",
        "127": "order_checks",
        "128": "travel_alert",
        "129": "fun_fact",
        "130": "sync_device",
        "131": "schedule_maintenance",
        "132": "apr",
        "133": "transfer",
        "134": "ingredient_substitution",
        "135": "calories",
        "136": "current_location",
        "137": "international_fees",
        "138": "calculator",
        "139": "definition",
        "140": "next_holiday",
        "141": "update_playlist",
        "142": "mpg",
        "143": "min_payment",
        "144": "change_user_name",
        "145": "restaurant_suggestion",
        "146": "travel_notification",
        "147": "cancel",
        "148": "pto_used",
        "149": "travel_suggestion",
        "150": "change_volume",
    }
    num_classes = 151

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Omar95Farag_DistilbertBaseUncasedFinetunedClinc(PetrainedTextClassifier):
    name = "Omar95farag/distilbert-base-uncased-finetuned-clinc"
    id2label = {
        "0": "restaurant_reviews",
        "1": "nutrition_info",
        "2": "account_blocked",
        "3": "oil_change_how",
        "4": "time",
        "5": "weather",
        "6": "redeem_rewards",
        "7": "interest_rate",
        "8": "gas_type",
        "9": "accept_reservations",
        "10": "smart_home",
        "11": "user_name",
        "12": "report_lost_card",
        "13": "repeat",
        "14": "whisper_mode",
        "15": "what_are_your_hobbies",
        "16": "order",
        "17": "jump_start",
        "18": "schedule_meeting",
        "19": "meeting_schedule",
        "20": "freeze_account",
        "21": "what_song",
        "22": "meaning_of_life",
        "23": "restaurant_reservation",
        "24": "traffic",
        "25": "make_call",
        "26": "text",
        "27": "bill_balance",
        "28": "improve_credit_score",
        "29": "change_language",
        "30": "no",
        "31": "measurement_conversion",
        "32": "timer",
        "33": "flip_coin",
        "34": "do_you_have_pets",
        "35": "balance",
        "36": "tell_joke",
        "37": "last_maintenance",
        "38": "exchange_rate",
        "39": "uber",
        "40": "car_rental",
        "41": "credit_limit",
        "42": "oos",
        "43": "shopping_list",
        "44": "expiration_date",
        "45": "routing",
        "46": "meal_suggestion",
        "47": "tire_change",
        "48": "todo_list",
        "49": "card_declined",
        "50": "rewards_balance",
        "51": "change_accent",
        "52": "vaccines",
        "53": "reminder_update",
        "54": "food_last",
        "55": "change_ai_name",
        "56": "bill_due",
        "57": "who_do_you_work_for",
        "58": "share_location",
        "59": "international_visa",
        "60": "calendar",
        "61": "translate",
        "62": "carry_on",
        "63": "book_flight",
        "64": "insurance_change",
        "65": "todo_list_update",
        "66": "timezone",
        "67": "cancel_reservation",
        "68": "transactions",
        "69": "credit_score",
        "70": "report_fraud",
        "71": "spending_history",
        "72": "directions",
        "73": "spelling",
        "74": "insurance",
        "75": "what_is_your_name",
        "76": "reminder",
        "77": "where_are_you_from",
        "78": "distance",
        "79": "payday",
        "80": "flight_status",
        "81": "find_phone",
        "82": "greeting",
        "83": "alarm",
        "84": "order_status",
        "85": "confirm_reservation",
        "86": "cook_time",
        "87": "damaged_card",
        "88": "reset_settings",
        "89": "pin_change",
        "90": "replacement_card_duration",
        "91": "new_card",
        "92": "roll_dice",
        "93": "income",
        "94": "taxes",
        "95": "date",
        "96": "who_made_you",
        "97": "pto_request",
        "98": "tire_pressure",
        "99": "how_old_are_you",
        "100": "rollover_401k",
        "101": "pto_request_status",
        "102": "how_busy",
        "103": "application_status",
        "104": "recipe",
        "105": "calendar_update",
        "106": "play_music",
        "107": "yes",
        "108": "direct_deposit",
        "109": "credit_limit_change",
        "110": "gas",
        "111": "pay_bill",
        "112": "ingredients_list",
        "113": "lost_luggage",
        "114": "goodbye",
        "115": "what_can_i_ask_you",
        "116": "book_hotel",
        "117": "are_you_a_bot",
        "118": "next_song",
        "119": "change_speed",
        "120": "plug_type",
        "121": "maybe",
        "122": "w2",
        "123": "oil_change_when",
        "124": "thank_you",
        "125": "shopping_list_update",
        "126": "pto_balance",
        "127": "order_checks",
        "128": "travel_alert",
        "129": "fun_fact",
        "130": "sync_device",
        "131": "schedule_maintenance",
        "132": "apr",
        "133": "transfer",
        "134": "ingredient_substitution",
        "135": "calories",
        "136": "current_location",
        "137": "international_fees",
        "138": "calculator",
        "139": "definition",
        "140": "next_holiday",
        "141": "update_playlist",
        "142": "mpg",
        "143": "min_payment",
        "144": "change_user_name",
        "145": "restaurant_suggestion",
        "146": "travel_notification",
        "147": "cancel",
        "148": "pto_used",
        "149": "travel_suggestion",
        "150": "change_volume",
    }
    num_classes = 151

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Osiris_Emotion_Classifier(PetrainedTextClassifier):
    name = "Osiris/emotion_classifier"
    id2label = {"0": "Positive", "1": "Negative"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Osiris_Neutral_Non_Neutral_Classifier(PetrainedTextClassifier):
    name = "Osiris/neutral_non_neutral_classifier"
    id2label = {"0": "Neutral", "1": "Non-Neutral"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Parsa_Bbb_Prediction_Classification_Iupac(PetrainedTextClassifier):
    name = "Parsa/BBB_prediction_classification_IUPAC"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Parsa_Bbb_Prediction_Classification_Smiles(PetrainedTextClassifier):
    name = "Parsa/BBB_prediction_classification_SMILES"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Peterard_Distilbert_Bug_Classifier(PetrainedTextClassifier):
    name = "Peterard/distilbert_bug_classifier"
    id2label = {"0": "no_bug", "1": "bug"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Peterard_Distilbert_Feature_Classifier(PetrainedTextClassifier):
    name = "Peterard/distilbert_feature_classifier"
    id2label = {"0": "no_feature_request", "1": "feature_request"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Pratibha_XlmRobertaBaseFinetunedMarcEn(PetrainedTextClassifier):
    name = "Pratibha/xlm-roberta-base-finetuned-marc-en"
    id2label = {"0": "terrible", "1": "poor", "2": "ok", "3": "good", "4": "great"}
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Proggleb_RobertaBaseBneFinetunedAmazon_Reviews_Multi(PetrainedTextClassifier):
    name = "Proggleb/roberta-base-bne-finetuned-amazon_reviews_multi"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Prompsit_ParaphraseBertEn(PetrainedTextClassifier):
    name = "Prompsit/paraphrase-bert-en"
    id2label = {"0": "Not Paraphrase", "1": "Paraphrase"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Prompsit_ParaphraseBertPt(PetrainedTextClassifier):
    name = "Prompsit/paraphrase-bert-pt"
    id2label = {"0": "Not Paraphrase", "1": "Paraphrase"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Prompsit_ParaphraseRobertaEs(PetrainedTextClassifier):
    name = "Prompsit/paraphrase-roberta-es"
    id2label = {"0": "Not Paraphrase", "1": "Paraphrase"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Prosusai_Finbert(PetrainedTextClassifier):
    name = "ProsusAI/finbert"
    id2label = {"0": "positive", "1": "negative", "2": "neutral"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Pubchimps_DlBert(PetrainedTextClassifier):
    name = "PubChimps/dl-bert"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Pubchimps_Dlfbert(PetrainedTextClassifier):
    name = "PubChimps/dlfBERT"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Qiaozhen_FakeNewsDetector(PetrainedTextClassifier):
    name = "Qiaozhen/fake-news-detector"
    id2label = {"0": "real", "1": "fake"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Qinghui_AutonlpFakeCovidNews(PetrainedTextClassifier):
    name = "Qinghui/autonlp-fake-covid-news-36769078"
    id2label = {"0": "0", "1": "1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Radella_Quora_Helpful_Answers_Classifier(PetrainedTextClassifier):
    name = "Radella/quora_helpful_answers_classifier"
    id2label = {"0": "unhelpful", "1": "helpful"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ramesharvind_Roberta_Long_Answer_Nq(PetrainedTextClassifier):
    name = "RameshArvind/roberta_long_answer_nq"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Raychanan_BertBaseChineseFinetunedBinaryBest(PetrainedTextClassifier):
    name = "Raychanan/bert-base-chinese-FineTuned-Binary-Best"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Raychanan_ChineseRobertaWwmExtFinetunedBinary(PetrainedTextClassifier):
    name = "Raychanan/chinese-roberta-wwm-ext-FineTuned-Binary"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Raychanan_ChineseRobertaWwmExtFinetuned(PetrainedTextClassifier):
    name = "Raychanan/chinese-roberta-wwm-ext-FineTuned"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Recognai_BertBaseSpanishWwmCasedXnli(PetrainedTextClassifier):
    name = "Recognai/bert-base-spanish-wwm-cased-xnli"
    id2label = {"0": "contradiction", "1": "neutral", "2": "entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Recognai_Zeroshot_Selectra_Medium(PetrainedTextClassifier):
    name = "Recognai/zeroshot_selectra_medium"
    id2label = {"0": "contradiction", "1": "neutral", "2": "entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Recognai_Zeroshot_Selectra_Small(PetrainedTextClassifier):
    name = "Recognai/zeroshot_selectra_small"
    id2label = {"0": "contradiction", "1": "neutral", "2": "entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Recordedfuture_SwedishSentimentFear(PetrainedTextClassifier):
    name = "RecordedFuture/Swedish-Sentiment-Fear"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Recordedfuture_SwedishSentimentViolence(PetrainedTextClassifier):
    name = "RecordedFuture/Swedish-Sentiment-Violence"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Rexhaif_RubertBaseSrl(PetrainedTextClassifier):
    name = "Rexhaif/rubert-base-srl"
    id2label = {"0": "инструмент", "1": "каузатор", "2": "экспериенцер"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Reynaquita_Twitter_Disaster_Bart(PetrainedTextClassifier):
    name = "ReynaQuita/twitter_disaster_bart"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Reynaquita_Twitter_Disaster_Bert_Large(PetrainedTextClassifier):
    name = "ReynaQuita/twitter_disaster_bert_large"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Reynaquita_Twitter_Disaster_Distilbert(PetrainedTextClassifier):
    name = "ReynaQuita/twitter_disaster_distilbert"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Riad_FinetunedBertMrpc(PetrainedTextClassifier):
    name = "Riad/finetuned-bert-mrpc"
    id2label = {"0": "not equivalent", "1": "equivalent"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ritvik_Nlp_Model(PetrainedTextClassifier):
    name = "Ritvik/nlp_model"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ritvik_Nlp_Model_Mini(PetrainedTextClassifier):
    name = "Ritvik/nlp_model_mini"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Roberta55_DebertaBaseMnliFinetunedCola(PetrainedTextClassifier):
    name = "Roberta55/deberta-base-mnli-finetuned-cola"
    id2label = {"0": "CONTRADICTION", "1": "NEUTRAL", "2": "ENTAILMENT"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Rocketknight1_BertFineTunedCola(PetrainedTextClassifier):
    name = "Rocketknight1/bert-fine-tuned-cola"
    id2label = {"0": "unacceptable", "1": "acceptable"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Rocketknight1_Callback_Test(PetrainedTextClassifier):
    name = "Rocketknight1/callback_test"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Rocketknight1_Checkpoint_Test(PetrainedTextClassifier):
    name = "Rocketknight1/checkpoint_test"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Rocketknight1_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "Rocketknight1/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "Invalid", "1": "Valid"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Rocketknight1_ModelCardCallbackTestNew(PetrainedTextClassifier):
    name = "Rocketknight1/model-card-callback-test-new"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Rocketknight1_ModelCardTest(PetrainedTextClassifier):
    name = "Rocketknight1/model-card-test"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Rocketknight1_Model_Card_Test2(PetrainedTextClassifier):
    name = "Rocketknight1/model_card_test2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Rocketknight1_Test_Callback_Upload(PetrainedTextClassifier):
    name = "Rocketknight1/test_callback_upload"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Rostlab_Prot_Bert_Bfd_Localization(PetrainedTextClassifier):
    name = "Rostlab/prot_bert_bfd_localization"
    id2label = {
        "0": "Cell.membrane",
        "1": "Cytoplasm",
        "2": "Endoplasmic.reticulum",
        "3": "Extracellular",
        "4": "Golgi.apparatus",
        "5": "Lysosome/Vacuole",
        "6": "Mitochondrion",
        "7": "Nucleus",
        "8": "Peroxisome",
        "9": "Plastid",
    }
    num_classes = 10

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Rostlab_Prot_Bert_Bfd_Membrane(PetrainedTextClassifier):
    name = "Rostlab/prot_bert_bfd_membrane"
    id2label = {"0": "Soluble", "1": "Membrane"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ruizhou_BertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "Ruizhou/bert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ruizhou_BertBaseUncasedFinetunedMrpc(PetrainedTextClassifier):
    name = "Ruizhou/bert-base-uncased-finetuned-mrpc"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ruizhou_BertBaseUncasedFinetunedRte(PetrainedTextClassifier):
    name = "Ruizhou/bert-base-uncased-finetuned-rte"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Saposs_PasswordModel(PetrainedTextClassifier):
    name = "SAPOSS/password-model"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Score_Claim2DistilbertBaseUncased(PetrainedTextClassifier):
    name = "SCORE/claim2-distilbert-base-uncased"
    id2label = {"0": "NOT CLAIM", "1": "CLAIM"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Score_Claim3ADistilbertBaseUncased(PetrainedTextClassifier):
    name = "SCORE/claim3a-distilbert-base-uncased"
    id2label = {"0": "NOT CLAIM", "1": "CLAIM"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Score_Claim3BDistilbertBaseUncased(PetrainedTextClassifier):
    name = "SCORE/claim3b-distilbert-base-uncased"
    id2label = {"0": "NOT CLAIM", "1": "CLAIM"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Seishin_DistilbertBaseUncasedFinetunedMnli(PetrainedTextClassifier):
    name = "SEISHIN/distilbert-base-uncased-finetuned-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ss8_Test(PetrainedTextClassifier):
    name = "SS8/test"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Ss8_Test2(PetrainedTextClassifier):
    name = "SS8/test2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Sahajtomar_German_Zeroshot(PetrainedTextClassifier):
    name = "Sahajtomar/German_Zeroshot"
    id2label = {"0": "entailment", "1": "neutral", "2": "contradiction"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Sakil_Imdb_Urdusentiment_Model(PetrainedTextClassifier):
    name = "Sakil/IMDB_URDUSENTIMENT_MODEL"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Sakil_Distilbert_Lazylearner_Hatespeech_Detection(PetrainedTextClassifier):
    name = "Sakil/distilbert_lazylearner_hatespeech_detection"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Sakil_Imdbsentdistilbertmodel(PetrainedTextClassifier):
    name = "Sakil/imdbsentdistilbertmodel"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Sarim24_Sarim24(PetrainedTextClassifier):
    name = "Sarim24/Sarim24"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Sebb_GermanNliBaseThesis(PetrainedTextClassifier):
    name = "Sebb/german-nli-base-thesis"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Sebb_GermanNliLargeThesis(PetrainedTextClassifier):
    name = "Sebb/german-nli-large-thesis"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Setfit_MinilmL12H384Uncased__Sst2__AllTrain(PetrainedTextClassifier):
    name = "SetFit/MiniLM-L12-H384-uncased__sst2__all-train"
    id2label = {"0": "negative", "1": "positive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Setfit_DebertaV3Base__Sst2__AllTrain(PetrainedTextClassifier):
    name = "SetFit/deberta-v3-base__sst2__all-train"
    id2label = {"0": "negative", "1": "positive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Setfit_DistilbertBaseUncased__TrecQc__AllTrain(PetrainedTextClassifier):
    name = "SetFit/distilbert-base-uncased__TREC-QC__all-train"
    id2label = {
        "0": "manner of an action",
        "1": "inventions, books and other creative pieces",
        "2": "animals",
        "3": "expression abbreviated",
        "4": "an individual",
        "5": "a group or organization of persons",
        "6": "title of a person",
        "7": "definition of something",
        "8": "dates",
        "9": "reasons",
        "10": "events",
        "11": "states",
        "12": "description of something",
        "13": "number of something",
        "14": "other entities",
        "15": "letters like a-z",
        "16": "other locations",
        "17": "religions",
        "18": "food",
        "19": "countries",
        "20": "colors",
        "21": "equivalent terms",
        "22": "cities",
        "23": "organs of body",
        "24": "diseases and medicine",
        "25": "mountains",
        "26": "prices",
        "27": "products",
        "28": "the lasting time of something",
        "29": "elements and substances",
        "30": "sports",
        "31": "plants",
        "32": "techniques and methods",
        "33": "size, area and volume",
        "34": "description of a person",
        "35": "musical instrument",
        "36": "abbreviation",
        "37": "other numbers",
        "38": "speed",
        "39": "words with a special property",
        "40": "languages",
        "41": "fractions",
        "42": "postcodes or other codes",
        "43": "linear measures",
        "44": "temperature",
        "45": "symbols and signs",
        "46": "ranks",
        "47": "vehicles",
        "48": "weight",
        "49": "currency names",
    }
    num_classes = 50

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Setfit_DistilbertBaseUncased__Enron_Spam__AllTrain(PetrainedTextClassifier):
    name = "SetFit/distilbert-base-uncased__enron_spam__all-train"
    id2label = {"0": "ham", "1": "spam"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Setfit_DistilbertBaseUncased__Ethos_Binary__AllTrain(PetrainedTextClassifier):
    name = "SetFit/distilbert-base-uncased__ethos_binary__all-train"
    id2label = {"0": "no hate speech", "1": "hate speech"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Setfit_DistilbertBaseUncased__Hate_Speech_Offensive__AllTrain(
    PetrainedTextClassifier
):
    name = "SetFit/distilbert-base-uncased__hate_speech_offensive__all-train"
    id2label = {"0": "hate speech", "1": "offensive language", "2": "neither"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Setfit_DistilbertBaseUncased__Sst2__AllTrain(PetrainedTextClassifier):
    name = "SetFit/distilbert-base-uncased__sst2__all-train"
    id2label = {"0": "negative", "1": "positive"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Setfit_DistilbertBaseUncased__Sst5__AllTrain(PetrainedTextClassifier):
    name = "SetFit/distilbert-base-uncased__sst5__all-train"
    id2label = {
        "0": "very negative",
        "1": "negative",
        "2": "neutral",
        "3": "positive",
        "4": "very positive",
    }
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Setfit_DistilbertBaseUncased__Subj__AllTrain(PetrainedTextClassifier):
    name = "SetFit/distilbert-base-uncased__subj__all-train"
    id2label = {"0": "objective", "1": "subjective"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Setfit_DistilbertBaseUncased__Tweet_Eval_Stance__AllTrain(
    PetrainedTextClassifier
):
    name = "SetFit/distilbert-base-uncased__tweet_eval_stance__all-train"
    id2label = {"0": "none", "1": "against", "2": "favor"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Sharansmenon_22LanguagesBertBaseCased(PetrainedTextClassifier):
    name = "SharanSMenon/22-languages-bert-base-cased"
    id2label = {
        "0": "Arabic",
        "1": "Chinese",
        "2": "Dutch",
        "3": "English",
        "4": "Estonian",
        "5": "French",
        "6": "Hindi",
        "7": "Indonesian",
        "8": "Japanese",
        "9": "Korean",
        "10": "Latin",
        "11": "Persian",
        "12": "Portugese",
        "13": "Pushto",
        "14": "Romanian",
        "15": "Russian",
        "16": "Spanish",
        "17": "Swedish",
        "18": "Tamil",
        "19": "Thai",
        "20": "Turkish",
        "21": "Urdu",
    }
    num_classes = 22

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Shreyar_FinetunedRobertaDepression(PetrainedTextClassifier):
    name = "ShreyaR/finetuned-roberta-depression"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Shuvam_AutonlpCollege_Classification(PetrainedTextClassifier):
    name = "Shuvam/autonlp-college_classification-164469"
    id2label = {"0": "0", "1": "1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class SNlp_RobertaBaseFormalityRanker(PetrainedTextClassifier):
    name = "s-nlp/roberta-base-formality-ranker"
    id2label = {"0": "informal", "1": "formal"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class SNlp_Roberta_First_Toxicity_Classifier(PetrainedTextClassifier):
    name = "s-nlp/roberta_first_toxicity_classifier"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class SNlp_Roberta_Toxicity_Classifier(PetrainedTextClassifier):
    name = "s-nlp/roberta_toxicity_classifier"
    id2label = {"0": "neutral", "1": "toxic"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class SNlp_Roberta_Toxicity_Classifier_V1(PetrainedTextClassifier):
    name = "s-nlp/roberta_toxicity_classifier_v1"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class SNlp_RubertBaseCorruptionDetector(PetrainedTextClassifier):
    name = "s-nlp/rubert-base-corruption-detector"
    id2label = {"0": "unnatural", "1": "natural"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class SNlp_Russian_Toxicity_Classifier(PetrainedTextClassifier):
    name = "s-nlp/russian_toxicity_classifier"
    id2label = {"0": "neutral", "1": "toxic"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class SNlp_Xlmr_Formality_Classifier(PetrainedTextClassifier):
    name = "s-nlp/xlmr_formality_classifier"
    id2label = {"0": "formal", "1": "informal"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Apanc_RussianInappropriateMessages(PetrainedTextClassifier):
    name = "apanc/russian-inappropriate-messages"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Apanc_RussianSensitiveTopics(PetrainedTextClassifier):
    name = "apanc/russian-sensitive-topics"
    id2label = {
        "0": "LABEL_0",
        "1": "LABEL_1",
        "2": "LABEL_2",
        "3": "LABEL_3",
        "4": "LABEL_4",
        "5": "LABEL_5",
        "6": "LABEL_6",
        "7": "LABEL_7",
        "8": "LABEL_8",
        "9": "LABEL_9",
        "10": "LABEL_10",
        "11": "LABEL_11",
        "12": "LABEL_12",
        "13": "LABEL_13",
        "14": "LABEL_14",
        "15": "LABEL_15",
        "16": "LABEL_16",
        "17": "LABEL_17",
        "18": "LABEL_18",
        "19": "LABEL_19",
        "20": "LABEL_20",
        "21": "LABEL_21",
        "22": "LABEL_22",
        "23": "LABEL_23",
        "24": "LABEL_24",
        "25": "LABEL_25",
        "26": "LABEL_26",
        "27": "LABEL_27",
        "28": "LABEL_28",
        "29": "LABEL_29",
        "30": "LABEL_30",
        "31": "LABEL_31",
        "32": "LABEL_32",
        "33": "LABEL_33",
        "34": "LABEL_34",
        "35": "LABEL_35",
        "36": "LABEL_36",
        "37": "LABEL_37",
        "38": "LABEL_38",
        "39": "LABEL_39",
        "40": "LABEL_40",
        "41": "LABEL_41",
        "42": "LABEL_42",
        "43": "LABEL_43",
        "44": "LABEL_44",
        "45": "LABEL_45",
        "46": "LABEL_46",
        "47": "LABEL_47",
        "48": "LABEL_48",
        "49": "LABEL_49",
        "50": "LABEL_50",
        "51": "LABEL_51",
        "52": "LABEL_52",
        "53": "LABEL_53",
        "54": "LABEL_54",
        "55": "LABEL_55",
        "56": "LABEL_56",
        "57": "LABEL_57",
        "58": "LABEL_58",
        "59": "LABEL_59",
        "60": "LABEL_60",
        "61": "LABEL_61",
        "62": "LABEL_62",
        "63": "LABEL_63",
        "64": "LABEL_64",
        "65": "LABEL_65",
        "66": "LABEL_66",
        "67": "LABEL_67",
        "68": "LABEL_68",
        "69": "LABEL_69",
        "70": "LABEL_70",
        "71": "LABEL_71",
        "72": "LABEL_72",
        "73": "LABEL_73",
        "74": "LABEL_74",
        "75": "LABEL_75",
        "76": "LABEL_76",
        "77": "LABEL_77",
        "78": "LABEL_78",
        "79": "LABEL_79",
        "80": "LABEL_80",
        "81": "LABEL_81",
        "82": "LABEL_82",
        "83": "LABEL_83",
        "84": "LABEL_84",
        "85": "LABEL_85",
        "86": "LABEL_86",
        "87": "LABEL_87",
        "88": "LABEL_88",
        "89": "LABEL_89",
        "90": "LABEL_90",
        "91": "LABEL_91",
        "92": "LABEL_92",
        "93": "LABEL_93",
        "94": "LABEL_94",
        "95": "LABEL_95",
        "96": "LABEL_96",
        "97": "LABEL_97",
        "98": "LABEL_98",
        "99": "LABEL_99",
        "100": "LABEL_100",
        "101": "LABEL_101",
        "102": "LABEL_102",
        "103": "LABEL_103",
        "104": "LABEL_104",
        "105": "LABEL_105",
        "106": "LABEL_106",
        "107": "LABEL_107",
        "108": "LABEL_108",
        "109": "LABEL_109",
        "110": "LABEL_110",
        "111": "LABEL_111",
        "112": "LABEL_112",
        "113": "LABEL_113",
        "114": "LABEL_114",
        "115": "LABEL_115",
        "116": "LABEL_116",
        "117": "LABEL_117",
        "118": "LABEL_118",
        "119": "LABEL_119",
        "120": "LABEL_120",
        "121": "LABEL_121",
        "122": "LABEL_122",
        "123": "LABEL_123",
        "124": "LABEL_124",
        "125": "LABEL_125",
        "126": "LABEL_126",
        "127": "LABEL_127",
        "128": "LABEL_128",
        "129": "LABEL_129",
        "130": "LABEL_130",
        "131": "LABEL_131",
        "132": "LABEL_132",
        "133": "LABEL_133",
        "134": "LABEL_134",
        "135": "LABEL_135",
        "136": "LABEL_136",
        "137": "LABEL_137",
        "138": "LABEL_138",
        "139": "LABEL_139",
        "140": "LABEL_140",
        "141": "LABEL_141",
        "142": "LABEL_142",
        "143": "LABEL_143",
        "144": "LABEL_144",
        "145": "LABEL_145",
        "146": "LABEL_146",
        "147": "LABEL_147",
        "148": "LABEL_148",
        "149": "LABEL_149",
        "150": "LABEL_150",
        "151": "LABEL_151",
        "152": "LABEL_152",
        "153": "LABEL_153",
        "154": "LABEL_154",
        "155": "LABEL_155",
        "156": "LABEL_156",
        "157": "LABEL_157",
        "158": "LABEL_158",
        "159": "LABEL_159",
        "160": "LABEL_160",
        "161": "LABEL_161",
        "162": "LABEL_162",
        "163": "LABEL_163",
        "164": "LABEL_164",
        "165": "LABEL_165",
        "166": "LABEL_166",
        "167": "LABEL_167",
        "168": "LABEL_168",
        "169": "LABEL_169",
        "170": "LABEL_170",
        "171": "LABEL_171",
        "172": "LABEL_172",
        "173": "LABEL_173",
        "174": "LABEL_174",
        "175": "LABEL_175",
        "176": "LABEL_176",
        "177": "LABEL_177",
        "178": "LABEL_178",
        "179": "LABEL_179",
        "180": "LABEL_180",
        "181": "LABEL_181",
        "182": "LABEL_182",
        "183": "LABEL_183",
        "184": "LABEL_184",
        "185": "LABEL_185",
        "186": "LABEL_186",
        "187": "LABEL_187",
        "188": "LABEL_188",
        "189": "LABEL_189",
        "190": "LABEL_190",
        "191": "LABEL_191",
        "192": "LABEL_192",
        "193": "LABEL_193",
        "194": "LABEL_194",
        "195": "LABEL_195",
        "196": "LABEL_196",
        "197": "LABEL_197",
        "198": "LABEL_198",
        "199": "LABEL_199",
        "200": "LABEL_200",
        "201": "LABEL_201",
        "202": "LABEL_202",
        "203": "LABEL_203",
        "204": "LABEL_204",
        "205": "LABEL_205",
        "206": "LABEL_206",
        "207": "LABEL_207",
        "208": "LABEL_208",
        "209": "LABEL_209",
        "210": "LABEL_210",
        "211": "LABEL_211",
        "212": "LABEL_212",
        "213": "LABEL_213",
        "214": "LABEL_214",
        "215": "LABEL_215",
        "216": "LABEL_216",
        "217": "LABEL_217",
        "218": "LABEL_218",
        "219": "LABEL_219",
        "220": "LABEL_220",
        "221": "LABEL_221",
        "222": "LABEL_222",
        "223": "LABEL_223",
        "224": "LABEL_224",
        "225": "LABEL_225",
        "226": "LABEL_226",
        "227": "LABEL_227",
        "228": "LABEL_228",
        "229": "LABEL_229",
        "230": "LABEL_230",
        "231": "LABEL_231",
        "232": "LABEL_232",
        "233": "LABEL_233",
        "234": "LABEL_234",
        "235": "LABEL_235",
        "236": "LABEL_236",
        "237": "LABEL_237",
        "238": "LABEL_238",
        "239": "LABEL_239",
        "240": "LABEL_240",
        "241": "LABEL_241",
        "242": "LABEL_242",
        "243": "LABEL_243",
        "244": "LABEL_244",
        "245": "LABEL_245",
        "246": "LABEL_246",
        "247": "LABEL_247",
        "248": "LABEL_248",
        "249": "LABEL_249",
        "250": "LABEL_250",
        "251": "LABEL_251",
        "252": "LABEL_252",
        "253": "LABEL_253",
        "254": "LABEL_254",
        "255": "LABEL_255",
        "256": "LABEL_256",
        "257": "LABEL_257",
        "258": "LABEL_258",
        "259": "LABEL_259",
        "260": "LABEL_260",
        "261": "LABEL_261",
        "262": "LABEL_262",
        "263": "LABEL_263",
        "264": "LABEL_264",
        "265": "LABEL_265",
        "266": "LABEL_266",
        "267": "LABEL_267",
        "268": "LABEL_268",
        "269": "LABEL_269",
        "270": "LABEL_270",
        "271": "LABEL_271",
        "272": "LABEL_272",
        "273": "LABEL_273",
        "274": "LABEL_274",
        "275": "LABEL_275",
        "276": "LABEL_276",
        "277": "LABEL_277",
        "278": "LABEL_278",
        "279": "LABEL_279",
        "280": "LABEL_280",
        "281": "LABEL_281",
        "282": "LABEL_282",
        "283": "LABEL_283",
        "284": "LABEL_284",
        "285": "LABEL_285",
        "286": "LABEL_286",
        "287": "LABEL_287",
        "288": "LABEL_288",
        "289": "LABEL_289",
        "290": "LABEL_290",
        "291": "LABEL_291",
        "292": "LABEL_292",
        "293": "LABEL_293",
        "294": "LABEL_294",
        "295": "LABEL_295",
        "296": "LABEL_296",
        "297": "LABEL_297",
        "298": "LABEL_298",
        "299": "LABEL_299",
        "300": "LABEL_300",
        "301": "LABEL_301",
        "302": "LABEL_302",
        "303": "LABEL_303",
        "304": "LABEL_304",
        "305": "LABEL_305",
        "306": "LABEL_306",
        "307": "LABEL_307",
        "308": "LABEL_308",
        "309": "LABEL_309",
        "310": "LABEL_310",
        "311": "LABEL_311",
        "312": "LABEL_312",
        "313": "LABEL_313",
        "314": "LABEL_314",
        "315": "LABEL_315",
        "316": "LABEL_316",
        "317": "LABEL_317",
        "318": "LABEL_318",
        "319": "LABEL_319",
        "320": "LABEL_320",
        "321": "LABEL_321",
        "322": "LABEL_322",
        "323": "LABEL_323",
        "324": "LABEL_324",
        "325": "LABEL_325",
        "326": "LABEL_326",
        "327": "LABEL_327",
        "328": "LABEL_328",
        "329": "LABEL_329",
        "330": "LABEL_330",
        "331": "LABEL_331",
        "332": "LABEL_332",
        "333": "LABEL_333",
        "334": "LABEL_334",
        "335": "LABEL_335",
        "336": "LABEL_336",
        "337": "LABEL_337",
        "338": "LABEL_338",
        "339": "LABEL_339",
        "340": "LABEL_340",
        "341": "LABEL_341",
        "342": "LABEL_342",
        "343": "LABEL_343",
        "344": "LABEL_344",
        "345": "LABEL_345",
        "346": "LABEL_346",
        "347": "LABEL_347",
        "348": "LABEL_348",
        "349": "LABEL_349",
        "350": "LABEL_350",
        "351": "LABEL_351",
        "352": "LABEL_352",
        "353": "LABEL_353",
        "354": "LABEL_354",
        "355": "LABEL_355",
        "356": "LABEL_356",
        "357": "LABEL_357",
        "358": "LABEL_358",
        "359": "LABEL_359",
        "360": "LABEL_360",
        "361": "LABEL_361",
        "362": "LABEL_362",
        "363": "LABEL_363",
        "364": "LABEL_364",
        "365": "LABEL_365",
        "366": "LABEL_366",
        "367": "LABEL_367",
        "368": "LABEL_368",
        "369": "LABEL_369",
        "370": "LABEL_370",
        "371": "LABEL_371",
        "372": "LABEL_372",
        "373": "LABEL_373",
        "374": "LABEL_374",
        "375": "LABEL_375",
        "376": "LABEL_376",
        "377": "LABEL_377",
        "378": "LABEL_378",
        "379": "LABEL_379",
        "380": "LABEL_380",
        "381": "LABEL_381",
        "382": "LABEL_382",
        "383": "LABEL_383",
        "384": "LABEL_384",
        "385": "LABEL_385",
        "386": "LABEL_386",
        "387": "LABEL_387",
        "388": "LABEL_388",
        "389": "LABEL_389",
        "390": "LABEL_390",
        "391": "LABEL_391",
        "392": "LABEL_392",
    }
    num_classes = 393

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Smone55_AutonlpAu_Topics(PetrainedTextClassifier):
    name = "Smone55/autonlp-au_topics-452311620"
    id2label = {
        "0": "-1",
        "1": "0",
        "2": "1",
        "3": "10",
        "4": "100",
        "5": "101",
        "6": "102",
        "7": "103",
        "8": "104",
        "9": "105",
        "10": "106",
        "11": "107",
        "12": "108",
        "13": "109",
        "14": "11",
        "15": "110",
        "16": "111",
        "17": "112",
        "18": "113",
        "19": "114",
        "20": "115",
        "21": "116",
        "22": "117",
        "23": "118",
        "24": "119",
        "25": "12",
        "26": "120",
        "27": "121",
        "28": "122",
        "29": "123",
        "30": "124",
        "31": "125",
        "32": "13",
        "33": "14",
        "34": "15",
        "35": "16",
        "36": "17",
        "37": "18",
        "38": "19",
        "39": "2",
        "40": "20",
        "41": "21",
        "42": "22",
        "43": "23",
        "44": "24",
        "45": "25",
        "46": "26",
        "47": "27",
        "48": "28",
        "49": "29",
        "50": "3",
        "51": "30",
        "52": "31",
        "53": "32",
        "54": "33",
        "55": "34",
        "56": "35",
        "57": "36",
        "58": "37",
        "59": "38",
        "60": "39",
        "61": "4",
        "62": "40",
        "63": "41",
        "64": "42",
        "65": "43",
        "66": "44",
        "67": "45",
        "68": "46",
        "69": "47",
        "70": "48",
        "71": "49",
        "72": "5",
        "73": "50",
        "74": "51",
        "75": "52",
        "76": "53",
        "77": "54",
        "78": "55",
        "79": "56",
        "80": "57",
        "81": "58",
        "82": "59",
        "83": "6",
        "84": "60",
        "85": "61",
        "86": "62",
        "87": "63",
        "88": "64",
        "89": "65",
        "90": "66",
        "91": "67",
        "92": "68",
        "93": "69",
        "94": "7",
        "95": "70",
        "96": "71",
        "97": "72",
        "98": "73",
        "99": "74",
        "100": "75",
        "101": "76",
        "102": "77",
        "103": "78",
        "104": "79",
        "105": "8",
        "106": "80",
        "107": "81",
        "108": "82",
        "109": "83",
        "110": "84",
        "111": "85",
        "112": "86",
        "113": "87",
        "114": "88",
        "115": "89",
        "116": "9",
        "117": "90",
        "118": "91",
        "119": "92",
        "120": "93",
        "121": "94",
        "122": "95",
        "123": "96",
        "124": "97",
        "125": "98",
        "126": "99",
    }
    num_classes = 127

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Sofiascope_AmazonFineTunedWm(PetrainedTextClassifier):
    name = "Sofiascope/amazon-fine-tuned-wm"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Sofiascope_AmazonFineTuned(PetrainedTextClassifier):
    name = "Sofiascope/amazon-fine-tuned"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Songrb_DistilbertBaseUncasedFinetunedCola(PetrainedTextClassifier):
    name = "SongRb/distilbert-base-uncased-finetuned-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Sparkbeyond_RobertaLargeStsB(PetrainedTextClassifier):
    name = "SparkBeyond/roberta-large-sts-b"
    id2label = {"0": "LABEL_0"}
    num_classes = 1

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Stevenlimcorn_IndoRobertaIndonli(PetrainedTextClassifier):
    name = "StevenLimcorn/indo-roberta-indonli"
    id2label = {"0": "Contradiction", "1": "Neutral", "2": "Entailment"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Stevenlimcorn_IndonesianRobertaBaseEmotionClassifier(PetrainedTextClassifier):
    name = "StevenLimcorn/indonesian-roberta-base-emotion-classifier"
    id2label = {"0": "sadness", "1": "anger", "2": "love", "3": "fear", "4": "happy"}
    num_classes = 5

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tahsin_DistilbertBaseUncasedFinetunedEmotion(PetrainedTextClassifier):
    name = "Tahsin/distilbert-base-uncased-finetuned-emotion"
    id2label = {
        "0": "sadness",
        "1": "joy",
        "2": "love",
        "3": "anger",
        "4": "fear",
        "5": "surprise",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TahsinMayeesha_BanglaFakeNewsMbert(PetrainedTextClassifier):
    name = "Tahsin-Mayeesha/bangla-fake-news-mbert"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Monohime_RubertBaseCasedSentimentNew(PetrainedTextClassifier):
    name = "MonoHime/rubert-base-cased-sentiment-new"
    id2label = {"0": "NEUTRAL", "1": "POSITIVE", "2": "NEGATIVE"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Monohime_Rubert_Conversational_Cased_Sentiment(PetrainedTextClassifier):
    name = "MonoHime/rubert_conversational_cased_sentiment"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tehrannlp_AlbertBaseV2Mnli(PetrainedTextClassifier):
    name = "TehranNLP/albert-base-v2-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tehrannlp_BertBaseCasedMnli(PetrainedTextClassifier):
    name = "TehranNLP/bert-base-cased-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tehrannlp_BertBaseUncasedMnli(PetrainedTextClassifier):
    name = "TehranNLP/bert-base-uncased-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tehrannlp_ElectraBaseMnli(PetrainedTextClassifier):
    name = "TehranNLP/electra-base-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tehrannlp_XlnetBaseCasedMnli(PetrainedTextClassifier):
    name = "TehranNLP/xlnet-base-cased-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_AlbertBaseV2AvgMnli(PetrainedTextClassifier):
    name = "TehranNLP-org/albert-base-v2-avg-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseCasedAvgCola(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-cased-avg-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseCasedAvgMnli(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-cased-avg-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedAvgColaE(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-avg-cola-2e-5-21"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedAvgColaE(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-avg-cola-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedAvgColaE(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-avg-cola-2e-5-63"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedAvgMnliE(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-avg-mnli-2e-5-21"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedAvgMnliE(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-avg-mnli-2e-5-63"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedAvgMnli(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-avg-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedAvgSst2E(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-avg-sst2-2e-5-21"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedAvgSst2E(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-avg-sst2-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedAvgSst2E(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-avg-sst2-2e-5-63"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedClsHatexplain(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-cls-hatexplain"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedClsMnli(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-cls-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedClsSst2(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-cls-sst2"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedMrpcE(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-mrpc-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_BertBaseUncasedQqpE(PetrainedTextClassifier):
    name = "TehranNLP-org/bert-base-uncased-qqp-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAgNewsE(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-ag-news-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2", "3": "LABEL_3"}
    num_classes = 4

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgColaE(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-cola-2e-5-21"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgColaE(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-cola-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgColaE(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-cola-2e-5-63"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgCola(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-cola"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgMnliE(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-mnli-2e-5-21"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgMnliE(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-mnli-2e-5-63"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgMnliE(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-mnli-2e-5"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgMnli(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgQqpE(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-qqp-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgSst2E(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-sst2-2e-5-21"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgSst2E(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-sst2-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseAvgSst2E(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-avg-sst2-2e-5-63"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseMrpcE(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-mrpc-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseQqpE(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-qqp-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_ElectraBaseQqpClsE(PetrainedTextClassifier):
    name = "TehranNLP-org/electra-base-qqp-cls-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_RobertaBaseMnliE(PetrainedTextClassifier):
    name = "TehranNLP-org/roberta-base-mnli-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_RobertaBaseMrpcE(PetrainedTextClassifier):
    name = "TehranNLP-org/roberta-base-mrpc-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_RobertaBaseQqpE(PetrainedTextClassifier):
    name = "TehranNLP-org/roberta-base-qqp-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_XlnetBaseCasedAvgColaE(PetrainedTextClassifier):
    name = "TehranNLP-org/xlnet-base-cased-avg-cola-2e-5-21"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_XlnetBaseCasedAvgColaE(PetrainedTextClassifier):
    name = "TehranNLP-org/xlnet-base-cased-avg-cola-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_XlnetBaseCasedAvgColaE(PetrainedTextClassifier):
    name = "TehranNLP-org/xlnet-base-cased-avg-cola-2e-5-63"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_XlnetBaseCasedAvgMnliE(PetrainedTextClassifier):
    name = "TehranNLP-org/xlnet-base-cased-avg-mnli-2e-5-21"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_XlnetBaseCasedAvgMnliE(PetrainedTextClassifier):
    name = "TehranNLP-org/xlnet-base-cased-avg-mnli-2e-5-63"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_XlnetBaseCasedAvgMnliE(PetrainedTextClassifier):
    name = "TehranNLP-org/xlnet-base-cased-avg-mnli-2e-5"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_XlnetBaseCasedAvgMnli(PetrainedTextClassifier):
    name = "TehranNLP-org/xlnet-base-cased-avg-mnli"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_XlnetBaseCasedAvgSst2E(PetrainedTextClassifier):
    name = "TehranNLP-org/xlnet-base-cased-avg-sst2-2e-5-21"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_XlnetBaseCasedAvgSst2E(PetrainedTextClassifier):
    name = "TehranNLP-org/xlnet-base-cased-avg-sst2-2e-5-42"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TehrannlpOrg_XlnetBaseCasedAvgSst2E(PetrainedTextClassifier):
    name = "TehranNLP-org/xlnet-base-cased-avg-sst2-2e-5-63"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tejas003_Distillbert_Base_Uncased_Amazon_Review_Sentiment_300(
    PetrainedTextClassifier
):
    name = "Tejas003/distillbert_base_uncased_amazon_review_sentiment_300"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tejas3_Xlnet_Base_80(PetrainedTextClassifier):
    name = "Tejas3/Xlnet_base_80"
    id2label = {"0": "NEGATIVE", "1": "NEUTRAL", "2": "POSITIVE"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tejas3_Distillbert_110_Uncased_Movie_Genre(PetrainedTextClassifier):
    name = "Tejas3/distillbert_110_uncased_movie_genre"
    id2label = {
        "0": "action",
        "1": "drama",
        "2": "horror",
        "3": "sci_fi",
        "4": "superhero",
        "5": "thriller",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tejas3_Distillbert_110_Uncased_V1(PetrainedTextClassifier):
    name = "Tejas3/distillbert_110_uncased_v1"
    id2label = {
        "0": "action",
        "1": "drama",
        "2": "horror",
        "3": "sci_fi",
        "4": "superhero",
        "5": "thriller",
    }
    num_classes = 6

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tejas3_Distillbert_Base_Uncased_80(PetrainedTextClassifier):
    name = "Tejas3/distillbert_base_uncased_80"
    id2label = {"0": "NEGATIVE", "1": "NEUTRAL", "2": "POSITIVE"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tejas3_Distillbert_Base_Uncased_80_All(PetrainedTextClassifier):
    name = "Tejas3/distillbert_base_uncased_80_all"
    id2label = {"0": "NEGATIVE", "1": "NEUTRAL", "2": "POSITIVE"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tejas3_Distillbert_Base_Uncased_80_Equal(PetrainedTextClassifier):
    name = "Tejas3/distillbert_base_uncased_80_equal"
    id2label = {"0": "NEGATIVE", "1": "NEUTRAL", "2": "POSITIVE"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Tejas3_Distillbert_Base_Uncased_Amazon_Food_Review_300(PetrainedTextClassifier):
    name = "Tejas3/distillbert_base_uncased_amazon_food_review_300"
    id2label = {"0": "LABEL_0", "1": "LABEL_1"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class TheDataHound_Bacteria_Lamp_Network(PetrainedTextClassifier):
    name = "The-Data-Hound/bacteria_lamp_network"
    id2label = {"0": "NEGATIVE", "1": "POSITIVE"}
    num_classes = 2

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Theivaprakasham_BertBaseCasedTwitter_Sentiment(PetrainedTextClassifier):
    name = "Theivaprakasham/bert-base-cased-twitter_sentiment"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Theivaprakasham_SentenceTransformersMsmarcoDistilbertBaseTasBTwitter_Sentiment(
    PetrainedTextClassifier
):
    name = "Theivaprakasham/sentence-transformers-msmarco-distilbert-base-tas-b-twitter_sentiment"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)


class Theivaprakasham_SentenceTransformersParaphraseMinilmL6V2Twitter_Sentiment(
    PetrainedTextClassifier
):
    name = "Theivaprakasham/sentence-transformers-paraphrase-MiniLM-L6-v2-twitter_sentiment"
    id2label = {"0": "LABEL_0", "1": "LABEL_1", "2": "LABEL_2"}
    num_classes = 3

    def __init__(self):
        PetrainedTextClassifier.__init__(self)

    def run(
        self, X: Seq[Sentence], y: Supervised[VectorCategorical]
    ) -> VectorCategorical:
        return PetrainedTextClassifier.run(self, X, y)
